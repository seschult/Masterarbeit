ÅÐÓÆ %ADO_DSC_Encoding: MacOS Roman
%%Title: MPP_logo_cmyk.eps
%%Creator: Adobe Illustrator(R) 15.0
%%For: Tobias Aschenbrenner
%%CreationDate: 09.10.13
%%BoundingBox: 0 0 205 142
%%HiResBoundingBox: 0 0 204.0898 141.2344
%%CropBox: 0 0 204.0898 141.2344
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.0.2%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.0.2 x399 R agm 4.5189 ct 5.1875%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 92 8%%BeginData: 7708 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD36FF600CFD7EFF590CA8FD7EFF0C84FD7EFF130CFD7EFF5913FD%7EFFA80CA8FD7DFFA81384FD7EFF0C59FD7EFF3513FD7EFF3513FD18FF84%1384FD63FF600CFD17FF59120CAFFD63FF590CA8FD14FFA80C0C35FD65FF%840CFD14FF600C13A8FD66FF840CA8FD11FFA8130C60FD68FFAF0CAFFD10%FF59130CA8FD69FF7D0CA8FD0FFF0C0C35FD6BFF840CAFFD0DFFAF0C1384%FD6CFF5912A8FD0CFF600C13A8FD6DFF840CFD0CFF350C59FD6FFF3513A8%FD09FFA8130C84FD6DFF35FFFF3513FD09FF84130CAFFD6DFFA80C84FF0C%35FD08FF590C0CFD70FF0C84FF1384FD07FF591235FD70FFA81359A80CA8%FD06FF130C59FD72FF12608413AFFD05FF131284FD73FF1335350CFD05FF%0C0C84FD74FF0C350C60FD04FF0C13A8FD0BFFA8A884A8848484AEA8FD60%FFAF130C1284FFFFAF0C0C84FD05FFAFA85935FD0F0C6084AFFD5BFF0C13%13FFFFFF0C13A8FFFFFFAF8435130C131235598484AFA8FFAFFFA8AF8484%35350C120C1359AFFD57FFA80C0C60FFAF0C13A8FFFFA8350C0C1359A8A8%FD11FFA88413120CA8FD56FF840C12A8FF0C13AFFF84130C1359AFA8FFA8%A884A884AFA8FD0FFFA8AFFD57FF350C13FF0C13A8840C0C0C595959FD0B%0C13138484FD63FF130C84131384350C130C130C1313355984A8AFA8FFA8%AF848435130C130C60A8FD5FFFA80C130C0C0C130C0C0C133584A8FD0EFF%AF59130C0C0CA8FD5DFF35120C130C130C131384AFFD15FF59130C35A8FD%5AFFA813FD050C1384FD1AFF840C0C35FD59FF840C130C1313A8FD1EFF59%120CAFFD56FFAF0C130C0C59FD21FFA8130C60FD55FF13120C13A8FD24FF%600C35FD53FF590C0C13A8FD26FF840B59FD51FFA8130C35FD29FFAFA8FD%50FFA8130C35FD7BFFAF350C35FD7BFFA8130C13A9FD7AFF84130C13A8FD%7AFF59120C0C7DFD79FF8413120C1335FD78FF7D13FD050CAFFD74FFAF84%350C130C130C130C84FD71FF35130C130C0C0C6059120C130C13A8FD70FF%A83513353584AFFF591313840C1359FFFFFFAF35A8FD0BFFAF3535FD1BFF%AFFD47FF840C0C59FF0C0C0CAFFFFFFF350C59FD0BFF350C13A8FD12FF60%A8FD04FFAF0C35FD45FF84350C13A8FF59120C3CFFFFFF8459AF13FD0AFF%AF13FF3584FD06FF8435FD0AFF0CAFFD04FF1313A8FD44FF130C0C84FFFF%A8120C0C84FFFFAF0CFFA813FFFFAFA8FD06FF3584FF8413FFFFFFAFAFFF%FF0C127DFD07FF5935FFFFFF60350C0C8459AFFD42FF6084FD04FF130C60%0CFFFFFF3584FFFF13FFFF6035FD05FFA835FFFFAF13A9FFA8130CAFFFFF%841313351384FFFF13353535FFFF84131384353584FD47FF840CA80D13FF%FF8413FFFFA813FF840C130C84A8AFFF1359FFFFFF3584FF135913A8FD04%FF840C13A8FFFF84358484FFFFFF0CFD4CFF0C35FF1359FFFF601284A8FF%13FF5913133535FF84FF0C136084A83535FF0C1335FD04FF60138459FD04%FF1384FFFFFFA813A8FD4AFF3512A9AF0CA8FFFF843513130C13A8FF0CAF%5984FFFFA812356013130CAFFFAF0CAFFFFF591335603559A8FFFFFF13A8%FFFFFF590C1384FD48FFA81259FF8412A8FD06FFA8A8FF8413FD06FFA9FD%07FFA813FFFFFF84353559FD04FFA80C1384FFFFFF84FF5984FD49FF59FF%FF600CFD0AFF1359FD0EFF5935FFFFFFA83584FD05FF84A884AFFD53FF35%13FD0AFF59FD0FFF12AFFD62FF130CFD19FF5959FD63FF84AFFDFCFFFDFC%FFFD5FFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FF353560353535603535356035353560353535%603535356035353560353535603535356035353560353535603535356035%353560353535603535356035353560353535603535356035353560353535%603535356035353560353535603535356035353560353535603535356035%3535603535356035353560353535603535356035AFFFA8FFAFFFA8FFAFFF%A8FFAFFFA8FFAFFFA8FFAFFFA8FFAFFFA8FFAFFFA8FFAFFFA8FFAFFFA8FF%AFFFA8FFAFFFA8FFAFFFA8FFAFFFA8FFAFFFA8FFAFFFA8FFAFFFA8FFAFFF%A8FFAFFFA8FFAFFFA8FFAFFFA8FFAFFFA8FFAFFFA8FFAFFFA8FFAFFFA8FF%AFFFA8FFAFFFA8FFAFFFA8FFAFFFA8FFAFFFA8FFAFFFA8FFAFFFA8FDFCFF%FD1CFFAFFFFFFFA8FD11FFA8FD39FFAFFFFFAFA8FD0FFFA8FD04FF7D1384%FFFF130CAFFD0DFFA80C845960AF5935FD0FFFA813A8FD06FFAF0C35A8FD%0DFF59FD0FFFA85959FD0BFFA813358435FF5913FD0CFFA860FF8413FD04%FF0C35FFFF0C35FD0FFF13AFFF0C848435FD10FF0CAFFD07FF1359FD0BFF%A8FFFFAFFFFFA8FD07FFA8FD04FF8459FFA8A8AF84FD08FF1384FF6013AE%13FD0DFF84FFA835FFFFFFA8350CFF84130CFFFFFFA8FFAFAFA8FFA8FD05%FF0CAFFF13358435FFFFFFA8FFA8FFAFAFFD04FFA8FFFF13A8FFA8FD05FF%0C60FFFFA8FFA8FFFFFFA8FF5913A8FFA8FF5913A8FFAFFFA8FF8413A8FF%FFFF3535FFA87DAF59FFA8FFA8FD04FF1359FF59138435A8FFFFFFA8FFA8%FFFFAFA8FFA8FFFFAF13FFA8FFAF841384AF5935FFAF598459FF13848484%FD04FFAF13848435FF8435FF84593584FF13605960FFA8598459FF13FF59%84FD05FF3559FF35608435FFAFA884A88413FF8435FF6013FF5984FF35A8%A80CAFFFFFFF3513FF35AFFF35A8A8133584FFFFFF1360A835A8AF138435%AFA813A8A884A88484A8AF13FFA860A860A8A8A83513A8840CFFA8848413%FFAF0C84FFFF5984A8FF0CA8A8FFFF8435FF84AF3559FF1384FF0CFF0CAF%A884FF130CA8FFFF7D8484FF0C60FF5935FF13AF59597DFF8435FFFF0CFF%5935FF8459FF35A8A813FD04FF3560FF3559FF0CAFA813A8FD04FF1359AF%A8FF8413FF5935FF128484FF59357DFFFF13AFAF0C35A8FFAFA8A80CFF59%13FFA884A813FFFF3535FFAF6059FFFF13A8FFFFFF5960FF84846059FF13%FFA835A813FD04FF131359FFFF845984FF1359FF5984FF35A8AF351384A8%13FFFF13FF8435FF5984FF5984FF13FD04FF6059FF3584FF35A8AF35FD05%FF1384FFFFFFA813FF5960FF841284FFAF351359FF12FFA83512A8FF8484%A813FF590CFF0C848412A884841359FD04FFAF0CA8FFFFFF590CFF0CAF35%35A81384AF0CFF0C84FF84A813841359FD05FF0C35FF5959FF0CA87DFF84%848413A8AF0CFF5913FF8435FF0C84A813A8FFFFFF3535FF3559AF0CAF84%13A8FFFFFFA81359FFFFFF7D13FF3535FFA81384FF59FFA860A813A8A813%A80CA8AE84FFA8FF8484A8AF358484AF84FF8484FD04FF848484FFFFFF84%84AF8459A884FF59AFA884A8FF8484A8FF59AF8484AFFFFFFFA88484FF84%84A884A8AF84A8FFFF59AFA884A8FF59FFAFFD0484FF59AFFFFFFF8460FF%A8608484A8A859AFFFFFFFAF6084AFFFFFA859FF8484FFFF84FFFFAF8484%AFFF59AFA884AF8484FD70FF8484FD7DFFA835A9FD7EFFAFFD2CFFAF8484%FF59FF84AFFD0EFF84FF84FFFFFF84AFFD08FF84FD0CFF84AFFD07FF84FD%07FF84FD3BFF845960A813FD0484A8FF84AF84FFAF84A8AFA8FFA860FF59%AF84FD04A884FF7DFFA884A88459FFAF84A8AF84AF84AFFFFF35AF84A8FF%84A88459A87D59A8FFA884598484FD3AFF84AF598435847D601360598435%35598413603584FFFF136059840C6084840C84591359601384593559840C%605984596059FFAF60843535841384598484845984A8845960A884FD3AFF%84A8840CA8136059845959A859A86035845935A884845984845959596084%605959598459A85984A86013605960A860A88484A835847D84846059FD05%847DA8598459AF59FD3AFF84A8A813FF3584A8358459FF35AF5984358435%FFFFFF59FF608435848484353559595984A860593C6084358459FF596060%FFFF60598484843535846059A83584596084608484FD3AFFA859FF84FFA8%FFA884A8AFA8AFA8AFA884A8AFAFFFFFAFFFAFAF84A8FFA884A8FF84AFA8%FFA8AF84FFFF84A8FFFF601384FFFFA8AFA8AFA884A8FF84AFFFFD04A8FF%848484FD68FF8460A8FD13FFA8FD6CFFAFFD30FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                      
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="ï»¿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS5</xmp:CreatorTool>
         <xmp:CreateDate>2013-10-09T14:17:43+02:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>180</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAtAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq88/PXSZ73yJJd27Ms+k3EV6vAkGikxsdv5RJyr7ZfpzUve6rtjEZYLHOJv9H6W&#xA;XeVdaGt+W9N1YU5XlvHLIF6CQr+8X6HqMqnGiQ5+my+JjjLvCa5FudirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqD1rTo9T0e+02SnC9t5bdiewlQp&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmp:MetadataDate>2013-10-09T14:17:43+02:00</xmp:MetadataDate>
         <xmp:ModifyDate>2013-10-09T14:17:43+02:00</xmp:ModifyDate>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Standard-Farbfeldgruppe</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:06801174072068118C14DEE999249ECD</stEvt:instanceID>
                  <stEvt:when>2013-10-09T14:17:43+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <xmpMM:DerivedFrom rdf:parseType="Resource"/>
         <xmpMM:DocumentID>xmp.did:06801174072068118C14DEE999249ECD</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:06801174072068118C14DEE999249ECD</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:06801174072068118C14DEE999249ECD</xmpMM:OriginalDocumentID>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -141.234 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 141.234 li
204.09 141.234 li
204.09 0 li
cp
clp
[1 0 0 1 0 0 ]ct
48.6475 140.77 mo
48.2788 139.285 47.9834 137.736 47.9834 136.197 cv
47.9834 134.66 48.2578 133.006 48.6475 131.529 cv
48.0889 131.529 li
47.5938 133.016 47.1514 134.617 47.1514 136.197 cv
47.1514 137.736 47.5938 139.316 48.0679 140.77 cv
48.6475 140.77 li
48.6475 140.77 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
1 0 .47 .3 cmyk
f
57.7925 131.529 mo
56.9395 131.529 li
55.5483 138.189 li
54.2207 131.529 li
53.146 131.529 li
51.7134 138.189 li
50.4067 131.529 li
49.4585 131.529 li
51.1445 139.148 li
52.2192 139.148 li
53.6309 132.469 li
54.9692 139.148 li
56.0435 139.148 li
57.7925 131.529 li
57.7925 131.529 li
cp
f
60.8979 136.039 mo
58.9595 136.039 li
58.9595 135.797 58.9805 135.576 59.0015 135.355 cv
59.0752 134.766 59.3174 134.322 59.9814 134.322 cv
60.6133 134.322 60.8242 134.818 60.877 135.365 cv
60.8979 135.598 60.8979 135.818 60.8979 136.039 cv
60.8979 136.039 li
cp
61.7407 136.609 mo
61.7407 136.367 li
61.7407 135.08 61.6987 133.721 59.9917 133.721 cv
58.1797 133.721 58.106 135.281 58.106 136.703 cv
58.106 138.094 58.3062 139.264 59.9282 139.264 cv
61.2246 139.264 61.667 138.568 61.7095 137.482 cv
60.8872 137.482 li
60.8662 138.105 60.7188 138.652 59.9282 138.652 cv
59.0332 138.652 58.9595 137.842 58.9595 136.967 cv
58.9595 136.609 li
61.7407 136.609 li
61.7407 136.609 li
cp
ef
65.1177 134.533 mo
65.1177 133.732 li
65.0967 133.732 65.0547 133.732 65.0337 133.732 cv
64.4331 133.732 63.9692 134.006 63.6851 134.533 cv
63.6851 133.838 li
62.8633 133.838 li
62.8843 134.07 62.8945 134.564 62.8945 134.807 cv
62.8945 139.148 li
63.7373 139.148 li
63.7373 135.861 li
63.7373 135.08 64.106 134.512 64.9385 134.512 cv
65.002 134.512 65.0547 134.523 65.1177 134.533 cv
65.1177 134.533 li
cp
ef
69.5186 139.148 mo
69.5186 135.375 li
69.5186 134.375 69.1812 133.721 68.1172 133.721 cv
67.4429 133.721 66.9688 134.121 66.7368 134.564 cv
66.7368 133.838 li
65.9155 133.838 li
65.9468 134.227 65.9575 134.607 65.9575 134.996 cv
65.9575 139.148 li
66.7896 139.148 li
66.7896 135.955 li
66.7896 135.238 67.0845 134.354 67.8643 134.354 cv
68.6968 134.354 68.6865 135.113 68.6865 135.756 cv
68.6865 139.148 li
69.5186 139.148 li
69.5186 139.148 li
cp
ef
73.5078 136.039 mo
71.5693 136.039 li
71.5693 135.797 71.5903 135.576 71.6118 135.355 cv
71.6851 134.766 71.9277 134.322 72.5913 134.322 cv
73.2236 134.322 73.4341 134.818 73.4868 135.365 cv
73.5078 135.598 73.5078 135.818 73.5078 136.039 cv
73.5078 136.039 li
cp
74.3511 136.609 mo
74.3511 136.367 li
74.3511 135.08 74.3086 133.721 72.6021 133.721 cv
70.7896 133.721 70.7158 135.281 70.7158 136.703 cv
70.7158 138.094 70.916 139.264 72.5386 139.264 cv
73.8345 139.264 74.2769 138.568 74.3193 137.482 cv
73.4976 137.482 li
73.4766 138.105 73.3286 138.652 72.5386 138.652 cv
71.6431 138.652 71.5693 137.842 71.5693 136.967 cv
71.5693 136.609 li
74.3511 136.609 li
74.3511 136.609 li
cp
ef
77.728 134.533 mo
77.728 133.732 li
77.7065 133.732 77.6646 133.732 77.6436 133.732 cv
77.043 133.732 76.5796 134.006 76.2949 134.533 cv
76.2949 133.838 li
75.4731 133.838 li
75.4941 134.07 75.5049 134.564 75.5049 134.807 cv
75.5049 139.148 li
76.3477 139.148 li
76.3477 135.861 li
76.3477 135.08 76.7163 134.512 77.5488 134.512 cv
77.6118 134.512 77.6646 134.523 77.728 134.533 cv
77.728 134.533 li
cp
ef
80.0742 136.682 mo
80.0742 135.955 li
77.9038 135.955 li
77.9038 136.682 li
80.0742 136.682 li
80.0742 136.682 li
cp
f
85.6982 139.148 mo
85.6982 131.529 li
84.8022 131.529 li
84.8022 134.859 li
82.2314 134.859 li
82.2314 131.529 li
81.3364 131.529 li
81.3364 139.148 li
82.2314 139.148 li
82.2314 135.576 li
84.8022 135.576 li
84.8022 139.148 li
85.6982 139.148 li
85.6982 139.148 li
cp
f
89.8267 136.039 mo
87.8882 136.039 li
87.8882 135.797 87.9092 135.576 87.9302 135.355 cv
88.0039 134.766 88.2461 134.322 88.9102 134.322 cv
89.5425 134.322 89.7529 134.818 89.8057 135.365 cv
89.8267 135.598 89.8267 135.818 89.8267 136.039 cv
89.8267 136.039 li
cp
90.6694 136.609 mo
90.6694 136.367 li
90.6694 135.08 90.6274 133.721 88.9204 133.721 cv
87.1084 133.721 87.0347 135.281 87.0347 136.703 cv
87.0347 138.094 87.2349 139.264 88.8574 139.264 cv
90.1533 139.264 90.5957 138.568 90.6382 137.482 cv
89.8164 137.482 li
89.7954 138.105 89.6475 138.652 88.8574 138.652 cv
87.9619 138.652 87.8882 137.842 87.8882 136.967 cv
87.8882 136.609 li
90.6694 136.609 li
90.6694 136.609 li
cp
ef
92.6665 139.148 mo
92.6665 133.838 li
91.834 133.838 li
91.834 139.148 li
92.6665 139.148 li
92.6665 139.148 li
cp
92.7085 132.541 mo
92.7085 131.635 li
91.792 131.635 li
91.792 132.541 li
92.7085 132.541 li
92.7085 132.541 li
cp
ef
97.0161 137.693 mo
97.0161 136.799 96.4155 136.461 95.752 136.104 cv
95.1514 135.775 94.6982 135.555 94.6982 135.027 cv
94.6982 134.596 94.9722 134.301 95.4043 134.301 cv
95.9102 134.301 96.0786 134.574 96.1313 134.955 cv
96.1421 135.061 96.1523 135.176 96.1523 135.291 cv
96.9849 135.291 li
96.9849 135.145 96.9741 134.996 96.9531 134.869 cv
96.8267 134.07 96.3628 133.721 95.4468 133.721 cv
94.5508 133.721 93.8657 134.154 93.8657 135.102 cv
93.8657 136.018 94.4878 136.281 95.2148 136.672 cv
95.8257 136.998 96.1733 137.188 96.1733 137.83 cv
96.1733 138.348 95.8994 138.652 95.3726 138.652 cv
94.8247 138.652 94.6353 138.326 94.5933 137.82 cv
94.5825 137.736 94.5825 137.619 94.5825 137.525 cv
93.75 137.525 li
93.75 137.662 93.75 137.799 93.7607 137.895 cv
93.8345 138.801 94.3613 139.254 95.3516 139.254 cv
96.3735 139.254 97.0161 138.758 97.0161 137.693 cv
97.0161 137.693 li
cp
f
100.691 136.039 mo
98.7524 136.039 li
98.7524 135.797 98.7739 135.576 98.7944 135.355 cv
98.8687 134.766 99.1108 134.322 99.7744 134.322 cv
100.407 134.322 100.617 134.818 100.67 135.365 cv
100.691 135.598 100.691 135.818 100.691 136.039 cv
100.691 136.039 li
cp
101.534 136.609 mo
101.534 136.367 li
101.534 135.08 101.492 133.721 99.7852 133.721 cv
97.9727 133.721 97.8989 135.281 97.8989 136.703 cv
97.8989 138.094 98.0991 139.264 99.7217 139.264 cv
101.018 139.264 101.46 138.568 101.502 137.482 cv
100.681 137.482 li
100.66 138.105 100.512 138.652 99.7217 138.652 cv
98.8262 138.652 98.7524 137.842 98.7524 136.967 cv
98.7524 136.609 li
101.534 136.609 li
101.534 136.609 li
cp
ef
106.26 139.148 mo
106.26 135.375 li
106.26 134.375 105.922 133.721 104.857 133.721 cv
104.184 133.721 103.709 134.121 103.479 134.564 cv
103.479 133.838 li
102.657 133.838 li
102.688 134.227 102.699 134.607 102.699 134.996 cv
102.699 139.148 li
103.531 139.148 li
103.531 135.955 li
103.531 135.238 103.826 134.354 104.605 134.354 cv
105.438 134.354 105.428 135.113 105.428 135.756 cv
105.428 139.148 li
106.26 139.148 li
106.26 139.148 li
cp
ef
110.48 136.387 mo
110.48 137.271 110.439 137.82 110.186 138.221 cv
110.039 138.453 109.85 138.621 109.521 138.621 cv
109.09 138.621 108.848 138.4 108.689 138.105 cv
108.469 137.684 108.479 137.061 108.479 136.514 cv
108.479 135.924 108.49 135.154 108.807 134.711 cv
108.963 134.49 109.195 134.332 109.533 134.332 cv
109.85 134.332 110.049 134.48 110.197 134.691 cv
110.48 135.102 110.48 135.828 110.48 136.387 cv
110.48 136.387 li
cp
111.334 136.398 mo
111.334 135.533 111.281 134.639 110.828 134.133 cv
110.598 133.879 110.26 133.721 109.775 133.721 cv
109.248 133.721 108.848 133.912 108.5 134.375 cv
108.5 131.529 li
107.668 131.529 li
107.668 138.137 li
107.668 138.389 107.637 138.895 107.625 139.148 cv
108.438 139.148 li
108.447 138.537 li
108.754 139.031 109.1 139.242 109.701 139.242 cv
110.186 139.242 110.512 139.084 110.756 138.842 cv
111.281 138.305 111.334 137.283 111.334 136.398 cv
111.334 136.398 li
cp
ef
115.115 136.039 mo
113.178 136.039 li
113.178 135.797 113.197 135.576 113.219 135.355 cv
113.293 134.766 113.535 134.322 114.199 134.322 cv
114.83 134.322 115.041 134.818 115.094 135.365 cv
115.115 135.598 115.115 135.818 115.115 136.039 cv
115.115 136.039 li
cp
115.959 136.609 mo
115.959 136.367 li
115.959 135.08 115.916 133.721 114.209 133.721 cv
112.396 133.721 112.324 135.281 112.324 136.703 cv
112.324 138.094 112.523 139.264 114.146 139.264 cv
115.441 139.264 115.885 138.568 115.928 137.482 cv
115.105 137.482 li
115.084 138.105 114.936 138.652 114.146 138.652 cv
113.25 138.652 113.178 137.842 113.178 136.967 cv
113.178 136.609 li
115.959 136.609 li
115.959 136.609 li
cp
ef
119.336 134.533 mo
119.336 133.732 li
119.314 133.732 119.271 133.732 119.252 133.732 cv
118.65 133.732 118.188 134.006 117.902 134.533 cv
117.902 133.838 li
117.08 133.838 li
117.102 134.07 117.111 134.564 117.111 134.807 cv
117.111 139.148 li
117.955 139.148 li
117.955 135.861 li
117.955 135.08 118.324 134.512 119.156 134.512 cv
119.219 134.512 119.271 134.523 119.336 134.533 cv
119.336 134.533 li
cp
ef
122.693 136.324 mo
122.693 137.125 122.725 138.506 121.629 138.506 cv
120.713 138.506 120.691 137.42 120.691 136.545 cv
120.691 135.586 120.701 134.344 121.682 134.344 cv
122.641 134.344 122.693 135.439 122.693 136.324 cv
122.693 136.324 li
cp
123.557 133.838 mo
122.725 133.838 li
122.725 134.459 li
122.451 133.943 122.092 133.721 121.449 133.721 cv
120.006 133.721 119.838 135.197 119.838 136.545 cv
119.838 137.725 119.953 139.084 121.439 139.084 cv
121.986 139.084 122.346 138.916 122.672 138.463 cv
122.672 138.578 122.672 139.189 122.672 139.189 cv
122.672 140.043 122.557 140.664 121.672 140.664 cv
121.039 140.664 120.85 140.264 120.85 139.695 cv
119.965 139.695 li
119.975 140.77 120.543 141.234 121.629 141.234 cv
122.945 141.234 123.525 140.686 123.525 139.379 cv
123.525 134.723 li
123.525 134.428 123.557 134.121 123.557 133.838 cv
123.557 133.838 li
cp
ef
126.811 136.682 mo
126.811 135.955 li
124.641 135.955 li
124.641 136.682 li
126.811 136.682 li
126.811 136.682 li
cp
f
128.969 139.148 mo
128.969 131.529 li
128.074 131.529 li
128.074 139.148 li
128.969 139.148 li
128.969 139.148 li
cp
f
134.076 139.148 mo
134.076 135.375 li
134.076 134.375 133.74 133.721 132.676 133.721 cv
132 133.721 131.527 134.121 131.295 134.564 cv
131.295 133.838 li
130.473 133.838 li
130.504 134.227 130.516 134.607 130.516 134.996 cv
130.516 139.148 li
131.348 139.148 li
131.348 135.955 li
131.348 135.238 131.643 134.354 132.422 134.354 cv
133.254 134.354 133.244 135.113 133.244 135.756 cv
133.244 139.148 li
134.076 139.148 li
134.076 139.148 li
cp
ef
138.424 137.693 mo
138.424 136.799 137.824 136.461 137.16 136.104 cv
136.559 135.775 136.105 135.555 136.105 135.027 cv
136.105 134.596 136.379 134.301 136.813 134.301 cv
137.318 134.301 137.486 134.574 137.539 134.955 cv
137.549 135.061 137.561 135.176 137.561 135.291 cv
138.393 135.291 li
138.393 135.145 138.383 134.996 138.361 134.869 cv
138.234 134.07 137.771 133.721 136.854 133.721 cv
135.959 133.721 135.273 134.154 135.273 135.102 cv
135.273 136.018 135.895 136.281 136.623 136.672 cv
137.234 136.998 137.582 137.188 137.582 137.83 cv
137.582 138.348 137.307 138.652 136.781 138.652 cv
136.232 138.652 136.043 138.326 136 137.82 cv
135.99 137.736 135.99 137.619 135.99 137.525 cv
135.158 137.525 li
135.158 137.662 135.158 137.799 135.168 137.895 cv
135.242 138.801 135.77 139.254 136.76 139.254 cv
137.781 139.254 138.424 138.758 138.424 137.693 cv
138.424 137.693 li
cp
f
141.572 139.148 mo
141.572 138.494 li
141.436 138.516 141.309 138.537 141.193 138.537 cv
140.74 138.537 140.592 138.389 140.592 137.789 cv
140.592 134.449 li
141.541 134.449 li
141.541 133.838 li
140.592 133.838 li
140.592 132.488 li
139.76 132.857 li
139.76 133.838 li
138.969 133.838 li
138.969 134.449 li
139.76 134.449 li
139.76 137.883 li
139.76 138.811 139.959 139.201 140.961 139.201 cv
141.16 139.201 141.371 139.18 141.572 139.148 cv
141.572 139.148 li
cp
f
143.285 139.148 mo
143.285 133.838 li
142.453 133.838 li
142.453 139.148 li
143.285 139.148 li
143.285 139.148 li
cp
143.328 132.541 mo
143.328 131.635 li
142.41 131.635 li
142.41 132.541 li
143.328 132.541 li
143.328 132.541 li
cp
ef
146.75 139.148 mo
146.75 138.494 li
146.613 138.516 146.486 138.537 146.371 138.537 cv
145.918 138.537 145.771 138.389 145.771 137.789 cv
145.771 134.449 li
146.719 134.449 li
146.719 133.838 li
145.771 133.838 li
145.771 132.488 li
144.938 132.857 li
144.938 133.838 li
144.148 133.838 li
144.148 134.449 li
144.938 134.449 li
144.938 137.883 li
144.938 138.811 145.139 139.201 146.139 139.201 cv
146.34 139.201 146.551 139.18 146.75 139.148 cv
146.75 139.148 li
cp
f
151.234 139.148 mo
151.203 138.758 151.193 138.379 151.193 137.979 cv
151.193 133.838 li
150.35 133.838 li
150.35 137.061 li
150.35 137.777 150.203 138.611 149.307 138.611 cv
148.475 138.611 148.465 137.852 148.465 137.23 cv
148.465 133.838 li
147.631 133.838 li
147.631 137.6 li
147.631 138.578 148.012 139.242 149.055 139.242 cv
149.654 139.242 150.086 138.969 150.393 138.473 cv
150.402 139.148 li
151.234 139.148 li
151.234 139.148 li
cp
f
154.654 139.148 mo
154.654 138.494 li
154.518 138.516 154.393 138.537 154.275 138.537 cv
153.822 138.537 153.676 138.389 153.676 137.789 cv
153.676 134.449 li
154.623 134.449 li
154.623 133.838 li
153.676 133.838 li
153.676 132.488 li
152.844 132.857 li
152.844 133.838 li
152.053 133.838 li
152.053 134.449 li
152.844 134.449 li
152.844 137.883 li
152.844 138.811 153.043 139.201 154.045 139.201 cv
154.244 139.201 154.455 139.18 154.654 139.148 cv
154.654 139.148 li
cp
f
156.938 136.07 mo
156.938 134.533 156.506 132.975 156.021 131.529 cv
156.021 131.529 155.453 131.541 155.441 131.529 cv
155.854 132.994 156.105 134.596 156.105 136.113 cv
156.105 137.672 155.801 139.254 155.441 140.77 cv
156 140.77 li
156.484 139.273 156.938 137.652 156.938 136.07 cv
156.938 136.07 li
cp
f
1.51123 114.578 mo
1.51123 125.063 li
.24707 125.063 li
.24707 125.451 li
3.28125 125.451 li
3.28125 125.063 li
2.01709 125.063 li
2.01709 114.779 li
2.05078 114.779 li
5.20313 125.451 li
5.6416 125.451 li
8.91211 114.779 li
8.9458 114.779 li
8.9458 125.063 li
7.64746 125.063 li
7.64746 125.451 li
11.8618 125.451 li
11.8618 125.063 li
10.5806 125.063 li
10.5806 114.578 li
11.8618 114.578 li
11.8618 114.189 li
8.50732 114.189 li
6.0293 122.484 li
5.99561 122.484 li
3.61816 114.189 li
.24707 114.189 li
.24707 114.578 li
1.51123 114.578 li
1.51123 114.578 li
cp
f
17.4404 123.496 mo
17.4404 124.203 17.2046 124.389 17.0698 124.523 cv
16.665 124.877 16.311 125.012 15.7715 125.012 cv
14.9961 125.012 14.4731 124.508 14.4731 123.682 cv
14.4731 122.129 16.3447 121.945 17.4404 121.928 cv
17.4404 123.496 li
17.4404 123.496 li
cp
19.6997 124.287 mo
19.6152 124.574 19.4468 125.047 19.1094 125.047 cv
18.7554 125.047 18.7554 124.777 18.7554 124.271 cv
18.7554 120.248 li
18.7554 119.58 18.7554 118.607 16.4629 118.607 cv
14.4565 118.607 13.7656 119.613 13.7656 120.215 cv
13.7656 120.684 14.0186 121.018 14.4731 121.018 cv
14.895 121.018 15.1646 120.732 15.1646 120.314 cv
15.1646 119.764 14.6587 119.68 14.6587 119.545 cv
14.6587 119.061 15.8555 118.943 16.2266 118.943 cv
16.8169 118.943 17.4404 119.178 17.4404 119.965 cv
17.4404 121.574 li
14.8613 121.574 13.2598 122.451 13.209 124.018 cv
13.209 125.266 14.1191 125.67 15.1816 125.67 cv
16.041 125.67 16.8843 125.35 17.457 124.643 cv
17.5752 125.266 17.9292 125.67 18.5532 125.67 cv
19.3286 125.67 19.9355 125.08 19.9858 124.287 cv
19.6997 124.287 li
19.6997 124.287 li
cp
ef
22.7656 125.063 mo
21.8555 125.063 li
23.4907 122.652 li
25.0581 125.063 li
24.1816 125.063 li
24.1816 125.451 li
27.3003 125.451 li
27.3003 125.063 li
26.4741 125.063 li
24.1816 121.607 li
25.9014 119.162 li
26.8618 119.162 li
26.8618 118.775 li
24.4517 118.775 li
24.4517 119.162 li
25.3955 119.162 li
23.9458 121.27 li
22.5635 119.162 li
23.4736 119.162 li
23.4736 118.775 li
20.3213 118.775 li
20.3213 119.162 li
21.2148 119.162 li
23.2544 122.299 li
21.333 125.063 li
20.3213 125.063 li
20.3213 125.451 li
22.7656 125.451 li
22.7656 125.063 li
22.7656 125.063 li
cp
ef
32.4741 122.365 mo
32.4741 121.236 li
28.3438 121.236 li
28.3438 122.365 li
32.4741 122.365 li
32.4741 122.365 li
cp
f
36.7173 114.578 mo
37.189 114.578 li
39.4648 114.578 40.5439 114.764 40.5439 117.123 cv
40.5439 118.994 40.0381 119.988 37.2905 119.988 cv
36.7173 119.988 li
36.7173 114.578 li
36.7173 114.578 li
cp
33.7505 114.578 mo
35.082 114.578 li
35.082 125.063 li
33.6323 125.063 li
33.6323 125.451 li
38.2173 125.451 li
38.2173 125.063 li
36.7173 125.063 li
36.7173 120.377 li
37.5264 120.377 li
41.0664 120.377 42.3311 118.572 42.3311 117.191 cv
42.3311 115.707 41.353 114.189 38.2344 114.189 cv
33.7505 114.189 li
33.7505 114.578 li
33.7505 114.578 li
cp
ef
46.8301 125.451 mo
46.8301 125.063 li
45.5322 125.063 li
45.5322 113.684 li
44.9253 113.803 44.2676 113.836 43.644 113.836 cv
42.9189 113.836 li
42.9189 114.225 li
44.2173 114.225 li
44.2173 125.063 li
42.9189 125.063 li
42.9189 125.451 li
46.8301 125.451 li
46.8301 125.451 li
cp
f
52.0703 123.496 mo
52.0703 124.203 51.8345 124.389 51.6997 124.523 cv
51.2949 124.877 50.9409 125.012 50.4014 125.012 cv
49.626 125.012 49.1035 124.508 49.1035 123.682 cv
49.1035 122.129 50.9746 121.945 52.0703 121.928 cv
52.0703 123.496 li
52.0703 123.496 li
cp
54.3296 124.287 mo
54.2451 124.574 54.0767 125.047 53.7393 125.047 cv
53.3853 125.047 53.3853 124.777 53.3853 124.271 cv
53.3853 120.248 li
53.3853 119.58 53.3853 118.607 51.0928 118.607 cv
49.0869 118.607 48.3955 119.613 48.3955 120.215 cv
48.3955 120.684 48.6484 121.018 49.1035 121.018 cv
49.5249 121.018 49.7944 120.732 49.7944 120.314 cv
49.7944 119.764 49.2891 119.68 49.2891 119.545 cv
49.2891 119.061 50.4858 118.943 50.8564 118.943 cv
51.4468 118.943 52.0703 119.178 52.0703 119.965 cv
52.0703 121.574 li
49.4912 121.574 47.8896 122.451 47.8389 124.018 cv
47.8389 125.266 48.7495 125.67 49.8115 125.67 cv
50.6714 125.67 51.5142 125.35 52.0874 124.643 cv
52.2051 125.266 52.5591 125.67 53.1831 125.67 cv
53.9585 125.67 54.5654 125.08 54.6162 124.287 cv
54.3296 124.287 li
54.3296 124.287 li
cp
ef
56.165 125.063 mo
55.2378 125.063 li
55.2378 125.451 li
58.3901 125.451 li
58.3901 125.063 li
57.48 125.063 li
57.48 121.928 li
57.48 120.664 58.3564 119.096 59.5029 119.096 cv
60.1772 119.096 60.5649 119.281 60.5649 120.512 cv
60.5649 125.063 li
59.688 125.063 li
59.688 125.451 li
62.79 125.451 li
62.79 125.063 li
61.8799 125.063 li
61.8799 120.293 li
61.8799 118.742 60.4805 118.607 59.874 118.607 cv
58.6431 118.607 57.9858 119.332 57.5137 120.395 cv
57.48 120.395 li
57.48 118.607 li
57.1763 118.674 56.8564 118.725 56.5356 118.742 cv
56.2324 118.775 55.9121 118.775 55.5918 118.775 cv
55.2378 118.775 li
55.2378 119.162 li
56.165 119.162 li
56.165 125.063 li
56.165 125.063 li
cp
f
69.6016 123.361 mo
69.1968 124.574 68.2529 125.367 67.2754 125.316 cv
66.3984 125.266 65.876 124.912 65.6235 124.355 cv
65.5225 124.119 65.269 123.344 65.269 122.332 cv
65.269 120.125 65.6909 118.943 67.3091 118.943 cv
67.6797 118.943 68.7422 119.129 68.7422 119.584 cv
68.7422 119.77 68.2026 119.854 68.2026 120.512 cv
68.2026 121 68.5396 121.305 68.9946 121.305 cv
69.4668 121.305 69.7534 120.865 69.7534 120.41 cv
69.7534 119.113 68.2026 118.607 67.1069 118.607 cv
66.146 118.607 63.7354 119.332 63.7354 122.332 cv
63.7354 123.496 64.5273 125.67 67.1406 125.67 cv
68.8936 125.604 69.5679 124.557 69.9556 123.361 cv
69.6016 123.361 li
69.6016 123.361 li
cp
ef
74.3872 125.451 mo
74.3872 125.063 li
73.376 125.063 li
73.376 113.684 li
72.769 113.803 72.1118 113.836 71.4878 113.836 cv
71.1846 113.836 li
71.1846 114.225 li
72.061 114.225 li
72.061 125.063 li
71.1846 125.063 li
71.1846 125.451 li
74.3872 125.451 li
74.3872 125.451 li
cp
76.2417 119.162 mo
76.2417 119.213 li
73.3931 121.641 li
76.208 125.063 li
75.3652 125.063 li
75.3652 125.451 li
78.5679 125.451 li
78.5679 125.063 li
77.8604 125.063 li
74.6572 121.186 li
76.9834 119.162 li
78.0117 119.162 li
78.0117 118.775 li
75.2471 118.775 li
75.2471 119.162 li
76.2417 119.162 li
76.2417 119.162 li
cp
ef
83.9634 122.365 mo
83.9634 121.236 li
79.8335 121.236 li
79.8335 122.365 li
83.9634 122.365 li
83.9634 122.365 li
cp
f
89.7749 125.063 mo
88.3252 125.063 li
88.3252 114.578 li
89.7749 114.578 li
89.7749 114.189 li
85.2397 114.189 li
85.2397 114.578 li
86.6899 114.578 li
86.6899 125.063 li
85.2397 125.063 li
85.2397 125.451 li
89.7749 125.451 li
89.7749 125.063 li
89.7749 125.063 li
cp
f
91.7256 125.063 mo
90.7983 125.063 li
90.7983 125.451 li
93.9507 125.451 li
93.9507 125.063 li
93.0405 125.063 li
93.0405 121.928 li
93.0405 120.664 93.917 119.096 95.0635 119.096 cv
95.7378 119.096 96.1255 119.281 96.1255 120.512 cv
96.1255 125.063 li
95.2485 125.063 li
95.2485 125.451 li
98.3506 125.451 li
98.3506 125.063 li
97.4399 125.063 li
97.4399 120.293 li
97.4399 118.742 96.041 118.607 95.4341 118.607 cv
94.2036 118.607 93.5464 119.332 93.0742 120.395 cv
93.0405 120.395 li
93.0405 118.607 li
92.7368 118.674 92.4165 118.725 92.0962 118.742 cv
91.793 118.775 91.4727 118.775 91.1523 118.775 cv
90.7983 118.775 li
90.7983 119.162 li
91.7256 119.162 li
91.7256 125.063 li
91.7256 125.063 li
cp
f
103.611 118.775 mo
103.309 119.23 li
102.786 118.809 102.262 118.607 101.74 118.607 cv
99.9023 118.607 99.4644 119.973 99.4644 120.68 cv
99.4644 122.146 100.442 122.299 101.555 122.568 cv
102.954 122.922 103.881 123.227 103.881 123.883 cv
103.881 124.76 103.004 125.332 102.246 125.332 cv
100.998 125.332 100.172 124.439 99.8521 123.227 cv
99.4644 123.227 li
99.4644 125.451 li
99.835 125.451 li
100.206 124.844 li
100.695 125.383 101.437 125.67 102.144 125.67 cv
103.477 125.67 104.572 124.811 104.572 123.361 cv
104.572 122.299 104.117 121.709 102.819 121.439 cv
100.24 120.916 100.104 120.664 100.104 120.174 cv
100.104 119.973 100.307 118.91 101.689 118.943 cv
102.701 118.994 103.273 119.686 103.527 120.664 cv
103.898 120.664 li
103.898 118.775 li
103.611 118.775 li
103.611 118.775 li
cp
f
105.598 119.162 mo
106.559 119.162 li
106.559 124.203 li
106.559 125.012 106.693 125.67 107.908 125.67 cv
108.582 125.67 109.408 125.283 109.729 124.643 cv
109.459 124.457 li
109.189 124.777 108.953 125.08 108.514 125.08 cv
107.873 125.08 107.873 124.625 107.873 124.322 cv
107.873 119.162 li
109.357 119.162 li
109.357 118.775 li
107.873 118.775 li
107.873 116.635 li
107.453 116.701 107.031 116.701 106.592 116.701 cv
106.592 118.775 li
105.598 118.775 li
105.598 119.162 li
105.598 119.162 li
cp
f
111.479 115.135 mo
111.479 115.623 111.799 116.027 112.289 116.027 cv
112.777 116.027 113.148 115.656 113.148 115.135 cv
113.148 114.695 112.693 114.324 112.289 114.324 cv
111.867 114.324 111.479 114.695 111.479 115.135 cv
111.479 115.135 li
cp
113.957 125.451 mo
113.957 125.063 li
112.963 125.063 li
112.963 118.607 li
112.355 118.758 111.699 118.775 111.074 118.775 cv
110.518 118.775 li
110.518 119.162 li
111.648 119.162 li
111.648 125.063 li
110.518 125.063 li
110.518 125.451 li
113.957 125.451 li
113.957 125.451 li
cp
ef
114.967 119.162 mo
115.928 119.162 li
115.928 124.203 li
115.928 125.012 116.063 125.67 117.275 125.67 cv
117.951 125.67 118.775 125.283 119.096 124.643 cv
118.826 124.457 li
118.557 124.777 118.32 125.08 117.883 125.08 cv
117.242 125.08 117.242 124.625 117.242 124.322 cv
117.242 119.162 li
118.727 119.162 li
118.727 118.775 li
117.242 118.775 li
117.242 116.635 li
116.82 116.701 116.398 116.701 115.961 116.701 cv
115.961 118.775 li
114.967 118.775 li
114.967 119.162 li
114.967 119.162 li
cp
f
127.27 125.063 mo
126.309 125.063 li
126.309 118.607 li
125.703 118.758 125.045 118.775 124.422 118.775 cv
124.033 118.775 li
124.033 119.162 li
124.994 119.162 li
124.994 122.939 li
124.994 124.152 124.152 125.146 122.955 125.146 cv
122.449 125.146 121.926 124.928 121.926 123.9 cv
121.926 118.607 li
121.32 118.758 120.662 118.775 120.039 118.775 cv
119.701 118.775 li
119.701 119.162 li
120.611 119.162 li
120.611 124.053 li
120.611 124.861 120.949 125.688 122.6 125.688 cv
123.695 125.688 124.607 125.131 125.045 124.203 cv
125.078 124.203 li
125.078 125.568 li
125.686 125.502 126.309 125.451 126.916 125.451 cv
127.27 125.451 li
127.27 125.063 li
127.27 125.063 li
cp
f
128.08 119.162 mo
129.041 119.162 li
129.041 124.203 li
129.041 125.012 129.176 125.67 130.391 125.67 cv
131.064 125.67 131.891 125.283 132.211 124.643 cv
131.941 124.457 li
131.672 124.777 131.436 125.08 130.996 125.08 cv
130.355 125.08 130.355 124.625 130.355 124.322 cv
130.355 119.162 li
131.84 119.162 li
131.84 118.775 li
130.355 118.775 li
130.355 116.635 li
129.936 116.701 129.514 116.701 129.074 116.701 cv
129.074 118.775 li
128.08 118.775 li
128.08 119.162 li
128.08 119.162 li
cp
f
139.391 118.775 mo
139.391 116.871 li
139.391 115.186 139.912 114.207 140.723 114.207 cv
140.84 114.207 141.127 114.225 141.127 114.309 cv
141.127 114.527 140.992 114.543 140.992 114.729 cv
140.992 115.186 141.229 115.504 141.682 115.504 cv
141.969 115.504 142.307 115.285 142.307 114.949 cv
142.307 114.156 141.547 113.854 140.891 113.854 cv
139.271 113.854 138.074 115.066 138.074 117.949 cv
138.074 118.775 li
136.777 118.775 li
136.777 119.162 li
138.074 119.162 li
138.074 125.063 li
136.777 125.063 li
136.777 125.451 li
140.756 125.451 li
140.756 125.063 li
139.391 125.063 li
139.391 119.162 li
140.756 119.162 li
140.756 118.775 li
139.391 118.775 li
139.391 118.775 li
cp
f
149.283 125.063 mo
148.322 125.063 li
148.322 118.607 li
147.715 118.758 147.059 118.775 146.434 118.775 cv
146.047 118.775 li
146.047 119.162 li
147.008 119.162 li
147.008 122.939 li
147.008 124.152 146.164 125.146 144.969 125.146 cv
144.463 125.146 143.939 124.928 143.939 123.9 cv
143.939 118.607 li
143.332 118.758 142.676 118.775 142.051 118.775 cv
141.715 118.775 li
141.715 119.162 li
142.625 119.162 li
142.625 124.053 li
142.625 124.861 142.961 125.688 144.613 125.688 cv
145.709 125.688 146.619 125.131 147.059 124.203 cv
147.092 124.203 li
147.092 125.568 li
147.699 125.502 148.322 125.451 148.93 125.451 cv
149.283 125.451 li
149.283 125.063 li
149.283 125.063 li
cp
147.209 117.764 mo
147.631 117.764 148.002 117.426 148.002 116.988 cv
148.002 116.566 147.648 116.18 147.209 116.18 cv
146.754 116.18 146.434 116.551 146.434 116.988 cv
146.434 117.426 146.771 117.764 147.209 117.764 cv
147.209 117.764 li
cp
143.922 117.764 mo
144.344 117.764 144.715 117.426 144.715 116.988 cv
144.715 116.566 144.361 116.18 143.922 116.18 cv
143.467 116.18 143.146 116.551 143.146 116.988 cv
143.146 117.426 143.484 117.764 143.922 117.764 cv
143.922 117.764 li
cp
ef
152.555 118.607 mo
151.947 118.758 151.291 118.775 150.666 118.775 cv
150.145 118.775 li
150.145 119.162 li
151.291 119.162 li
151.291 125.063 li
150.145 125.063 li
150.145 125.451 li
153.902 125.451 li
153.902 125.063 li
152.605 125.063 li
152.605 121.859 li
152.605 121.186 152.791 120.529 153.027 120.039 cv
153.398 119.281 153.971 119.045 153.986 119.045 cv
154.037 119.045 154.139 119.045 154.139 119.146 cv
154.139 119.213 154.072 119.365 154.072 119.5 cv
154.072 119.838 154.426 120.174 154.729 120.174 cv
155.084 120.174 155.521 119.973 155.521 119.551 cv
155.521 118.91 155.066 118.607 154.494 118.607 cv
153.566 118.607 152.893 119.434 152.588 120.191 cv
152.555 120.191 li
152.555 118.607 li
152.555 118.607 li
cp
f
163.119 114.578 mo
163.592 114.578 li
165.867 114.578 166.947 114.764 166.947 117.123 cv
166.947 118.994 166.441 119.988 163.693 119.988 cv
163.119 119.988 li
163.119 114.578 li
163.119 114.578 li
cp
160.152 114.578 mo
161.484 114.578 li
161.484 125.063 li
160.035 125.063 li
160.035 125.451 li
164.621 125.451 li
164.621 125.063 li
163.119 125.063 li
163.119 120.377 li
163.93 120.377 li
167.469 120.377 168.734 118.572 168.734 117.191 cv
168.734 115.707 167.756 114.189 164.637 114.189 cv
160.152 114.189 li
160.152 114.578 li
160.152 114.578 li
cp
ef
170.316 125.063 mo
169.389 125.063 li
169.389 125.451 li
172.541 125.451 li
172.541 125.063 li
171.631 125.063 li
171.631 121.928 li
171.631 120.664 172.508 119.096 173.654 119.096 cv
174.328 119.096 174.717 119.281 174.717 120.512 cv
174.717 125.063 li
173.84 125.063 li
173.84 125.451 li
176.941 125.451 li
176.941 125.063 li
176.031 125.063 li
176.031 120.293 li
176.031 118.742 174.633 118.607 174.025 118.607 cv
172.795 118.607 172.137 119.332 171.666 120.395 cv
171.631 120.395 li
171.631 113.684 li
171.025 113.803 170.367 113.836 169.744 113.836 cv
169.389 113.836 li
169.389 114.225 li
170.316 114.225 li
170.316 125.063 li
170.316 125.063 li
cp
f
184.563 119.162 mo
184.563 118.775 li
182.168 118.775 li
182.168 119.162 li
183.248 119.162 li
181.646 123.689 li
179.775 119.162 li
180.854 119.162 li
180.854 118.775 li
177.617 118.775 li
177.617 119.162 li
178.41 119.162 li
180.988 125.439 li
180.6 126.617 180.398 127.072 180.264 127.391 cv
180.045 127.98 179.875 128.418 179.623 128.418 cv
179.438 128.418 179.42 127.795 178.746 127.795 cv
178.375 127.795 178.055 128.064 178.055 128.52 cv
178.055 128.924 178.51 129.26 178.865 129.26 cv
179.943 129.26 180.432 128.182 181.021 126.566 cv
183.719 119.162 li
184.563 119.162 li
184.563 119.162 li
cp
f
189.77 118.775 mo
189.467 119.23 li
188.943 118.809 188.422 118.607 187.898 118.607 cv
186.061 118.607 185.623 119.973 185.623 120.68 cv
185.623 122.146 186.6 122.299 187.713 122.568 cv
189.111 122.922 190.039 123.227 190.039 123.883 cv
190.039 124.76 189.162 125.332 188.404 125.332 cv
187.156 125.332 186.33 124.439 186.01 123.227 cv
185.623 123.227 li
185.623 125.451 li
185.994 125.451 li
186.365 124.844 li
186.854 125.383 187.596 125.67 188.303 125.67 cv
189.635 125.67 190.73 124.811 190.73 123.361 cv
190.73 122.299 190.275 121.709 188.977 121.439 cv
186.398 120.916 186.264 120.664 186.264 120.174 cv
186.264 119.973 186.465 118.91 187.848 118.943 cv
188.859 118.994 189.432 119.686 189.686 120.664 cv
190.057 120.664 li
190.057 118.775 li
189.77 118.775 li
189.77 118.775 li
cp
f
192.953 115.135 mo
192.953 115.623 193.273 116.027 193.762 116.027 cv
194.252 116.027 194.623 115.656 194.623 115.135 cv
194.623 114.695 194.168 114.324 193.762 114.324 cv
193.342 114.324 192.953 114.695 192.953 115.135 cv
192.953 115.135 li
cp
195.432 125.451 mo
195.432 125.063 li
194.438 125.063 li
194.438 118.607 li
193.83 118.758 193.172 118.775 192.549 118.775 cv
191.992 118.775 li
191.992 119.162 li
193.121 119.162 li
193.121 125.063 li
191.992 125.063 li
191.992 125.451 li
195.432 125.451 li
195.432 125.451 li
cp
ef
199.863 125.451 mo
199.863 125.063 li
198.852 125.063 li
198.852 113.684 li
198.244 113.803 197.586 113.836 196.963 113.836 cv
196.66 113.836 li
196.66 114.225 li
197.537 114.225 li
197.537 125.063 li
196.66 125.063 li
196.66 125.451 li
199.863 125.451 li
199.863 125.451 li
cp
201.717 119.162 mo
201.717 119.213 li
198.869 121.641 li
201.684 125.063 li
200.84 125.063 li
200.84 125.451 li
204.043 125.451 li
204.043 125.063 li
203.336 125.063 li
200.133 121.186 li
202.459 119.162 li
203.486 119.162 li
203.486 118.775 li
200.723 118.775 li
200.723 119.162 li
201.717 119.162 li
201.717 119.162 li
cp
ef
0 106.334 mo
204.09 106.334 li
204.09 107.387 li
0 107.387 li
0 106.334 li
0 106.334 li
cp
f
134.041 16.4106 mo
117.068 26.6953 101.686 39.1938 88.2417 53.4585 cv
105.268 41.8857 127.25 38.2388 147.963 45.165 cv
149.295 45.6104 148.625 47.6089 147.293 47.1631 cv
129.344 41.1611 110.404 43.355 94.8003 51.9121 cv
111.977 44.8872 132.813 46.8125 148.854 61.0479 cv
149.902 61.9805 148.504 63.5562 147.453 62.6235 cv
116.729 35.3569 67.6572 55.1694 64.8291 96.4063 cv
64.7329 97.8086 62.6309 97.6641 62.7271 96.2617 cv
63.0908 90.957 64.189 85.9902 65.895 81.416 cv
63.5137 84.9512 61.2349 88.5547 59.061 92.2266 cv
58.3452 93.4355 56.5322 92.3613 57.248 91.1523 cv
60.2607 86.0645 63.4746 81.1016 66.8799 76.2773 cv
62.5928 79.7266 57.8325 82.7051 52.6479 85.0996 cv
51.3726 85.6895 50.4888 83.7773 51.7642 83.1875 cv
56.5586 80.9727 60.9785 78.2422 64.9839 75.0898 cv
60.1479 77.502 54.7012 78.9648 48.8403 79.1973 cv
47.4365 79.252 47.353 77.1465 48.7563 77.0918 cv
71.854 76.1738 88.1519 55.0908 84.2749 33.0229 cv
84.0317 31.6392 86.1074 31.2744 86.3506 32.6582 cv
87.0962 36.9038 87.1348 41.1152 86.5513 45.1699 cv
91.5215 31.4038 91.9878 16.0103 86.8955 1.40674 cv
86.4331 .0805664 88.4229 -.613281 88.8853 .713379 cv
95.1226 18.6011 93.2881 37.6309 85.1904 53.6401 cv
99.1191 38.561 115.17 25.3818 132.949 14.6089 cv
134.15 13.8809 135.242 15.6831 134.041 16.4106 cv
134.041 16.4106 li
cp
f
93.8394 89.4473 mo
93.9946 89.2715 li
94.1294 89.1055 94.1177 88.9082 94.0483 88.7148 cv
93.9243 88.4219 li
93.7886 88.082 93.98 87.3672 94.2017 87.0859 cv
94.8511 86.2754 li
95.1284 85.9199 95.3862 85.5645 95.4688 85.375 cv
95.6514 84.9531 96.5649 83.2773 96.6929 82.9453 cv
96.8213 82.6094 97.6157 80.9375 97.7075 80.7344 cv
97.8481 80.4258 98.6104 78.9668 98.9746 78.752 cv
99.0371 78.7148 99.1196 78.6875 99.2104 78.707 cv
99.4629 78.7578 li
99.5894 78.8008 li
99.75 78.5996 99.897 78.4316 100.068 78.3516 cv
100.458 78.1367 li
100.597 78.0645 100.771 78.0059 100.913 78.1094 cv
102.098 78.9707 101.685 79.1465 101.91 80.498 cv
101.964 80.8184 102.6 82.8145 102.769 83.084 cv
102.962 83.3945 103.979 85.9219 104.07 86.2168 cv
104.117 86.3691 104.156 86.5996 104.193 86.8125 cv
104.248 87.0879 li
104.293 87.2266 li
104.461 87.416 li
104.537 87.5059 104.607 87.625 104.607 87.7988 cv
104.607 88.0684 104.496 88.5645 104.336 88.7559 cv
104.223 88.9004 li
104.68 89.2754 104.004 89.9902 103.633 90.0879 cv
103.465 90.1328 102.416 90.0684 101.466 90.002 cv
99.5459 89.8535 li
99.4946 89.8457 96.7642 89.4277 96.6523 89.4766 cv
96.4351 89.6211 li
96.3394 89.6855 96.2183 89.752 96.0537 89.7637 cv
95.8794 89.7734 li
95.7637 89.791 li
95.6553 89.9805 li
95.6733 90.1582 li
95.6831 90.2793 95.6724 90.5137 95.394 90.5332 cv
94.8042 90.6152 li
94.6021 90.6348 94.3057 90.6523 94.1538 90.4844 cv
93.9233 90.1914 li
93.8081 90.0098 93.6563 89.8496 93.7427 89.6191 cv
93.8394 89.4473 li
93.8394 89.4473 li
cp
96.562 85.6973 mo
96.0542 86.4375 li
96.3882 86.9121 96.4888 87.4102 96.6226 87.8438 cv
96.6841 88.0293 96.7583 88.1699 96.8018 88.2227 cv
96.9673 88.2168 li
97.1807 88.2344 li
97.563 88.2754 li
97.709 88.293 99.3174 88.5313 99.6089 88.5488 cv
100.86 88.6758 li
101.417 88.7324 101.926 88.7813 102.008 88.7734 cv
102.139 88.7617 102.286 88.7969 102.398 88.8301 cv
102.65 88.9023 li
102.692 88.9102 102.804 88.8516 102.908 88.7656 cv
102.957 88.5098 li
103.01 88.2969 103.205 88.1172 103.158 87.8828 cv
102.881 87.0059 li
102.755 86.6191 102.619 86.1973 102.607 86.0938 cv
102.601 86.041 102.388 85.5137 102.148 84.9434 cv
101.663 83.7988 li
100.817 81.1621 li
100.817 81.1621 100.76 80.8848 100.667 80.6211 cv
100.62 80.4883 100.566 80.3652 100.509 80.2813 cv
99.895 80.25 99.7578 80.8945 99.3198 80.8164 cv
99.1699 80.7793 li
99.0508 80.7598 li
98.9214 80.7598 98.7886 81.0527 98.7461 81.1484 cv
98.6733 81.3125 98.1646 82.4746 98.0918 82.6914 cv
97.9009 83.1094 li
97.5669 83.7871 li
97.2446 84.4492 li
97.1396 84.6836 li
97.0396 84.9414 li
96.9165 85.1523 li
96.562 85.6973 li
96.562 85.6973 li
cp
f
141.225 88.4668 mo
141.432 88.4473 li
141.727 88.4023 li
141.854 88.3867 li
141.965 88.3848 li
142.91 88.4375 142.787 88.9863 142.971 89.8184 cv
143.043 90.1484 143.201 90.2559 143.246 90.2559 cv
143.518 90.1953 li
143.641 90.1602 143.793 90.1211 143.957 90.1094 cv
144.166 90.0898 144.389 90.0566 144.6 90.0742 cv
144.732 90.0664 li
144.895 90.041 145.174 89.9668 145.211 90.2188 cv
145.273 90.6602 144.746 90.918 144.402 91.0508 cv
143.957 91.2031 li
143.619 91.3145 143.24 91.4102 143.002 91.4297 cv
142.869 91.4551 li
142.547 91.5254 142.393 91.334 142.254 91.0566 cv
141.992 90.5488 li
141.926 90.4199 141.881 90.3066 141.84 90.1465 cv
141.773 89.8203 li
141.549 89.8008 141.418 89.7305 141.188 89.8066 cv
141.182 89.8906 141.141 89.9492 140.975 90.1465 cv
140.801 90.3828 li
140.684 90.5781 li
140.615 90.6953 140.547 90.8145 140.418 90.9082 cv
140.18 91.1875 140.08 91.334 139.852 91.4199 cv
139.332 91.6152 138.828 91.2871 139.113 90.8027 cv
139.199 90.6816 li
139.623 89.6523 li
139.842 89.1113 140.051 88.5625 140.074 88.3672 cv
140.133 87.9121 140.338 87.2363 140.43 86.9766 cv
140.572 86.6445 li
140.611 86.5547 140.635 86.4844 140.643 86.4082 cv
140.68 86.0859 li
140.684 85.9688 li
140.504 85.7891 li
140.402 85.6855 140.305 85.541 140.355 85.3867 cv
140.428 85.2676 li
140.768 84.9609 li
140.518 84.8496 li
139.801 84.6719 li
139.373 84.459 li
139.109 84.3125 li
138.959 84.209 138.75 83.7207 138.799 83.5703 cv
138.873 83.3477 139.498 83.1914 139.658 83.2363 cv
140.348 83.4648 li
140.932 83.6543 141.039 83.6992 141.641 83.6582 cv
141.859 83.0723 li
141.99 82.7266 142.141 82.3398 142.201 82.2266 cv
142.422 81.7793 li
142.695 81.2324 143.105 80.8711 143.525 80.4336 cv
143.932 80.0117 li
144.275 79.6836 144.848 79.418 145.32 79.418 cv
146.551 79.418 146.15 80.4063 145.898 81.1191 cv
145.803 81.3926 145.264 81.9629 145.061 82.1914 cv
144.883 82.4219 li
144.471 83.1328 li
144.18 83.5918 li
144.486 83.6719 li
144.943 83.7637 li
144.943 83.7637 145.461 83.7246 146.066 83.707 cv
147.178 83.6758 147.68 83.7363 148.705 84.0898 cv
148.906 84.1582 149.41 84.3203 149.391 84.6191 cv
149.408 84.7676 li
149.453 84.9375 li
149.594 85.6094 148.004 85.3555 147.738 85.2383 cv
147.469 85.1211 146.174 84.9609 146.053 84.9746 cv
145.896 84.9941 144.148 85.0137 143.984 84.9941 cv
143.377 84.9434 li
143.02 84.9219 li
142.902 84.918 li
142.598 85.2227 li
142.156 85.7246 li
141.986 85.9453 141.711 86.666 141.711 86.8242 cv
141.686 86.9746 li
141.631 87.1621 li
141.473 87.623 li
141.316 88.0566 li
141.266 88.2051 li
141.225 88.4668 li
141.225 88.4668 li
cp
142.9 83.5156 mo
143.018 83.3828 li
143.398 82.875 li
143.455 82.7832 143.785 82.3672 144.023 81.9824 cv
144.26 81.5996 144.277 81.5449 144.406 81.3262 cv
144.529 81.1523 li
144.639 81.0215 144.756 80.8945 144.836 80.7441 cv
144.719 80.7676 144.449 80.8984 144.311 81.002 cv
144.256 81.043 144.148 81.168 144.021 81.3281 cv
143.691 81.75 li
143.537 81.9395 143.326 82.3477 143.295 82.4531 cv
142.9 83.5156 li
142.9 83.5156 li
cp
f
107.684 85.8711 mo
108.023 85.5293 108.416 85.1426 108.596 84.9902 cv
109.105 84.5254 li
109.266 84.3867 109.461 84.2422 109.66 84.2422 cv
110.584 84.1797 li
111.139 84.1719 li
111.359 84.1973 li
111.414 84.209 111.492 84.2324 111.545 84.2852 cv
111.695 84.4414 li
111.859 84.6523 li
111.955 84.7988 112.045 85.0059 111.963 85.2129 cv
111.852 85.4922 111.627 86.0898 111.479 86.3672 cv
111.34 86.6289 111.336 86.6895 111.35 86.8125 cv
111.43 86.957 li
111.488 87.0547 111.521 87.1836 111.414 87.334 cv
111.297 87.4785 li
111.17 87.6133 111.037 87.7422 110.938 87.8965 cv
110.775 88.1504 110.002 90.0645 109.895 90.4609 cv
109.838 90.6641 109.121 92.9688 108.918 93.4824 cv
108.813 93.752 108.545 94.2266 108.297 94.6602 cv
107.951 95.2676 li
107.762 95.6426 li
107.592 96.0781 li
107.543 96.209 107.514 96.3164 107.514 96.418 cv
107.514 97.127 106.498 97.3184 106.174 96.668 cv
106.02 96.3594 105.949 95.9922 106.172 95.7207 cv
106.471 95.373 li
106.578 95.2461 106.686 95.1016 106.781 94.9355 cv
106.98 94.5859 107.785 92.8613 107.912 92.5332 cv
108.045 92.1914 108.805 90.2285 108.875 89.8613 cv
109.021 89.1836 li
107.975 89.1055 107.457 89.207 106.924 88.1016 cv
106.783 87.8125 106.752 87.5625 106.768 87.3516 cv
106.816 87.0742 li
106.879 86.873 li
106.963 86.6211 107.035 86.5313 107.035 86.5313 cv
107.684 85.8711 li
107.684 85.8711 li
cp
108.619 86.4316 mo
108.488 86.6309 108.393 86.8145 108.393 86.8145 cv
108.268 86.9961 li
108.201 87.0938 108.121 87.2188 108.068 87.332 cv
108.006 87.4707 li
107.992 87.541 li
108 87.7441 108.264 87.9102 108.434 87.9512 cv
108.813 88.043 109.301 88.1328 109.611 87.8223 cv
109.715 87.6895 li
110.059 87.2012 li
110.209 87.0059 li
110.275 86.8555 li
110.35 86.5684 li
110.471 85.9824 li
110.602 85.6074 li
110.646 85.4453 110.559 85.3477 110.391 85.3574 cv
110.242 85.3848 li
110.055 85.4453 li
109.434 85.6523 108.977 85.8809 108.619 86.4316 cv
108.619 86.4316 li
cp
f
75.9414 81.4844 mo
75.9751 81.5273 75.9126 81.5957 75.8965 81.623 cv
75.7334 81.8828 li
74.7715 83.3691 75.7334 81.8828 74.7715 83.3691 cv
74.6128 83.623 li
74.5298 83.7227 li
74.5625 83.7676 74.4956 83.8516 74.4839 83.877 cv
74.313 84.1992 li
73.5732 85.5625 74.0239 84.7324 73.2739 86.1152 cv
73.0015 86.6367 li
72.7983 87.0098 li
72.4727 87.5859 li
72.3638 87.7852 72.2622 87.9824 72.1973 88.1445 cv
72.1191 88.3438 li
72.2788 88.4023 72.3687 88.375 72.4985 88.375 cv
72.8462 88.375 73.2646 88.2793 73.5972 88.2305 cv
73.7168 88.2148 73.8286 88.2598 73.9185 88.3086 cv
74.1836 88.4922 li
74.4194 88.6621 li
74.4946 88.7051 74.5479 88.7227 74.5854 88.7227 cv
75.5962 88.7227 76.3955 88.8594 77.2974 89.3496 cv
77.4414 89.4277 78.3457 89.6621 78.4521 89.3477 cv
78.5264 89.127 78.4756 88.7715 78.4756 88.541 cv
78.4756 88.2676 78.2925 86.7734 78.2739 86.4805 cv
78.2559 86.1875 78.0908 84.1426 78.0908 83.9414 cv
78.0908 83.7402 77.8481 82.0879 77.8481 81.8125 cv
77.8481 81.7031 77.7485 81.3301 77.6255 80.918 cv
77.3408 79.9785 li
77.1792 79.332 li
77.1108 78.9727 li
77.0903 78.834 77.064 78.6621 77.1694 78.5488 cv
77.2832 78.4707 li
77.4858 78.3828 77.8081 78.4277 78.0166 78.457 cv
78.1821 78.5352 li
78.2915 78.6621 li
78.4497 78.9043 78.4907 79.1875 78.5796 79.4551 cv
78.8511 80.584 li
79.1157 81.6445 li
79.1157 81.6445 79.1299 81.6563 79.146 81.7363 cv
79.1626 81.8379 li
79.2017 82.1504 li
79.2935 83.043 li
79.4106 84.3145 li
79.4106 84.3145 79.5933 87.5898 79.6299 87.9004 cv
79.8345 88.9941 li
79.9438 89.6621 li
79.9688 89.9219 li
79.9893 90.3789 79.5498 90.6738 79.1665 90.8086 cv
78.9727 90.877 78.5659 90.8516 78.208 90.8164 cv
77.2847 90.7051 li
76.5083 90.625 76.1323 90.1797 75.6245 90.1309 cv
75.3774 90.1309 li
75.0786 90.1426 li
74.5278 90.1484 73.8604 89.873 73.3467 89.6914 cv
73.2349 89.6523 72.9814 89.6777 72.6792 89.7305 cv
72.2725 89.8047 li
71.9634 89.8457 li
71.7041 89.8457 70.9922 89.748 70.7603 89.0059 cv
70.6392 88.6191 70.8135 88.2012 71.0039 87.8633 cv
71.3052 87.377 li
71.4019 87.2285 71.4766 87.1094 71.5166 87.0176 cv
71.7002 86.5938 73.2661 83.7617 73.5967 83.168 cv
73.9268 82.5762 76.2285 79.0957 76.2285 79.0957 cv
76.6016 78.7383 76.8506 78.748 77.001 79.1055 cv
77.1255 79.4648 li
77.1509 79.5273 77.1445 79.5918 77.1343 79.6387 cv
77.0815 79.7852 li
76.9087 80.0742 li
76.7808 80.2598 76.6484 80.4141 76.6484 80.4141 cv
76.314 80.9219 li
76.0776 81.2949 li
75.979 81.4648 li
75.9414 81.4844 li
75.9414 81.4844 li
cp
f
131.713 88.1875 mo
131.682 88.2813 131.672 88.3066 131.631 88.4297 cv
131.607 88.4883 131.576 88.5566 131.531 88.6094 cv
131.465 88.6992 li
131.373 88.8145 li
131.104 89.084 130.646 88.8457 130.531 88.5273 cv
130.469 88.3613 130.373 88.0293 130.43 87.8418 cv
130.473 87.7383 li
130.697 87.4785 li
131.055 87.1094 131.248 87.0488 131.742 86.9473 cv
132.141 86.8789 li
132.277 86.9434 li
132.494 87.0781 li
132.652 87.1895 132.852 87.3711 132.92 87.6133 cv
133.035 88.0117 133.045 88.793 132.891 89.082 cv
132.709 89.4219 132.268 90.1855 131.934 90.3926 cv
131.854 90.4414 li
131.791 90.4863 li
131.73 90.5332 131.678 90.5938 131.678 90.7695 cv
131.678 90.9785 131.711 91.0586 131.736 91.0898 cv
131.873 91.1621 li
131.984 91.1699 li
132.199 91.1523 li
132.625 91.082 li
132.756 91.0371 li
132.932 90.9707 li
133.092 90.9258 133.291 90.9746 133.273 91.2559 cv
133.283 91.4082 li
133.305 91.5586 li
133.309 91.7207 133.211 91.8164 133.041 91.8926 cv
132.662 92.0645 132.367 92.3301 131.926 92.3496 cv
131.514 92.3691 131.156 92.3223 130.926 92.0625 cv
130.777 91.8965 130.684 91.7578 130.619 91.6992 cv
130.449 91.7695 li
130.043 91.9512 li
129.455 92.1973 129.645 92.1172 129.207 92.3008 cv
129.098 92.3418 li
129.01 92.3652 li
128.836 92.5059 li
128.725 92.5801 128.521 92.6621 128.354 92.4609 cv
128.23 92.3145 li
128.127 92.1719 li
127.871 91.7031 128.582 91.5195 128.854 91.3574 cv
129.24 91.125 129.711 90.9863 130.064 90.709 cv
130.318 90.5098 130.662 90.2559 130.898 90.0391 cv
131.549 89.4844 131.633 89.4805 131.879 88.584 cv
131.898 88.4727 li
131.904 88.3965 131.891 88.3496 131.863 88.3203 cv
131.713 88.1875 li
131.713 88.1875 li
cp
f
121.758 85.832 mo
121.654 85.8809 li
121.477 85.877 li
120.967 85.8438 li
119.992 85.7441 li
119.607 85.6855 118.324 85.2578 117.85 85.0762 cv
117.008 84.752 114.732 83.2754 114.189 82.4922 cv
114.064 82.3184 li
113.953 82.1387 li
113.738 81.7207 114.307 81.3145 114.684 81.3828 cv
114.938 81.4297 115.336 81.7559 115.486 81.9258 cv
115.908 82.4004 118.293 83.8398 118.848 84.0098 cv
119.688 84.2949 li
120.891 84.6875 121.766 84.6582 123.018 84.791 cv
123.529 84.8477 124.209 84.8828 124.43 84.9023 cv
124.639 84.9141 li
124.908 84.9512 li
125.064 84.9883 125.324 85.0996 125.256 85.3926 cv
125.232 85.5664 li
125.221 85.7305 li
125.18 85.9922 124.902 86.1055 124.674 86.1484 cv
124.447 86.1797 124.514 86.1719 124.365 86.1895 cv
124.668 86.6504 124.146 87.0879 123.801 87.1563 cv
123.115 87.293 122.467 87.6133 121.818 87.8652 cv
121.494 87.9922 121.217 88.1074 121.127 88.1738 cv
120.906 88.3398 119.523 89.2109 119.248 89.377 cv
118.834 89.6504 118.385 89.9902 117.926 90.1914 cv
117.506 90.373 116.977 90.5645 116.717 90.6035 cv
116.633 90.6172 116.584 90.6465 116.531 90.6934 cv
116.43 90.7871 li
116.287 90.9082 li
116.168 91.0039 li
116.037 91.0938 li
115.924 91.1543 115.801 91.166 115.625 91.1348 cv
115.398 91.0859 li
114.855 90.9355 115.027 90.457 115.309 90.1328 cv
115.418 90.0195 li
116.852 89.1426 li
117.053 89.1309 117.523 89.0879 117.682 88.9941 cv
117.902 88.8672 119.021 88.1133 119.352 87.9121 cv
120.16 87.416 121.438 86.8242 122.355 86.5293 cv
122.396 86.5156 122.418 86.5059 122.465 86.4453 cv
122.711 86.0781 li
122.346 85.9727 li
121.945 85.8906 li
121.805 85.8711 li
121.758 85.832 li
121.758 85.832 li
cp
f
120.691 89.8535 mo
121.211 89.5605 122.313 89.0996 122.57 88.9727 cv
122.736 88.8711 li
122.918 88.7441 li
123.191 88.5645 124.078 88.2793 124.414 88.2461 cv
124.844 88.2031 125.338 88.6855 125.008 89.1035 cv
124.445 89.8223 123.689 89.4063 122.879 89.9063 cv
122.639 90.0547 120.35 91.2871 120.148 91.3809 cv
119.947 91.4707 117.988 92.5176 117.914 92.5547 cv
117.648 92.666 li
117.533 92.7207 117.441 92.7793 117.402 92.8359 cv
117.313 92.9883 li
117.184 93.1855 li
116.846 93.6094 115.977 93.4395 115.838 92.9375 cv
115.762 92.6563 115.986 92.2051 116.275 92.1133 cv
116.338 92.1016 li
116.338 92.1016 120.176 90.1465 120.691 89.8535 cv
120.691 89.8535 li
cp
f
82.7466 88.1406 mo
82.583 88.2715 82.6909 88.1855 82.4595 88.3672 cv
82.313 88.4727 82.0991 88.5957 81.9165 88.4961 cv
81.6333 88.3418 81.3169 87.6328 81.6992 87.5332 cv
82.667 86.8418 li
82.918 86.3965 li
83.0591 86.1563 83.2251 85.8809 83.2988 85.7852 cv
83.73 85.1309 li
83.9136 84.8477 84.1147 84.5391 84.207 84.4375 cv
84.3042 84.2969 li
84.4063 84.1094 li
84.5195 83.916 li
84.5596 83.8574 84.6104 83.7969 84.6743 83.7539 cv
84.9531 83.5605 li
85.3911 83.3105 85.855 83.707 85.6821 84.1836 cv
85.4209 84.7461 li
85.2852 85.0625 li
85.2334 85.25 li
85.2334 85.498 84.9487 86.498 84.896 86.6563 cv
84.7368 87.2559 li
85.708 86.5859 li
85.708 86.5859 85.8496 86.4531 86.0596 86.3086 cv
86.2627 86.1699 86.5474 86.0078 86.8179 85.9863 cv
87.2539 85.9297 li
88.0532 85.8418 88.5737 86.1309 88.6245 87.0586 cv
88.6616 87.7285 88.6934 88.2539 88.7007 88.6328 cv
88.6885 89.1035 li
88.6768 89.2188 88.6548 89.3359 88.5938 89.4141 cv
88.3447 89.7891 88.1416 90.0723 87.6074 90.0391 cv
87.1343 90.0078 86.5225 90.0215 86.1685 89.6445 cv
85.5459 88.9824 86.0293 88.5547 86.7188 88.5859 cv
87.0015 88.6055 li
87.2129 88.6055 li
87.3794 88.584 87.4707 88.5 87.4878 88.1406 cv
87.4985 87.9141 87.5195 87.3867 87.4194 87.1758 cv
87.1836 87.1914 86.3501 87.5059 86.0283 87.7207 cv
85.7168 87.9277 84.8452 88.9336 84.7305 89.2617 cv
84.6025 89.6289 84.0171 91.1289 83.9072 91.457 cv
83.7974 91.7871 83.3516 93.4082 83.1865 93.8301 cv
83.0781 94.1074 82.4985 95.0859 82.0493 94.8613 cv
81.6753 94.6738 81.5376 94.1465 81.9023 93.0703 cv
82.2661 91.9961 82.7944 90.2285 82.813 90.1367 cv
82.9063 89.7461 83.1714 88.8281 83.2139 88.4023 cv
83.3135 87.7617 li
82.7466 88.1406 li
82.7466 88.1406 li
cp
f
90.9429 87.2109 mo
91.0483 87.1172 li
91.1255 87.082 li
91.2285 87.0664 li
91.3477 87.0898 li
91.4399 87.1367 li
91.6748 87.2617 li
92.1519 87.4824 92.0713 88.1504 91.6167 88.3047 cv
91.397 88.3555 li
91.0024 88.4121 90.5864 88.3691 90.5864 87.8359 cv
90.5864 87.6426 90.7104 87.4648 90.8047 87.3535 cv
90.9429 87.2109 li
90.9429 87.2109 li
cp
f
129.084 84.7793 mo
129.201 84.6914 129.363 84.5996 129.363 84.5996 cv
130.02 84.7383 li
130.309 84.8125 li
130.641 84.9063 132.055 85.0703 132.348 85.0469 cv
132.871 85.0137 134.063 84.9688 134.621 84.7969 cv
134.912 84.7051 li
135.008 84.6777 135.105 84.6621 135.236 84.6621 cv
135.357 84.6816 li
135.463 84.7422 li
135.527 84.8359 li
135.551 84.9316 li
135.539 85.0957 li
135.506 85.2168 li
135.465 85.3672 135.25 85.7559 135.104 85.9023 cv
135 86.0176 li
134.857 86.1621 li
134.674 86.3281 134.465 86.3887 134.262 86.2324 cv
134.164 86.1504 li
134.082 86.1504 li
133.648 86.2344 li
133.436 86.2715 li
133.252 86.2793 li
133.197 86.2773 li
133.076 86.2813 li
132.787 86.2949 132.412 86.3535 132.127 86.2969 cv
132.051 86.2813 131.699 86.2676 131.316 86.2559 cv
130.471 86.2246 li
130.271 86.2051 129.328 85.9023 129.174 85.791 cv
128.893 85.5898 128.611 85.2539 128.908 84.9336 cv
129.084 84.7793 li
129.084 84.7793 li
cp
f
133.385 80.0488 mo
133.459 80.0195 li
133.539 79.9844 li
133.771 80.043 li
134.242 80.1875 134.348 80.4551 134.26 80.9316 cv
134.24 81.043 134.215 81.1289 134.174 81.2168 cv
134.023 81.4922 li
133.938 81.6406 133.732 82.6465 133.672 82.8555 cv
133.617 83.041 133.508 83.2051 133.398 83.3438 cv
133.094 83.6953 li
132.783 84.1289 li
132.553 84.457 132.434 84.7441 131.965 84.6172 cv
131.805 84.5723 131.641 84.4922 131.537 84.418 cv
131.473 84.3555 li
131.436 84.2754 li
131.426 84.1973 li
131.436 84.125 li
131.455 84.041 131.502 83.9551 131.547 83.8828 cv
131.693 83.6699 li
131.783 83.5254 li
131.861 83.3398 132.117 82.8945 132.229 82.6855 cv
132.332 82.4922 132.619 81.7051 132.695 81.4961 cv
132.73 81.3105 li
132.779 80.8203 132.74 81.2168 132.791 80.7129 cv
132.84 80.457 li
132.898 80.2813 133.082 80.1797 133.203 80.125 cv
133.385 80.0488 li
133.385 80.0488 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 15.0%%AI8_CreatorVersion: 15.0.2%%For: (Tobias Aschenbrenner) ()%%Title: (MPP_logo_cmyk.eps)%%CreationDate: 09.10.13 14:17%%Canvassize: 16383%AI9_DataStream%Gb!R&pO4U(dO7(.^cR'`*&2OFcC!N0QIBl_0uc,p(bjlrc9?a5VjV1b(RQ!XPtL=B2r.1Ap34iR[=9,_[6gilW[(RpS_e8_1gfRn%p[-PH=-AH:-<3K-C6Fk3$mUm0n(,g"h4QN+e'JP%d*,+JbtAjWeXs$KZZk,;<GUE.U"*h!\gtn>hj%gEVUfFfrfu8V<2uRIFFI#8%.b>WIEi\e3kp9n$.fiIIT!j.6NS!3_YErF*-)oTVJCQ%$e7H,[?6d_2G6I@lX,Wb'g*paCp:Bue*d?Roq*_uif6TT32ShX*a;'_Q%%Re5@Pl3OjG?X6SCBTjHB<D!6^q/m>g&N;H-1[ZO.nS2jnC^7tX50`HC6TpBUh=h%WWAa[G?0k8''TU]AL"0Y:r;8qF%KF0X'Y\T%9(K?>K>#nfQ]Y&=:@Gjp+#7e<dj,5an]BH[UXltlep@NiMOBHHO'8`p"p<9Lj[S@&NIs(GIU[kd9'<n=,88mJr:K9Vk"=(]4ckL[%XScAi+:Y#sPBO'RdCQ'^0&%kLT-Ti#2+9=Cpgd)H,GcD3gIb@%9rCqCrPZ.<-"r'X@$4)B-.@%cWP@&S.h"T4Br=mZFf3YeOqrMn%&S*KPJ"-J!W01$PHF5(eSa]\=aDFG1Z:F*1_8QXf[q;I381#ifP2L0h<46QFMdiMa+aoei61!2%S_X4V#95(QJ#WjJL&mpT%A/=U%LT2j%<E4:DWpitfnL;[2Y@SPIatVb?@6c9ZJ5V,!0(Uu<)p6ekPd,(5)Ya]:C`?!_2u&&(K`[Jg'VK'3!)Eq*-rVb9drH=l./\e^%jYGCQN"KF8#CFCe:m4+FeO1<>TbNFl5+r[LM2r@C_2."_b.rhk'?89GJTYBpn-Qj;7.:L7+e>iK(_M/4\D])+@8,#q;A8q_;D9`u%KJMXE_"dg-k"'!X,#S_2YpPJNYt*R]2s_P=kB"R7i'/Unj+C-@$"jf>NR)R`i%L=HnaRJdWaK*L++1pY(`gmdHm7\QJPRZtj+C-t%7H>)W/+sK:EZP5)3WJS/6i<&2:^ZI,l%1-MliD1G$i@o/q0ZTWrX[/ekW!4lkb'ho)P=nAi"J^+J&D&C-<M'JTaZl4Oli1Yf+([g%HU.#]4Nr))EuSMIS:\Dhf*.dFUcW%@<6'HMDLaa>&O&+k*D5kYZ$!./cg`)dN[kdR)<VuRK.W>P5NH0q[:>aqR]fb9AT9cA]T:jm%q;13tW9s-e?g6u0F"4fn!#T]J6>`&-**8.Rmha`tR^+KlJ++8NU<NTc$9iJ0i]kdqnB_&krt9$O7u7$Yrt3pWs1*XLT4Qu"bMmqS%lsDr;:Y`_[DgNFQ]79?X,$c`D`;PVo8gXE&rl'AMo+0qCbT2)j]]*l/$icC[.9]$db=*0.MG/0'BU6ePh3JCn$bo=<9>b\Rl9:Qb%E\W]2ms0hV/])^7je\f*DW<ZULXPTLfd`=?6<c!VW4ZcrUb+*m]e[Gb*jUP!8-P::C?U2YV9q=Bes9;a#CHMj>";&0Uk0bP-`#(9%)-`CQi$fKFQ8Am)Qppo_KQ6kAB!%1V;A&3scD5X2-m5\":;MQM&SiOpeWC?WTJ65T"goYGj$kIoKP0C%V[knt1l>QVT>K5P8^]iN%3!;%Z6JBf^OOtP<Oe*2\,*[^md#W))/CD0@S4Pb'$MghA'(eX`WP^N$D87-kn6ORQ"SdZ><.T#k`<Dh5D'f#d7k\^HO*Spsi.(MT%?_UMn1saXBC&;J;-aj8^k=IhmVP>Y/];-di8DhFqJQiu[@S^QO_:!jG!.tmL2XRc>VmB)P.0B^O#1ruq;//A>-KcgFicC%Fjt/")%8m4bCj<gN5j\IWUSadW[!N]Sho7hZi/4aVQ%18dK#'_9q'J#H0$JL.4F;t2]C')XOT.5d$f*$+'_QYru+(bm/!3J>2e+%Jt_,r/S%AK3csE2<E8W^D3_F,AWHCmDecZl\=.UnZTocBPF%25TS7QH5@SEZ`LYXrL=hO&X"3VV@&aX<kGqWI,l\c/\lO).s1';_BPkQ)uj6%jW(44e2EIl%k:p8lm^662RK5@m6F7^7NS@m9B$TuGacpBo?0IZo<<u?m]9o8J=mmG$:H?Z9t$W*8(r\$&r0Bi7L:Rp?Udd*WQWk^%N3^9j.7:rngjVsIomq=,e^@To1BNe2T&cpVB1QLl!fZ2WSF:Jq1\hGFGrGD.VJV_XK:7TDSM:</+7tPu+C@T1&\V*)4IW`=9iS"#%/Ig8:V*Q1"L33K@UPsenpl%dP.cIU%9uD+(EY$3MoQDMgj1R4?<G7T):?R4-,#<"'or#T1U%C`e%&6-\J@Lbkkt!7X$j.?U`,-),%HcO^2/sC)e[Ke&$4-DhS1bc(DQo/1hAcunZlQ#0+kD$'Di#[b9*t=6rY9oJ8cl/O!`"%5P8ZcE<=7/@=<6d0X9DU03S9N^B,`pkZ%*[NT4(ZK3b4[<SfKeUgB'%PGb(<SkKDa%XKS^)!lj\+I-]%Xt-qVZT"ji@e:fh>TmpRu.n;l8Xon&$rCMHjXF%EtDbWME\L'$;Gr%eIC#=N5GAEL@m-d/oMn^ci`<VMm^Zu5qfSM)nt9iTsXum9rU`rXikcN3Na%+hEX)ulBLG<-ERO5;5fJIE9g2prD8E)EW\EU"+QJ0%3c6;AL]=!Lmu_AapXY(e"9+,Q$b@Up7+>SN4@X2HJ#_s"k6^*#UKYHs3.In[)6)cu`kL\0U"3NN@:]X5l]69^2M[4!*3O\9kL;F=%j'$Q;"q1)/Z+S67^+DDZ:L_la\!`ln?e\s!F);<H5q])spV'JAJaLV@PD4AljToU/#pimq4Ts95ZK,[uducoMSEA,l/:>`58*)Xo%LL?sO#D-t+A8f3#,Z>:d*nPZ3%5:3Yae:-5]PJ;q8V`\rRJ+Nq3[IpC/ml.'kB50*0dO"ds3>_WpH*^kI3&bB1.hUuS&Kam8*Z*T%FW]*<bf'4c0$+JaUE+tM5p%5%;7bqi/qCCWSjuQh/LH.Lb[NnbF,^X;*q`A][m&Ne>Ye2p;hh]=[/hB!*G?)d%-EC\,AR7pI#F:2%>$q(\53;^^[3kYX'OF6Y^`#Q]G'uN$MHl#<_ggnC;NJ>Hj^]*S6#NfucU'Y-au_X+[24i33DCuBm18Tg<CY0$7C69\&!5M\pTT+j%,&[ur!8E''fGuKf"&P(X'7+\".H?"B>9ugAerPE2__:3]HZmssSI;)Io4lc1RiA^V(uLTeNa9q"Wo2U>1jm<A7V@;4$W[ehK@*d&%YOYiAQdN*lq8OI]NkeQ**k0OY.Umh?6G<)]M]qrgfFu5'5s3ON7R#umE"4<5.%D4rgW?_rglhIgl7n5Kjib;#g-u'PolVnaW6D%h%iQT1h_6o<2WUs^85WdYq3R.i:(MVbDV/fYMCJ@arc&io8)3c)UpUDh``\?hD03K3[3k.r3d\a=WN5!!D^:CZs@%KkQahmcI]&rB&%$sV^N@LK9GKtUntD[SVk1=@goS+g\P:D0H0X`(aGo48]*@JYgh?UhSe169_ifGbd'.IjZPXH:XUM\#q29#7WhfV.sFehN2@j%#f-%#,h\C`'ambkO;4%`cZhgJg3_<+l/85>]un'^k`;]7@GHu84fVE6d[Ze"%Z/S'Ch7$IHYh3D]H6Ta55c6E.D'oW=3PPALb]<!93j<%p_4r^n/#71531Q7eq(mbQ@pWA.;Aru#tlIdTsWp'iE1*DJQmDlY`e5*>DNg^L&?XA@?_+F_7nkm*'<l1a2YLfEYFJfO_[q)!/,,H%Wdd%*:c=Xp.YTi)]f?6rh=]pQCrA;.oZ@^mkau6ii6P7i)A5Lc;<k^"&2W/be3Ve5<h/Kdp?-58rLa%#lNOC,j:?J-k+16%11*8U%7WDaSI>KPA3PSGJ`#3&^5mpaG[8bQIT^c_u'e6VL''XM;q$OaRpoVp>K&-AXhbQH'Zl6&jI-,gS:X3ahT/LSGe)*sA/Q01:K^J'C%0n!LoSMkr<URb0GVnL]0CF/-7YH=-pntK'^P%)OsQTqlmD]q,j>cE2MVcL!M1i#hVP<D/1WV:/\9"hnLfikp`l-tmkOAr)Aq;9#r%Mm^#pkKBufd+s%;2&hNYF8>O->Nu+LX7c><+AYYT^M8a/]9]NT?^&5TSbCtO:)fI1V3@]ohS.WWEj+/sFXj#sqHq@J8qRc7Yl5H<%=<Z1Qd=/4HD%e\Q.^Y#@YG_N>UDP"OH6:7GK&CFrBfk4"Dns$a1uJ1D"bXVMKA/Sn_U4-6EkCqlrCC8%=q.Bfo60Lcoh(ubDg#n*%?Pfd^XTb!hM`Nnq'q-LE,[5bB7mC9W+L&>&VtXQO'.FsYbBCShqL;$XKhA+;J+$@j+8'AF2[A^F>J1g))qH*cli-m0Bf5230:1>p%aD%L"X&g7Jo=rC0I7:OJFEsoG?O6g5iTN*'pjqLTYB=Wos7D+D,XRJKh>8VL$Kk0rq@aJ'U:=N9NgA]m=0V3$*!GU+h5GH0\V"M[%?VUAA\WW>p47<dW=m<R_/0o;WQ*4@HPK9<H^Y4>FXGiB+8P&2!egL9:QJgr3%MJ\1R$>8_S,Cnd?iCV`^QPme4A+Hn8BFp7^-53*%nZD-/7#jmfjD#m,,LW1]V'qK]\HiZbjXH>9A=6:G:1"WB8+?SWDPHTMhJ"ie]'XUVgDYg$L\5Q26b'irck<+tQ7Uu>A4^Iss'fBa%O:N2V3(&uR%Rb['.E?q%q1N,J.\,(jFT0;;f11V:Xk+Ki0gGWZaqB^omrcE,R/cn^UIbeD_afo0aT>n7oMb8N^FG3b<kqJmLe@>(%metsR:NQ>,V\4[!=05PL-&@VCJ34_OIoSQ&b"DhsJTh&4OSI^n_uCts<o#O]&#*Vr@#&:pfN'CkoPUT+o$[\/1\=PAIk3*<0GCu$%9B(GG@UfqjM_W^!N9:%SZhm]JL.1ED25II,Zgp=B%=AT_dm5(Wr"X-pKFb]pXb26\AE'iRLg33b:>#6,&nDQU?L%0m^&6bX.WH1$%bg:$'5ARHTa4G,b_l3(>EGQWlJ!(1oO9P[/M^9^4]OUEErTes&#4+85ec0!T5<=ntek`2IUKKVWQ"0BZr3,s4mpdK/MPOZ-;=:Md%C&HSe4%$`3,$nG9U8e`>D`pcq))slJk&',4rn!+1IfTG"r-RA#S4p0eY%dbpBJ^g=qYS<@.pUZdXJ0IpJ(]oCp&R'RN5bJI2O]-q%fB?A3QMqCrZ]iiq'1-#]4a85ZISZ8nVk%##f(lA4]Vte@QRoi$H^0qDUY]KR<ap`ZAY"&Nh&K!-<grJAQ1nJQ[+0nM4)NbL/_-i<%.hjJX^FEO1Rd;sAHpa=:Km7sHq:>=js)7He$!-e3ZX+qfj#l;S]+Uoii_hgSeXO7Y>2u?"L&r'2mJL\!>DLeo;].)Ok,9!+P2[#^%([Pl8bX][dDSFSHBiR3t`S+PXVpQ1J6V8'Yh0,RapJIdYM%<;'16SMK)Zh(fDjj!BC&j#&GUJ_thW>t=2W(K6noUd^NDeA.h3eO1%=^fjE<QI^*b/sBQNO.*LZ7jM?dhPT^_M]nc%_(*rQ4slI=SAT;4R+T^Pmm/pf;UU=m0ZuSe\=\"p"*a+@DRM)Fp9/$lbuW-/+$Mq%2"UChVuVl4[4=h=5G6BF:Ts`G9:f-k?_[NA=to4'o<Nr2SiTBLm`0hrP%WbE7@gND;O(RJd&9G4eB#M!:#]3]#]fCD77QD,h,1l;%,CEQck'tI`qgZ1Ac1d"mFVc;*=ACNC#o+`!Uu74.<]6j6+Y]B9P>BbF]:S\h?"qg#^4k-T[sGbd?^36J;6"-tZn&>_gR-kCA*UHA%b51acYX&P/btf.9%T2$GnJBnrObR&a?,6S=6OO]FNJ8tYA3HqtJ[c9Z#_U<c)m*0(jR''R@jT%_UrHrW;K[XQn9i<mU$S2RFG\s0%7hja%ort.2>"$IQ@>td7P)-':R"cL,/1p7^3j>E<X/9*5(p:6ELo_=_e^D3ZN]N.JH3Od%QBaeJLN`rAAs`HG_-cuM>%t2aR3p<m%QL*"MJTUtWX%K_Tr?*VY(;g>i>t`XU2#o`:`6AHM`SZ>_&(/<aX"Dg3UPVqIWnskQ8TN[goP2d]kX5nf9i/HKc.C[abOnVS!.Ons%kI#'*agfd+F[B,/2Ik2=QG:KiQ=7e&=it5a9eC3jbdhlNn4mk;,[cYBai0Q]ppu'd<04p/X/]68<h8=m[:7=EC5j:s(fZl_`)f!a%"e8Ep17P,>n[QAOa3OrfE`na)Jb<edN;Q\NbTFb2iNeenh5;OjVu`LsL/E1E=7/P7BNeAs]CW>"Q*Q;*!.O))b!1ji2`n05",'Ik%;^O.D_*a?JDiQj+TaH;F0@C^mk?]VIQW$<$8?>/%U.2h!9D4/h'X)&Vf4fZar-!t$E4&P]'<;ahao5#9b'/I:J/W:mPI:CiFkX&5%m5T/t)QU!cC[JOe`(K0P><U;B&UiKCgeR28Xu49o][=W2n_0Z^cFM53Y54FFBXW4/[>m&;W05]7^H]C9R'.VMC<b_kq*L"@V:T8R%AEPMIg<'6f^%7G`X;ID:XK3h5Utm]r>H*$V\)-D0=sSE$UcK91q+`KhH0o^[\/E@AMscmsY;D_#fAjm$f2mdSH+1Bs8nfjOe#X$-%;JX.Ho':6Q^"CKBgY$22lfp"IC;9`V.*s!a6F@Ol)l*J8QfnLQ-<V-J>^VZ^Z'+O,VG:2h8`G\TSLmhK.G=6X2"fdY*gm\_!c;Iu%kijIKLop+t-hs21U*#Y%1?m3R2.R7gQ!RuE6G";p(lU$;"\ZHX\u7pVR^MmI)k%$]oMPqi_Zgs0GjV\<,J9/JAhVp;H1>*VrZ\P*%G3?!h#h:%M_d]cR0ETAprq2\UY9[ns]k&pK+1ld<FWQ/HTS:L.Y.[0\T5KWZmqqjQNSQt*eW*qD5tiPriu*l:378Y_KosA'm9gs0%X9\'!'%1I=9;N<0+J9_<AKjr#]kCH$U@$)bd8=ha5s9FFO[RDH/!F!*ciLo4hS@nX2SXj4r6os8CT-u-C&94+!-La-+LQRh*`nSG%C7mn8Q##S;]5W.95T,XR$Cps-k;<Y@:nuIarY;bE"LXn)O'(a2?5@2mO>>X,[2C8eYY;Z+rECsHK<a]nj3DWd=RK\G(d%2=ks3Cq%G(Pqm'PXm]GOu.Is0Y'pScA2h?!+X<VbSee!NW0Qk[Y^Wp'"bf)-rQoqf]"VZ&GBP/$K740W^OQ>6dbs"=mb_<&'7;Q=c5,l]ca)%7g5V*I'%PWn'+._CpuK/)Wcug"=Woi&jh?3`VpUUR(2r0d?lGfk)2Hpl::E>;ldYE#DWSlHF$B/FF]`%NOZ<*8\mk1.9))SMgG#Y%DOSt,7K%!j(Ni^*TRs=1Z?X<_^Sj[bh$t4s?K).B#GfEkDDt!T<`3T:\#%hpYi>'DCO"H-N-4NPMpX:/$d5k"m.\Mu"O!XmnJp;>%6jUtW+%SML+6=iX)N>YXJDK%><G-fG[$])/_Fa6]qi#JtZ?1Da4G9Xu^=/kQ;fkO;Dqde;:k^AH4s/[g0>u$"F=OI:=D>+O;\\AI%3-B2\,BnhBOR97P#Xa1I1bN$/.C@<E=O7/.'d2:/@,[,%1#1aZ8adBoiEiKrM[<RDfN/\6W$Lt]I0B2f$S<!$>4fO$_\&G?M+MbV%4-JZr,,#^KV8af@D'\O5?@QoBL8O'ZX$fgu8$$3%jYe$iaoF""/%71Amk<06?=Tm;"-b%I<)Bmt=`4t+V"kl=af(R=/Ou%W0P7LZ%fl+PhdZYeMA9"BTflEj;aa0-T&A_?3B;b@D?aV+&qs&h8npP&d;LRNtO4M'hl`W0Qa*kpqQ*u1ig&<S]G,<<Oo$r3_E3k\>feYl"%bc63t^n2on!#HfoEr#=DhO^P[CVXK-lI(FdCbBR2^#Z!EdSXUjo:r5#2apsJ[A#\mIQ?<LK2m'cU:4EUZZeTWVpEpE`Ad$n_g/75%Xe-IQW<IEg4ggfL4%lAJ9,jL=WJ0A:4-fW?P=Nr;g!nHrb'>IXFBqQl91Ol(>JHT(h<V&W_Cr$lFH6]J`D:@BjEX,K[T(G[283t[%QCl>Po=$3_\kf0YVck7+mW:A<?h0WYnc%*jh;,;Yf7%AUX]t1me@E>ZMRV]:Mt21C]db\tbpMaFSJc<YKOQpN:.IrgXrd=8bLWta%>,l2\@8n#X8u^%`X.ELnIl:14^$RihD*]/1Q8sS9gB<Z94<;Fr]fYi+*DdqSLX]$]bS?DRNN&YU:c?q5G*L89h+.$WV]ib!hA#c>%%_J:WCA4`LhlmTdS9Bo\Fm2;/VQ\OP?h<lbQe,B.;W>Wc\'@?LE@\(2>!GY!4/lA,,&!lXlg28%f'-]-iT]CXf-qf"[Bok6IkS7,%^ePu2gXEB%GGcB5\_H%;f2?hKl)U:PdS&M#J$%%6X;(*rK0!:AX_MVpSJou+=1?5]Y>aY=G,sHS9''pM,d>asnfMYEWNMfsFXi[6%Wk4sqc77OBM6>!OZ"c5$d`tVN-?u?Jmn9KrnH*d3[JK$-mV@N!H9*uT4/KWp=]IOb\I[CC@EFk!G?4/n&&kSJk]EMjQ*^duQb?W6%m^0[>T1JjjFZVI@V:Fh7:90pU9>1o(oXM7frGDHP\Xb(qDR\Hdp3&Hte(m`p.Gk>RW\*!WXYqem"$<&'=7eo7f<%$5#J[]73]3e`%\ts>"FF*O(Q!5%@DPq"r6FT$4la)ASO3>=6GCE[rTd-+6:1`+KQL6u\SjbHCO@XTY[PD.PG-Pte]2)d]V4)7NVh]W>&$46Lja#`S%9g+uZFZUm3-B@bB><;]YAHm@i2t^Z$hGgVm:/;e9h9\n1l%A>H3tj_Wm;>KV5Q(Kemdrbm4=lgX;h:KGm+(jc:<C.n]0/A6/tTsA%/P9*mUE/.SiUZW[ldOj.:o?^u>Wo666cXL1?[HOCFa>>3?JaHIl*RhiHct[gBW$]oJ#p,IMoX1>s%H]<DMN=[Db(D(kG=hH$'.e$%?e.GCd`7b@!^AkT5D=:7Wbp%rLNRng4dQY:Zr>m;s'!+#VlkB]p4>?mFH2]c=f3q<JoB$ffo%-k40;3LG2,j/\l_V-FFM_k"Pm\d%3^$W<s*cM)DimfH4+9o1d^mQ):-\,7?`3.t];[aCBd0ZqhoL.N!HBHONph.ae)c$UGeD6X9qg_tDlN@VMk+b2QSNHV6mh*.qT%CW%&sGrQbY$j0.gg&bldkSHFIMOae4<B;hsBco:A7]$:/f=/aTq2Ik%3XUei2/EXnC*iG.MsEGj&/hKZ8L*>#`1,]?dAYnYst68gu:8%(Z/.],:c!b.J<A7*F)fQ+H'i!YD#.,&8!o%LHMEa7;;.bK[9PFo'O#1\>:\IBto25h38Dq2RTceH0Ohk^n=I:l%%q#kpZ5Z$EIHq%:9&YR@8EMko>5.dpXHTZmP<5deT<::p0C_1fK,H3H`B`*WUFZme$YE.f#pk3AC(-!eZO":R9IY/hLu/0pSFqbjit$-LXPW/43oA,%s86!qD3PB9[83XRC%EM7ko]0KqKC9\e>:g2.6[TSbCnBZ\#%-g<Aj.-QLn]Mfca.`3b0ep`</9aH"C<jT9Z15V_?Nip?Z9Lm-2'.%n7uc'P[`1/I/Ktn6Ya@ga>\SYAqQ`@O3NU5[GGa;`K]e)C2RIPg/R[^PF:>$XQaUdQ/19M^o)Y'Vt:n,2/W@hn5F2_Sk,5+jo&95%o7s0MeZUdfBjl;WN-Te=U2@:#?S@_R>MWeR?5r4t[,@C<mVCQN>5FaF.Kqo)9f]nPlcg0e(RsOrFY8T]V6qk*8`dg4[TY(qk73eK%[IZ;Wp7-"#2CeDJoK98$;/:RZ$f.AsG2pl5S%0cE3CeJ<lQ>E[&E3Jok4l%,\bc0G!a1(Q-0"9mS9fj2B1eRr5@*EscH22=mmFRs%;uL2\]p<C:GH0J(LNbdZIa.[L-!JOW<[qHmrsJ"T(rdrrUInXdcOl`9/DD5Zs#N5'm<74JXt4^d:/t)feuj2pEOa.Qh._,T4#J[7%Wh%H]dVcObT4^/'g*u-lOA:Wk8N_e*i(g\L46e,Kh0KA)V1a"aI>?0E_/jjD4!eD,FB].Ae2mSO*Sr6t,GF0mUqn7#$6/<7^0."5%aft3t2ob#2dH*X1Y`c&l>1DsNj-<h.`H!(QW6Kg*GU#VJV-EpBIeqi*JT62$Cn'..-sS`Ch%d[NB.i;)o5Vh5L"R.k6IZe&e+6HN%RQ(sIE>tg^/O0h_q=?180L>I1H9+bb?oidaI50<hM1\S94NB3/`;A<HAAP.6b>[tQ2U+E8f1"<4pVl>eiObghHKad)*/4o)5^B,h%AfmG9(/bBSIP-Z:&J,F'GR,_GI671#/#EV#P<X^H2l43$UmrVP-tQ!gr*]/]KtsAI]ctjR@M#)ZYjkS_4E,\G.<g/==8%X#q)B$n%TRch_2YPOkq0Vr=08Uj5*g&,JM+m#)nu2-bYs'/dlI(d4$>5+DN3=ZX65%9*_9BW7duNQAQ`lL7_`:A9PG`;-:d1?9T_AcS#I/"0%Q*VqDd@JP*?t+CM:U\e$H>YKT:C#2/8b7f20XFW.@I+7o3%0,Acb_6pb-4lkPNde\_[musSUN9Hd@b7Tm7R+S^/ZThmbh*%N_dI;%2W]S/(dgrlI=q,"D0\0gB_YFdc-C46(Y7<V1u:7k8u0ASOZTRG**"]!5F/*Kp[`V$J.dF>jl7A],9.]Q?p<I.R.].t,*.kC.cr'D%R&=mT9u^)s?03!m31Ps,9jhHah9a/.Rh@Q`GMUC.^301EI)d(Fd&Q]iquiWIKV8#_k47bLNnAYJ)+Q"WDTe0ZQ*TuMZV<BH</eVJ%9IP9Bj=uJHcPpDB?5_s@.^M96;50Y9JD!gKB$sm,HP\HYP@$UVQohoN1%1??hgJGoBm$.m>dW],[29e3FZ2uK"knoAMp\*O*M6<-%X4"&9@aFN/Na/!?gPoW)\^lHS['9tVZ;ZC3[Jhp'N=pKq"=[pZf%pp,b-C*G9KFh!dh01>S\,f^K@'42-IT,c*anSt1H<1G)e/e3%N`DZ'-e"G^qbt*6C5U<[d#E;cb$_jbC"_+jgYDPr`$dOZXrCu7D_(Fg';LpjU('aM(>7\eR,5ilcZ)snY9-,cOP`*BD.Afr?>SMC%]o#"rTFFrK]<FB')_&fq"$=k1+9VJ1RaA(iKftZQ@3"B_OI:LR9r-=-eUtcEW&*)n9+7]C;`8e9+abi7@UY(,H4':J>XT3E:`1M^%"sO,\Dq@e-fJEn?p(WWW]&,GOq$pG&]o?o_[L;X7l'<[fP%]rH1(^Lm9TaA5f`[p3HUJ3?9(>"4">r;"bX8k-)Ff+-/W`2D5-r/m%nI7n/K2QVKXoRs_]'3F>H]o$A<:^(BM_>()a4FOa$Q:*)bKrX!A1@;!<bj^YhoiEso>R<6\G`<fJamkI'\BdP([DM"abe'EF8m9'%%#OUq`/7gZ6,]M"5WlTL=@4]\&$`bT4Nk+!B8M-*H^Au5P;Y,+Us?&89uVsN7)fkRp*9LJrfF4#7^8T5A.0.\$3UbIaauugOls^m%PC2buRo^CrTgMJk$#lh!p9ukRGQZRs53_1/2>2Ru3`V!P7Ru]*e$T/8Q0>L55,*K,_W\nV5XOHfqn@;L3%%K,7iK%;o]F;1cY#kN%S!WB(O8/X3@\ba756pS.TjhVoK^ghJk+s%<"S>p8@;>:^W^3L4UOnsi/E-;R<t11u?8aIg(WPETb/s#Q^\Wj+N>D>;j]BU*pOiPn%da=TQjW/2+!?gma6(bk15l_J%p_4aA`(getW4EOE(9$7nF9D.HoYR``!*(sJHCg]A[UR@f!eJUG%3Dj[l9_6QfB4CH:Pbe"3W0Ta%P2b];Lj0Xkk/:IKf1V'I.qpP\n\p[5Y\<*;A+;6g$hM)5K(o$E\$J%.2M$57[%4%MN(U<_`bK-H"u_;TRZB@m*CG[l]r,_>(DcjQ%b3OtjG8OQk6Q5Rl>pHBh^rs(K'5rpbPa&AX8t:=.KZ=(PP%_dVd2.0CNPJS(QuUTZ1GZb/\@rqeU;=JRZZ7H%5"_Q3V?/"]Sqn5,%#Dk8qPXGnfPTVT\NkP-p,CXV6CVToA6R\!)CaY5OM/J$=:L9#*4pGM\$[(aN'5oJ)F"Za9C^!Mb;Uh!DgH("KS84mE@Mc!$peh-b%B@24-Mnn=G7%?&7"nH=[FRM5eATiL`$<aM^8)D<5N=?Z/M7@$g.dlPV+>MoXrLKF$Zo9#CPbteL4k(/q@0X.RC>+HOimj;h46%B5%^fDG13caD3?or?=*[Lk&R(ooR@b%V6'I(537.K[rq6aXBl7drg1Vg&g*oHYZ8_Ee3iMRG2CHT$`,`P7HpHcAE,R+X9NG.4-F"0uM%PL*d(WM>;`1"+ABg4s9**0#AuLgh#=W"[Lo%;nZGeV;J_0L3Lr;p3'o_['PX1(S$"rRu4%IRl+9j:G^M+EH)orr.Gc;slB!:a*2$%+7>.e;C2G\AD$;hE>D$NFSk+r['?<+G:6d>D+@&1U1CBm@Rfu`-K9b[@4nbC=IDIeVh2s5*>uEu5>E#LP/%[$\E2Z1($)/>gXeC-%5.0H53>!X1*9s?U7&_L&j;O.j!GC$^j57TMn->\C>$RXYbZc5P^c.-t?j`@N,N`R9h&C$D!#*D6O=8jB;mXB/)#c=I![lmP3*Y1X%65KGk2sBb5gPa,d!tRk!Pet>Trl)k=`>8UhQc03B/uJO\aNeT3BXZ^9ai@0:Wq',ZIf1^\m?t)so#8U_M.Y*\dZ_eH>DgXt'/G<^%b+TIZ;>"SKM/N\;-\j<8K?h^W*&!(BkVOE7:,k6r<XrDW#+_,53)0rhF9Z#=[bstBFO:tJ@^b2S3HWXdFP^iMd<"NG1[%YnNLrQS%SO!LN4Gb&hkR9KlbA]I`h?1k3Bl?aOJFC2]ZKo@`YeFV?'I2%!O;`4[qkt6HSDu&MU-Ff*nmU1_U=]6A`ea8Yc4+o^4FE4YY36<L%NBek_=6@i7ks&nEEOhg,n063="mthK1cFP;<lk(63?p76k@0Lu+1W;BkYKT?U52^Kbf<#3WsFsD?9<GbUq%XZc!q'cT>lg2'')i7%d76LLZ\WT<UbpBRS7jA!_2TJ=,"&u7p'iVCeBPd>[pb>L"ShkUlo&t(\:6c_Ccj@b:pO='UEH8YOq8tu0ZZe&#]Oh>%';KZYVogP%QHt5WU#H*@O7?c3Mt/YP64uB%Znh;220^;H;bR;apnCY'LC0P;$rVq<oQnA"+b;Ffi".HqN&OG9"(Wj+:Nqb[RMN'ZKWMO_H!jZk%O?#$`*oH#(:`1VmH$g[V.km$&;%-W^Vl&!2P@4<coRJae4&KYK:X5KOnppOGH$k7i^rOd]$ToRbk.D4ea6/@g%UoWg+sO\)!=:Z(%nY/5<<VW0]d"<>5Q@NB^$fAW7JRS`0Dhb$S3_j2A^b<E.dW<clAj6aGSr%%%meUG-r>@uj@ZQj/(Ek@s)M!)NjQt:E/J")kn%1m2%?GJSR(sZH+F$T_[CHK-;GVb)#S$U!kiFu\p.g<R(`Tt2u1EArK6&BV*1F-),]6uac&T1]aY$Kt+ore7EjG4g`#`FZQb*)'hD]tDS%$qTt!W:0)Of=d&&b!08"pp4EO]'m<TOpa9N?99oqPDSQE.Vu@4=FC8aj9A/Gn;Jdq$)3RLYs3T//)FRsM-):"cme[/%6B:*o%9SJ%iPIYgR:G)Z*5Vc+^G7,D%*jh'T]E`t1_?X[+u0`Y_23uin5E:S`d)2u4J[^iaS<CnDu=gmkE!\L9%#[2)4/CXp;`37W&#sq1I6J[%-t-Sr%K"%5A4$7nYPk^N11Y(PI/)rdph=Cr,;N-b;kdu>j$mQ%#u1)(UlH"KfoH`-8]8fu$]iBI9$ZBR$rCT8oUO!$&ilShb]Bii%jIsRKQ4H:m8.:]G\FOFN,_l."I:o_4btBi^l=c.NL)mcOB>`$e`Z!Pt>lKEO=>5LO`&tUb.")Ma0#YgH*10ed=NDgujOM5k+,sO8%2"NFGlk\c7Ld7N8&?(qZ_q)$[W#h(`F8gSe!XiWFiFLQuc%hGQiOllAc\S'452<[:+,cHr2i,L$P7NFeddq+i%Gsp&5$\"!WoN0X%$$NV9&NAs%\:JQ$SObqL`+^W;C/,ln:;"[s?l;]f*tHW4q_R4YSIZO"`Aun)\7f5#Cg1Q8W\o@OH;JP_cB?43'1nXUj4T_Qc:!i8%PR4F>6LXL_4'$oEJ8c.lEY@L;D5H]3nF/NPZlQ@A4:n!T3"0Y:ll:B+$<r18XqWd.L-"iEq@;GV1[qYE4;1)0A'r%"9D=-R!ogc)%(sDD\XI$fp\E2K#TXUf:5FO_/m9_l+j]L`ojLOa3l(m:hGTl9a_pF?c24:oSdrkr/>:,+!9%t5()$Xi\X,/CFX&*(=r\gn*A(F_0%Y65p=2RK=%[l'?=opmQ6f[(+N84I?*l7DQ2`c2=[H]f8G^F,G3qKjt8WV>9`a@MSoQ7%iX9%o\(7Okc$IRYfo15UrhaBfh`)JJ$=%^<ld0Z9TU?RMtLROnZj8+s?`KiDXCU\/%[R+W51a'0SX\E2",+F/$]:aLH-bi-.I_+r/C/Pq3g@+%_/*frlAF'e]D)7$C;u_\3Ua%dNce-Kqn*5I>l`'1&\GFDQ$s;(9AVei[$d6%nI+X,J8)!>/:(4?S+D2$e:>Jhgl_36O/\RY?mlM2hDK[j+#2?i6?u&Cii3WMm7sL%olaXQjZ0@3_X_"<-TCp!o"F;Bb7VT?kiah$Y/.hHhs:s%T6Msar7R$sb'a+ILJ-#*'5=sAr$f$uYUZP+`O"H@JbV61+F]GV]Z;&]%m1`/.;Tf;@\s0i+1mp+&DgdKko8&V)\i@pQ')Y?tZJ0(g&uk6>46t2:[)C-d]ub0`0/I75@2X7B_L5ChgZ*<fVt<mSOA:dLRMHX0%@J:V(m$?);4,$>8SPI`7qtS&"cIPl(&XTHpg,]m.oj&@==&"H^f]aK9>JD!/@4>SC;9<_EP-7gQI=)R;i>Hh'ceR&D=JqF?:3WM!%aSYbhpSUA?:#/SaQXSt"6tP"FQ1nm=ZO4luR<DB@nP$Tff3%-0VJG$E]jW4b:=`>u>3u/LI>T];L,$;pW"U959:+/Rbki)h<:"l!%OkW&-p2p#OIo+uD;&q*n#Oep4LBa?%UF+so=D\5UW]B^q<Hr9)^cP`r2nsrRIH0-/k=+XUGLCq<2ou4t?-F_Pl.jcJfoU*IpT?LN%`Y$P-^5/i6r)^rKNku6FM-T9>#2f;9kd$=1isU1"g;k_AEUF^$9Cr6D0uREPdbCI=+,`m'bVT.u3lg9M=>jHHHSK%N-:Tn!O<5#N%Kc;P3/h!'(nG?XKc)(l+#q")acDCulV1\Frfke5Bc:L\lRk?O44je)WTS"N-]HJP,2Vk#^MNc/Z$ehKbhKp7jS'F*nQqJ701GW]'%?1?_:UpK=&F%.LE9c*Ca=(>jk#m]pi>e7^VdBU"AJs9-L'-s)92I-kd_J]%"ZKZs]klPbH))Ia7B`=NG6;B)$/uU5-_`P\N\tE<>%J=M`VZfsrUfPoMc""6($Cq?9E\fiL<,F^;6QS'Q(C5cu?+Nr6+><REn?')klhO?3UCq?:q''`On1n2eF_!E34Fi8+-TQq%')&YH(%:7NKA[1]0?7a._;p+&MP0k*&35Rb\t%+!uQ24H435f,U=_MhAXC.nkomdI?$qiZ0cMZZ\4W!"i8_k0*W!.*MQ3,7I%5\]2b/gbRF%h#QbM6MK#I"Pd#oA6m-Ke%hGi"X^&X`UJ65"t%7.@f^i;n=Z7a(ZS6G8%>i64D>m[]A0&0BEM,s45Bp.`ECKk:uWO.9F2@u-R6?Y%$2',()>c5Qon`>?*`;t%,C^7UjL-W.7<^!=XL[l\Yk'P':%F\'ga1rJN5rZpNlE[U?$$l=O_t5=cQ;D@4#)XLoV/tmBhBQ#g^P,u%*:]K0^ke`bU:VRiQ27\pl[':icp`.'*;1M$6+Di$eG!2g9JFeeI5%(uFi1knr#.Y`k90UPL3!uJ?m8n'fu"uZ>/QkkI7;FIkh0>C%8X4iCe:f"(LmsZ!n"q%C]Iht`18'UEMj$MHf^`j//BmiMb)hJC;08Nc2Um0dK]ZblG"%or-\uNb&b.#>6W'>&18ggZmf1p%7d(lU%+B4<D`sHR9crN75CV];WChFTM(OE@pg)4T.p9d4lfYNum0eQ1uNJ5,O0ZFRgrl!MT[J@PTg-;urHV*`@^])_l?25FIht<W*-B0Us%&nZa`$74eZPEKsrqd-&+QADs"ItIM(?[<Z>94j^@?_QrLaCptjQ]o(un8`P.(gd%O)+Im.=081_p[HDIV/a]c\!>$5S\qfjr`]H.%S^D>Up@p;f:;i9giQeHd"VQp<0ZFSUZ+^"#+b9eB15lcq+5qsd_#2?UZ'V02eE$&"*d#;*4DT?")t&C'a1se)L<R::\`%G%S+;<Z%-ORC5Dqnpf]AYC5rVSD@6fQp@QO%NRT3+2'%<lgLC;+ch4a(9N]VSc&)Xp4SpkcEL<1r+s^3_P_@]_aMgb%caR?+`m\JG?(+*i&,%3:FDPmDOlo7A%,bm>RB693\+$Er<l0hi[A]gB(Y@9R_?GiL3m#jbYmS5E2ZBE"1lH>t-?K^pmG7]l+M+E6'<%CV%t/Wl9S=R%fbn%?G_>=m!X;%*I#ra7uZJ[I^_Ib<Kb?cA$!fi8PIacGFsh$q:(7Ei;J+9Le_-AcUOF9*,$2cU'_%&a>Bc&%Ds";DtWciTTaVE)s!p1%$84sEhip'9Nb]dWIa64R"hs`H7q@:4o4k9hMG<HKa-Ws@!?7G2*Q*U\ABbrp1ZhDWf2(pT!=ddVU,ULpm(,]=;Ui<?@ct84X*6oq%C'OCPB&KoJkpX657%,FdmFsR]h0/lA>H+H6Fs#0/$8f4FWuftNcIC,8.)ruH;U[[43Se[:"]"dJ_`"?mfYRB&CK%R5q/DmskA5AU%*pI61H2$2V\)cD`(3$mWP9kAkQ21/EpA-GVgqU>Yo?^6Fjo))l=Jr?rWG.32f/hbP(WP`7:$YQ(eACe8XPJm)R4i3K^3mEo+UQK*%.nq/U\e<_r<48X`OA:f"RBnR.0rWPh)TE\XE&^kcC>k`OA=ftk4.WFsRicP/b+FETNU$.T0!s)&pMqJne7g+d\URfob86aQXkC@6%qMe4f6K.Y2.o*XqT<G+?@7!R)e)-4_l]ZlOl5tuRR$r[BRJXYCk]BTgb^]:S<Q[OsE#%I_\erI7d1[&C&%X8dj:[%gpf_7tNn'dI%6P1-]H#2?1>Kl(N(&&h_s$i>'q8p:7UYj**f?u8I_RT\+Zc%kLh%^0$K&WATN2G&X8#li)V(IG5=2SUGKq6T_]r*e)57Mm1/+dWg%N,RXBoXJ%J`9rXj0CcC:#+T9u%"VCQ$ZCc)0<5\odN^[KB4JWXFhl0Sl-3S!E$\-(YG7'pK>#D!`X-O.-s!poMEV@\GMftgO^4QJ%jlu<qA#2c0[h3W\q<B"!^"2gF]pJgpN/iX)!=j?_B=o5"f_K!/]TuIV.BQ_B1%1eJ\USP\7JVrbF'K#M.8S5ZISm$&9LOh%pr_*K%+KYE7h$j+b.mg=n=5i`N%;+23MlM/.D?%"!rW$Ga4b@UG)495L/@Q1a+"NJth+<"MM722o80kNjI/7?C*35D,ml>@)AQ2ifB=ET0%k9,L:/m:kq!RG1Q!JU@@D'oPLn&J2b*-gX@hu&2!mJ4+M!u#fd1IEP0?"rgJ$dDaqmM?h>Z(X0AJmnh'H%r$FUu"*u)@PB3*/.i6%$#+hP_O_e)&[MJt>)1tHdY?!JoWH@+*5I*6C(-4.kf"]-#LIZZnrR")EH;,Jj:?Ba_O;>07_O>#Yp$CQ6UY3e%Ue?<W<9I,#HO/P%ZO0'2!J\t-0*a0\a"!;n6f4gYlm'Qq!fWTN)!W?<>R$7(UeCMQ]TI'P9DLn1;C?c>hghZBKJ)@Z`"s>%>fu5nA,joPHl*kEo`i(=%Qh'Ypgcp-7+7L*ip!6se2uNW>UKkqX(f^R3C4V^d;VN(o)>%epnQ%mE(:-TF)_1V`^S*Ho6LOLciS@<Th!5b;ZjFAab.ZDFS9%<m%n+DUa\spLIU$01=j1cN_cFn\3nghbpf?^9g:adQ=P=N49D^4gR^I1,;amMtQr*I.s1:]lff?_bThHTsV-WNXLf.VG`OnVoeEN`aA%XaXd;!5e0sM]P](6ML<c3h\U&Hi9Zl_FgVZ3-,jTY@$qejjpq+rFji1rLt$tcQ4&$?9caJV7p14`cqTNk?bpeUJm!Uh<R!ZRq!**%qF0<,2r&h/iV30XG9>_@p\K/>n_`UJntt!3n+@&Q:56GUk$Ggd%2G+;j59/=R@ZakNDD#s/GrO5J)9Lip\I>Idt$;I`4^WI#HgEM%;MVp:0.[K)fM*2=mt!;R5^4R6k<7=hme)LQp;a_qcXF2r>Q%%(O)N+KG_Fqo2h'V9E3%kufc6?PY.&>-37_fu)#*kq+)H)jpRPkT%g:_s_n+1MejVdMn5:>PB0JQbT(lFr7e:4[Z?o^-%Hi9[Wopa0RI"MoC`4_4MjHo,@hWk=4p#E.WqpNBq]qPI4^O]JVKhIdFme)K1%[^c?,^N07!r;tZq\^bWRXL*4aNj)kNf"HO[Ar_sU5M!Ms0"$>;E(@I"Dtkm=OSegmNFr!(oc*?`^:7=U&SJ6Jme%MV)4oq8Nd\+'%B,UF!l:62h^qG1ZR4\275Eo[<hs2),d"tr1'=cXIg21I:Roms7n?%00j-F#/q=!tqfrlC\?GA03Lq!4Tkk&7+qGoi<gZD#?f.Zu$%^I1,;C$;G#NL17rW0'T[f.Zu$^B+%1r.N_D>Q'52i`PsONF9Y_E3EX49[XB?f\*Y7me)KZhK&O@rM#PZ6q@4@U"8P=d0M:.3AA.n%GN-LHlnTMLHFmG(q*Vas(*VV2&)MZ^(25[^^e\fS%#[g)Bu+*KT&%qnVFUcW-K([b<Ml2g7ShHspB8lBXjH<KSCP)h]s[gOD#HP!%ju0)oZj>_km4M\7<][5PrR,Kh!^Wfra5)eUG5Y3cBm&Ij?<UPr]32_DJ$u.Nktb&(rE3Hhap5]P7.Q[Kog<HVQb=pjmN"M`LL4ug%dRg5-+e9^S[WJcU^QL4]+)fSme8%TVO6]$Yn)^Tqkr*Un+?dA2SOeg&f5K*dRG*jrea#6[q.Tb/Vpd*V3o0\aC?J*)?7"$jT-nEg%4(lij8T<75gs3IlqWmRkm]l`!FnK_NSm%XY?_>VGX,ZN=l1rX(m)NabC<FgBcVHL"krm:_4aHjE?!LUpM1DRt9NsT-VGff[cP#JA%^3jp_Q=am8"FAc/PTajLBRX[)$gFIBWTELd9t17fh'9G8m3<Am'qs:*Y8*%Yj6'Wm?@,r@FH2]Sgp-R4<*Qk=>#XUmV"45q[T%^V%mRoVha'[Ze8)jb.=&Z38NUP<D\oiBJjiU@JbXq^YQ*/=YHHi(H4/le=`g1iEGcpC[T)WikXhrFimGmDYbd<p8/Z]t.WTDpj'kH)8%+iX.#2,gm)n?%pYqDG[?Bt$_EmEd;+Qs0EZ-6oX?>E#KMqFkH,jQ;E6=HHStksE(HP@7]l>H<OY%\9,18NF)t\+@%uH%4]ohla\m%>;,)%Vm<\<3b*[4,\]H3UH_$mcEhG=C5\n-mK3+V2YXmQf?<Rp"0B^"_p;ofo2&pk&1PsV<Bn68.AuW+q6/@X2h1>opB-NZ4e&.U%@4o&#kQps9Fjc3;W%q:RkDotnmK7%tp2Z?]fZUf9M!al,k7:<ukJ8C2Y]N7TmAqs=)!M3s@c'8$N*BQRH"Sd'kabj%WpG1kZnoCg%4EUW$O9]DR]Er4Rh7QFDT;PnO:'4;A7"j5X/SCa%,-eFhgJjVl.("de4g[cI'/Htn-TQu6B;jf95;-SO"",I?HDfncc9G<,pOWs+%H>ORl/s-XL?W-=SE*8jd1[jFn9Y>AW>g-4!AlmiYF-l!rP4lrTA=eajF8\aR>_B[ajj9lFPKs.qS)s4+2S-,2rN`Pr7(U#g=1]mK%]s;E'aU#(]cH-mF;DFC7.F7JNm3rF&VeO.a2\jR\5t,=kQ]ku'<ec^fCm(EW3VGp=o)2aT?OlfGaL=5KmGH^BUU"=s.4t+mU@N6+%)Jt(#o&gm-ELA:so(+o_l@.S]r7dttnCS,rV2#uuT?gTh61dTk9W:hLVhM_bjn\+%c,T>MAP`].DHj-K>'jM!.sr2qPO4)^D$`Lt%NUfkt.c:Gal@]ZV"7jO(Pj;UfSPH5ED0h8+]H_@>PA_2(IsY2NE^Wp"On&,DBIn$MihQ7Nb)6WHX6.t'e5?&;-uFkh%9;\$n@>94%A%h8u-elf;bu2[6_lacPRJ!5.2pJmufp8@tIW'^C&WOG*bjQJ#P9jGF?f!hGff^UbmDE5kqrDtk[TpEs:;?dmb4bK'2jJSl7)Oo6%cKCRfbZf.1ofB!45_7mY?%8S*V9T."a84<MX<Sdu>bYfWa.TK&r6uMGQ4R2A>OZ]F8LEHu8\5B!mO2@HmfG648Y%@<TNUP+_3piF%>nQYQ@hqh_m,gXC[rs'476@cW=oR>e*Y.(V6^E_]I-*cq@$-=V3E&JX)9Nn&<;t+J#pn"tdU*J,k&?E)=-K.g(Sp'i>"e.IS+M,W%a@\jJnduord:JAn'c@3hK4EC8nkON8%br%f&+aPFnGJ]X&WunCV'=B*Rk?/9Go3n0?*f^<TV,i;7'$SA=\$FLWJ0A:)jDb!J]2d^%UQgi0-dfUXE's:>gfp>=3s0Ue$d[-tbB\445$h0UU[-_M0fLke9^6m5f]#M"rmYY^SZXV;\b-nbRr@Q*r9Yp4<H[o-[oKFjQTc)I%XlaiqH0]55lm@4eqIdOPGA$:*c[Y)T[am@[=i[WAVTi!@1\[#LA\;osJ5.g_L><X1jk1..n+qC3[G/5@5@o#9o-a!BL\Zk&2H,##%eNK[cX.+F&.n[#0B!Kff^R_7ASPlP\CkhXWDoW>0n?:j+CjUIs/JMR5d&Tr0%(Fn5m@A$Ea*6ONETZbE%.*'`7nm*&bD;q#0Om[P%\(KJ"3Sf!0(No[:7aL_o%;t(t[bl=hgTse+>23;ps*-#*c^m4P\+SmA96)6P#8:CfG>cDRVL&A,[W2,M=Rs#R+<KYf&k]55IK,5=%5GS.`6tIf/&OFCN0thUP[^B#5e[Id+kC8b?:[@T&G<V?HmX<Wtj^LU6Ant6oem13[X6o&agmJYH2S\L'1jVYgHZS9b\,]H#)aC[.%^8OBjcpo'8h&5_lII`=dGV&:02chqM7A$IJ]c?.?M..1U%ceA#Mf[?_WQ]RUH74R,TcB.!b8h.ckGc\B(6Q"_gR6Qs[JZCqW&KNG%D>q,%\e5_6`)d8%VEsO37X?GsfR75+s*Sj70lp@L\iNsN.mN\Z;Pe$dj<Kob&o%AT+1]jViKCT5BY^CLS24DZN=R'a0\RtD<U5FO%fr;sbmVmjAH[N_+1(e,"1W?k>/KTt4.V?1e-[,%t@Qgk(n)psl>!.O+nYq^?qB%FqI)@8#4IXYQ'VQ3)(]th2dC/4iHD\F/UaA*@%?&d*=Z)omjPbR83S&U]J=KQL7P?'2MB-i9,EAtr69O$5n=+;6WMjmB9IQl4a+aTdUDnQD8h)uiu]j8!H9:^j)'><r,3)faSS=XQY%3k^sKk@<VDG^'!Rfq(3N/NiAqn#lZ&De-;_>3Ce<f8D^sO)LW)jXW7llTIne_p!RT!Y3]8dSg&;,Ca_+]<b\I4.g']W=STIp[#+`%WQ\pH\$&^PPk)[2Ug"?5YR_H-_TI4s0rGuW?63J2rB8KN&52$[*p/!7^[QIic]793doVr_GMY[kgu%@7V3oN1r?h+56/Gf$s#c3T%_pE;77`<6H-]g$%%*.m;)+^->]"?jGJlg"3UGc5YUXORq>&7FiRRg5oIY]>])snNhIY_%^@)EC'@>C2QUNkc0juO5^ZgX<c_e?Ul%oTFq`<!0_HoB.Do>cV76.ttT`i+-)+lXt[@6PtWnE7ZIV`3$VqGB;m)oZ/AZ_q6.TCYM6O9HV`UCMV,,253<YLaPqscT-Xd2\5Jk%qIPtkS#^W$;_"up[YcTSkuU7K8+au\!e?25E*)q^./kIZWip%P97PjhHYsW,gRiQ3qdS-Hl\6lidS#+*rL_Un'@CW,\;><d!HSRr%Sf'7"6haqWRq1.XDD#.QLq(7i4LTPi;nOdOm&Y[L\Y=N`AO:rj&Rn.&d$etJ?K3W@&\3llQuNpcN1S`%9AJVdio7h#RA;YWO2ltn%Y&A;+d_j*dLEA=B+rFd7NOZJ2l#Ag"fSmES&'fH]J(&/#igGB[,KHd[g\EE\K2><SSmM0Mk8YK$G^pXf1$kC26?)B=[IF*+_3R\"%b,P.;n\Ln`4?IjO_.\1W&arg<PDHZ&)Kc"$S0-"U7!eXQ(!?D@$/(12aH9L[4)m3!Mpgq0,gqnG*!c:9m/5N*Tu`oeT%G_amWeBY%dj)fO7bLNVfQ3SXfEeX5YP\@!)!kZ1%HCr/8^6^a&g(nt42cKZf[R('92`3rIa#'FQ2XcI2\5)l;KiLgQT2!(HDYS^DZ"*Z3j(!H%BKf4f"$'YYX7ZfAk!L_tD#7OJk7RBjhffmCkAZ`#L#ooQ-WK+UqTZ@cqu"FpT>t&W%K4:B&$BLu66l\"LZGmkq<>5j=O&iTIj-'^%mM_kX839K+DJK-$+7Q7WB1K8%kN;$9a1!ZjSG4Dn9^b2+n\a(HUJ3kAG+r@Cfno1PjnVCnSk_AP@K+r:n)*1&-RPE[45Q+r%o,6J%_#L_S03YU-'@0ALhWBt?3"%]1jWjsoJha0jo9M0jJcuZ8a_e<BVnM:6hkPrcFh\aO*ldpqeRuVKde\7RPoI_CcTu:ac!*:)m:oOq%E:K[5Lf2mt\++OX)gG-T)u+\=rMHWY>G8C4b.]P2$;7MYHo_2jV<>E33p/G20R-W:Q2M/jHZri6cH&"(_3-#K:$COp4DJ&KRSt!9%[S8_]4tl@e^.Z6H$Og)3?=^:dW?pZ"qk?0-"^e6U`8="6M[DrPo=Q8#3L@?/DZ*nC:q".YOl.c8IBYE?H.NUn`Tq>PSh8aJY;>>K%TEcP(@jge"NrdWWhsE\sR9hoZf;VfRKZO7cm@-1M<IW0,badM4PppR*?mC#0;RY[blmLm9a%pF*]32kR(9ZW4[#9pbHnS*MP@.#u%8<@.N4`_6L\O>-t!oW\7&cqGm6m<>Wk7/*l"gPN4F*HW*i7^hUN#5P#-%``$COVieTsAt'+i6k'8QE8:1(nOuqFNrliZl=;]\d;U%^V+UE&7P;V48%bl"s8BZOVeb$-_J\d9ZiDI&tsVl'ZLB!W)sXMjo(O,PsQE$,g;e"NC,P]IfW2-"*EqNCP'8_,&B\9Y6W;2ACo_!%0as0fq\sKTARlH2eT%s)cit+sO?;-8L7uoFT/dulq,dt`3O4JA^)VkXkIKFkI<Eko>T)&lb^N(r,%$@`K?KO!LRm'cgtA&2\MCMm%NW\r]qO2C!141u<=$E)nLW-X8!J)a-9@8s@6OmUNY"\VqE;;8@&lC.)j[s6rGlAoB@Ft.;>]>Ck<5.".Yk?jq#Nat7(`AUS@m6\(%6=jLtatAA==BmaiE-X"SEXh*7KkT-U@i-DNO[078(4-lNO2[AFIND]!j0@5r`6u`+\`3Q@eqDJ"oJWs&C?-OW&2`sPbEnoeLrLT;%np**5"=4gPNBAa^TLN7H_j=5PCN4HU9O4gTT3@8cB'VBZBV&gXQ6t\`9Hm8R.5FO0oCp;Odu;T#`8%ilo/*5K1uWj!PK;43cI/M,%eX/UnAos>N,!D>Vc)&K4:%)AXUZZ>\B5*P%16F]DkU]Gs`ArK3c0-]Q@OFqs:GY%)'?2ea4O*(@9fN+6d.Bi2O='9P-s$\0k,E42%aE&ZRgT1ZkO)4#=*AS$4YaL9.h,BB\r[s2IoesNM1bCH0F?9:FMPckDQKg)6DCbBF.1>UmaA=%]4T);Jjm(I2/ET%F1Fl*TSWnqh%d_9tT\,3m$Fn=nn^dhdWE(P@14+2..ne_sI*9De]bF6).@4VY$g>XWNI8PY<8l"rQ/0n$ZCk!C7]&-<)KB#C5Hjb2^/k_`dA.Ve0%g2!IfU*>Is1Og&%mD`,3/FP3X+i\RS[_9:uVQpZ-r;YJAR$M;//`!^q\[.ntX`Mpi^Xnss9O]lAbO<RDAb3<0maPtf[=@q.Xm456%Xk?@M,]ieQ_VUl\(MhRPCFtsjCi5RG1(6gq\)L%H4Fo[7_qZlYffPh<dqA!3igY%riBL#?T^Ju3,YPdSHk"P]1*?0"3&?Xj/cDc@%6b6)K[4E=IPj*eV3$a/nDiLsT[H6RlbP\J7Y=m`YJ7(6OXM<gPmGn/I"1u0RmB6E5Q<UiP<N1%h.i!!G2](TKr-FW'IK+(W%dgLZ%Z2lO@P_j5]LENbQJHn^[?+)LaWPse.!SL<R8:;u)8VdJBgi?`W"Uh()6tL;[U/;n3RF+#jUiFs91LKl)EotqkFIo!"6s41@hgMr,%hfn$lNj$gc3To-Zb+2`1P8X[a9`<.5&B^`XaTs;*J`1gZ:;r`mZqM68H^ch*2D8/<YOh?9r5$OMYd-l^.r5(!<^qJ#K.(%bb$!]>%_p@A/]=\7S60Nc1KfWBF@a@,?9:e(&#^u0+?![=umjfZf6`pE4:*e3G92'3k>Ui^uM<a<3YXB3h',@ElbKbI.iIsP,<)*t1BFW1f%?['W<1C;hDR3and?=U<P]en,k;\iuN$V[\Ym*V5+&hTTBPH:-e)-`s4huDpfrnj7-K%^<@1MVi7P-?Dhf2i=TbLtG/_M<E`c<oY%%^X6HA^0>u<F4\4B$e=Q([rsE(LV9:uq0b9I#^-5`^6c/WRKTJaiW=S09O4?[5Y-?!]q5^ucg!.=#GIT=IUc=Rnue_sJ2ZNPAJWKT%fm+7HZD6NI76C(HU'PoCLk"Ud.\H/J<uSPcaSpnG*9H!i_b8c(6*gsc/GroEN"iYjR`LK%],]`7gm2<cDl*@0-2]+Jh0W3PN5&[b%`5]=cg2.P]dbP;"3I%[f&$DaC;<inKm072F>S?d::-lo;2N2b:a*ea+Tbs:n.!=t/T(L%GAujF,\2l%m1RGLsp"/dYJ$Hob+[%aB%^1rLAhkE*as'fc0YS*BNQ)T2S$qnl/:uEl:X$6tYEF'36NZ;OeJ1b>rNdRoArMuFO5*Hc.2<GLQb^X\pBPX#Ri.8pj9CI8Cl>Y4h%A3M)TT^Dkg%f#b-FjEI_o)TB_bhNH9(?&XeI.)[C"0:Wn8U+U\"1&Sq1PN#M+EHQW/VM?C=`[pC+LuZQ:KkUD*DnVRd)M62Fuu&^%(>W%Y4,"P847=*OJE&3[gn!-@Z1gKp5tRoUkc:DaKU6UG]pd.97a6I-?+R49nus+J0ktL>-JVQD5=KcpBXFR^e[LU;F;MkB1A-g6%M5A)5AkCWmS@<E9hfe&0eAgV\h/IpOem"'H%EIm9\X[i4OD7^?cI^#-okAl1mo\0(4faEA!&1ZKo$[Idd4aeOl5dC6`=0CR"5bM!%@IWiL/A`I>:F]pq/qfgB*m,#IT,A?&G6Z"Z(YO/NeeNCq$hfi,6FQ`VRdRhI[afScBu\uj_Ych%5$(ht4Dn8=8KbiT7t%)/<[\RD%mOKYOiV)r,'-Y!S+bJAb\D+PR,EQ<>nD3ZJqZ:[F*.?!hFB9g_*a*BN/RQ/5@U>]Ph5:]iV5R[0G&9Z]")RZURogXHLS[CbbS@CE%M1J#<*Jqc+\AQB?\SjYLE>Z6r37(c1?k^tUk6Mja=M+'"9k5#eX#kWE_`JV3X#mXI<"f9AN%\TpR1L>^35V">S6:m"KEh`H.C2=h%$'IOHR>=OQVXi^(pgVPeC!<uIO[JBK:9+k0)]=>g@8+:kX#m_1;"0^m/\:%URd0/eUDU6]^(bKW5DoY!8CXSYI];Au=Br`(_AFPM%8UW^e$Y5ACQ>8+760P>-4Uc&Cjm)D=:*+Tr8gk/j*fF.j3H["c]A!*Y@0mn:D!7lp,:dc$.LHD,'9**@ZW8Iid)62`j_Z.+dE&)a%GU8Ai6`fe`_53)?F_IkF3+Q6!H@V<ab58j8p?qjM8&rDf&;@XF8Zg,4e*G=kj_=HH6_j/g?$b^`:i?sE3-Fh5.a-,Wn;X"'3VjA9%qV":.I@\t*Z=lAV8g(i$rd<q\BU!7,SQT0DAmtPVX`qhc'[Z2r&#%q@(=Fk]K8fT`;LWa0G[<l7^A]I(\RI581OC5AdI@9Z@1T7c%%W"^qb<KU>c@]]u6$ib^n^r\h*_UU=6JaR0;=Ygh#-RmpR!.3_[=j6?g+mX<Y@Ya`T"uBW!lNL<En)Q<1]3E73A4HX:ZtU*B_D'o%k3q]]h3=7rI7*YKPm([:+j<AUbR/*TVb7nSiGiX5\s`rtV(q*Tgb["R'95/'OW14;JG(8Wl0d>KGAZSb[:=#XC<(VkiH63fM_EkW%Vt`a>SJu$bG1fMkpj)i!"90sWMGi58a0kpdq-,<)mU93"hKm*AjMf-8_S6!(4lTZK8dgn3p.]haT`I9QX$#3UJV(JXdK?Ah;r^]K%FVAKNl0"#5rOd+:E8.Mio%E3Vf0@O_9o&q`@sS'E.QCWZBA8F4qdTQ3qK>t'fLqda<QUsYGQsrC24qT5Lptq,c^kgJH-"r*T2dKu%Hj-bVSUE"h0]YhTp7S^S='p5;4su&BLN9XS<R%.Ags;6lQFD=TDde]UMlQXa<IP2.5OfLh2iJ!(hLFfBWik]_'`3[BU?]H[Q,p4[%j=RC6s0[tk9r)2>n>Xob(&%\Akqms]f6TYu.%ieAfA>i<_oglE:-q_8IhMPf5#"*f.ooQqFn.m)ki#0D^@Y<=eroSjnrW)3Vd-sb%/(Uc7HE135r1.'nd.PfFj^'[PP/OY%V!Mi:SmWd+Oj`=<!c0t_&Ib9E;DM&I^]%<oL\s/(d*Atd8NtYbB0p([O:m&,+8b-B*s2:?%;O3J9ah%d,q$OOU&rJ;S%F*CdWhO,@<RR(<'W.7`7:8U9PVj;7PdN)C,7lB+(of#Oln"9NB!RkE@B,ht<?(4cQ?8=tUafO%f&WX]%T;iKF-*/J,--NT"=G+&YgFB7<Bc?A9en*FDV-!f;MZ\S<Qsr^!1kqhF'F2`&PN7\5)F0'I+RC\R(fJql'k%510fs0O[dG/eQ.7`b%-+2"!-*nB3XJ1fsSoR;$edO3&,BTj%'rn9:NF;-*Vdq[@df"<":"/?G/R:7_N8QADMAJa\Th7Rl263d`b0[I(IlTS@Br\YU4q\"9%h@b`2KJSPIIpb-dN(S`=PNbt^aT0270S@ReD2H/0_G@IS-NR]/Q:[K10l<1@J=g?Q6Di+kZa+:l8eHkid"Y5^0XLp)]d[Kf]G:[5%YtG:%;C)F%@&aFs9X+^kPp31U0Pt\VJgAPNBh2//S`i$Y?jac.\ni:lR[UW8;fQ4TKGh-a1>=^T3e1%S!MX>+.AFU#d$Bi[aB6DZ%En8fEO0VN<$P46bj+n]mSVK\Mg]YOOLt!gs`\q*fK^TAe6sneO.BF].a93oS.O.-CKFgjT/NPXYOqD.'j0Ff8\jDapU;Gn;&61W.%nJ`gQLa<E?UoklAW`Y-dWbC%JCscB/&/1JT:l0"h$Gun?,XkFR+Ds'_OK/CmTIbRa*Y@ncZkGI#)2:TEj1kqE)JnQ<XCN7ON'_X2%%oH=-!Z_B$&TS5T%(:1JO!nZNOES5%iW/WkR$*^D7A`'.K_m1B]J)uG3nfH#FOZF1Bks`OHQf[hKN0ng_F.N-lbc\S@6e/L1Aro8%l:n^58XGa>;?.<i\dPJ]#pi"kjA:q'9EQa-SW.C"$rPDi.V)C[L5YAa!!@sQW$lgT1'I]/E/>c0*`Ige"UOAA,i#4F[O@buDd]-"%L+LfZ.>15*bG@#QlG/&jZ3ZS7]aq!F\u)HAFQBlJ,/I5_0t\&h;Jel2KS_KQqQt&`(e,nsBq"FER0F8E0M9GrHsp]C:*Gq>\;<P&%(?DO@E+Ple(X#'(?s/6KKd[kuBi^;3"MFSC/K!V`,K1r!;O:sU+qe<h&NMP#,lo4;R<Ku]cPhrjHRE"Y6ubhM5h@SR'0-Ui'tH$$%M[77e73t=4doFT\W$7E6;.ZegPp0gpC"S"i!lW21p#mSt:U<d5UPf*VMoO:9"@<G4JsLCrE-7:7Pb/-maXs?#FbB@C]#]T8\k%Ko%^!eo'_(_aE#_'?q=rprp[`W`T"*8Pr5\s",F:jHuQ7\.M!Z79!W/Cr"<g`5=/HZ]lAO5c-FVR>&`);8sW[8+b#U#FAH'FFI*_.*)%&>u+Dbgc\SE+NPlQ;]>q/oj4[.KY]Bk^lDM&Auj'+%0$28<qbi1fYr7g0*7=%7(Yq^u:aLOhWNmQ!^CWGYaV%?oFbtC*E`,-/KQj%6m@;"+pTI;"<1K"&12'7&]U,"O`Ib$$<i/mRi(mc7hl&MOF)XYN.bFPq'Vrk5<m6B?nbe70n[8d!N)28ND:LL#st#d5krt=L@Mj7%JG+S'6kNT<(u0]fn0PjQUYdiCnHso2l-ODF>2VY#A$$h"eCBB8BS=0SBliPD_>&'Ei"?#'lh\X@%.cJ92DI-">P%%j&]XL""*5:d%+:9u=\V@>>^EinI35[(*8T^q6MG17SR=ZK"+G(YS@9ej)#a&E$THZpVQ>UFY77+5AF]B/L&`8]&#(e$"bZ.;T@%a)X]Mq8i-kZS;%D-[eh$%XdKR]?]1#?R$!9Pm/*`DU(SYT?Z(\.D`(LbPtgqW9.B`Y8`<68;/p+q\&@MSt'+M?ImaCk9bX7$SII,-dQTjXLlE+YKQA%W!M;_R@1BdOV#0I:!ppXKXSI$$]5(+QZTE4j,D#U,U11/k8A=uJ.>88E9kWsM5HqH\=1ri,a/<SCXjPf)j!XDGX*qg.lR7Y$3\%>%TOEXghj4<Ve-5(;"&Sq=@:f2@((?t5#1fHq=I$t-P$td)+0(J)3!_4DqBQr'e';^X0IIE;[=LE@/G3Qt87eRhCKioc-".L=BJqJJ%_+E!R0>ob'\E1S`XoPj;&Fto;N,:)P4&+_c2F+K2Q`[J+=ZIgM@0gpW'I'U%L7q3Bl4KD\0EW0O>83e^BJWN+g&j&U?Hoo8gAs1E%+A:=k-/2t!SZW>-d8ad#WD6BNA\%df&Co^Y$OT<X@a,H,81@i24Jg-3)EP;pr"E"^&=a#LZlXu'o902Q$>UE`X-gu9Z3iugW<c?P%R8MU7=?Z.D.9T=Zc!THKl<]9?Aq:U4@:Wtm"UAPj[O0-]_JZ7127Eli"?BC372f!FeriU9O9oo&efViL(g/CY(S[ZK7(";p$dhYm%?t:tq84/'/WbEi7heX<phZaN2OkqC+A8T@a+eCj&+[P"IRDo8)84T_%QNnX(-.QNL8.$$]*V"5.i;^OA=UeK<ILWGP`!&sp6#1jn%@8)<c0Wr4mU3Qg%7,/HZ:\VBsJ,rrf67L&m[]@5MLo\>q(t7EC6ro.]bH>`[r@,$$C2gs\P"e:p7IW,Zc.1`o/<V2jCT'b1U;^`&%BlFF.D:@%n!7>@H#WN/N34oQbOsTEC-%c?M>R`;N*"D=e1!SK<5J]&'i"T[*nq8;PXYObU_RKfJ&6#uB%8J(TVMQ4]Nm+_$=+eEc%AQc<Dh+T8,C7_XTi5J%W:+6HJRR1,>69lq))Vc>DfAI^+>L,+fC&f9A/gE,/X6?u<W_jSp`4#j\`j\p(kRU+j75d&lkpA/I=k/gQ%LntM0s./Wp!&Tm0n1_L$^`92Q8jjWa/2/Qj/0VSn!B-DW)VssL=EM`?\V_E=Ug"mk0\;0P^h@ft+NW>#D?Zdn,[H4M6(^P?WhqD7%+qTJ(PVfu5J["@($PW($cWMsG&T#Ah+sNF8+;2sS#6>otM[9BX\5:kR!1"d)DP?VIpsBg*KD!PWf!5A)(BS$8_5CB>Ib28l5[]K3%.0M,e2'c<90ddOgi@h-]^E'LRQ,.UO!^Rri+Ca^A&_@tJK%7b^@AqnR&4NhhYVVdjJYW:p9[o]'U"Bccl7.*S(oJZ),>soN=1YXC%is1;$5`flhV<_S>OIT!FdsrJ?R(A:ZSr1I$_OVAXN=EJSR7[kH%p#uSDQE`bm79UmKgrOTi!Jb-I#0NbJdsh16rWoI&`#TkYrBeS%Z5HZ!R'olLl5E&+agd0ja/fob[L#?'ADMq^-V0P?M5<0^5YI?+15'adh:4;tL+'l(F&U['+B1rE#]@&]&0%?W.^+W5KIgRGegWk#%k(usAO(&+/!0uQ0/[Kc3_)s2QZ>j2^3X<Hq"p/nXgVs4Q3i%=*L6.6^Kll!;o#eD_()fT$X26-$]@-kE9b=[[P?/3\:p4B+aq2V&%4gp:Lihd+h3L1'RA5R*b`28]6mu#[fP<:m^Ka:(T((o7T%RdO2>Ssq[#_^j@6JMUQP;P]5?WS\>6mR(N=g02`$$Ha8NPa,O@q91f%MKTDZd3+<V`lPBDU^M_Z!<q)6Oc?I%.:\I=@GRUhj$Huq7YGc6`BQ#,+MMMt?V2+9%U\'N\I%<3*"rN![OFVNkm6Ls#UTtqCfR]I%A5I9W&94A]Y\d/E!alcuJ&G6<Wa[NK!c6C#bB?D9(bd/PWTP:A21Q%hJ5I")luXD8r$B4MBJtRdRLm^JLgnMU#WL?iR&qiKF?0rL%@3HI/e)W?SXXXnK;,e>8W9:s$F%(Y.0M1uUA4\[aDjE_#VMI*?8ccf'fe,rp=O<tKbJ>kkRdG[bJgY&+q49R*;ZeIZ?&W]'.1$md%#c/@EA\LasT8m[%'T'7)_,](r_^,Z6T2&@JAp=XD^ka,`3(VNO*ih]`+:uY\76<j[`e%fL>qguRA4[SS=+[-BZH[fDCrh<\.KO#;%3#IUa[+)r9&<'D(,nAb)mR.')d]tdp,.@uCJ/X?=U)5*JW6#+2\nY\]!_fAD[L4hZ"OQ%8.6WST=e/D'3h\AXh)e%R"ArX>gF8t>%h5rKtl9YoRVDOJK^c"$mL#KVK9atmd'2_S)f9#VO1"d-B`NibTNmH9u:FX-dMN6c5Q0L[EdX[9ui@kgE`9=*I#Vb(6OOT5g\=:md%B%6n4F(?oMe`J3CWEY<1)3!c"Fp&46&uGp<JMU+,6"Voa`>2*t0?2;4ku8_6&:rLo$j<ENlChJi&soaqkg*_TK0gF8BTaO)ieWea%F@4K?rPPZ?%,$J\6<"(3Pqk-PfY3OW'AOh:;`2Z&L:R1QrTsd+h@`d?)OAu@F^TeO!<+#,Jd&pmJ_8R\0^OdQK2e%;NFMW%k5*+N%M##(@`2+_FmZ;RGF;6*a.b[Z$EF!"-+YkX#\D*h'2g/W4CkT;XO!tAhSaS/'EsrU_2[&;GKQ-,,JVj$HqR/t$QnZu5%%UlC%KRu4%i:[d=TKEmX@hfD&eJ:dqkQ/<@YmB=6Ylb[0nkW@AN,>MnR`nGM+b]=$=9r9a=D6Fqi<)J+,YnhU<QRV!SI<;uJ-:JD-]d55+=r7#%^gnLb\!_0QU[nJZ0k2A]%lhpYig(c"lM!7mI"3?VD@E/S1hHocj.p\:^gm-\#fc@b/<"Fj%,V/]0mj>5f\SLRD.u,(i5Y6eL:3sh%ooT/H`u)_U5Xqi5$Nqls4Vak+BOZ/!(k"C\ie6f,(_>R-KH3]q+aiM!:tV`\N8Oe5La@u;;kgL58"9tg^uG)@LkY<^/4kR-XG<rP%maZC9K"r(#dCc;(0C\2=WhSUk!r%ope;`R@HOkc6mQD*s\-JDFO_1;6%noDZ8:]V:!/Q16KgkGZ>r<DrAIa;\(;;B?j^GAU0ZBd\%FL!JQ`\/l'*kh#HR+6`+8i;:!\QYV`BGX-3.S3-Be[RaOq_p44"G19qG_?;EZH\D4;[E#q1/[J*Jgd!;#+8^%li]nm*l>]DJXn1,%6"`AZ+39`'DTs:@$QK1@@C.=7)8rT]-Id21AIqO#`MjdV;_1&Gk^c$IQO4:XH*:aFD.o3-9AME0;PbUL1=I[@-GYk6!*A+:<Sq=f%""(Nrdmc-4dCL:D!m'&3-<<&[V'I>i`]'7]=pkJH;4p7bG=9I20TjlCVl4Vi9MeZ9m01CTS'[Up'a'e0/js)q(*4)jT1-g(VRH;*%#cnPf+A47r0er'9^&ns,T>O&\EWg4j9H];U.Y<,:_#"\K0m,/<4#!?\"EH%F"=E'de.$qb]^NWUhRCk<(>.@76)o%.1]bTp$9+bd%k4_V^[;U(7gZ]VX9CA#H9N&jc:L0&me9MZL<`XgVCc11g"R>2#d6P,P%-+Tn+&#PIr$2gY$e5:[k_c&2!!7SkW-<nm&/W]\N1gn0%6E!4ZoaK*g/\8l!<WZ[%i$:nc_RMZ:)*^7_NY-PB@E6<?\35B\kfc)a<8t9k0YKkuJq+=hgPr*8I$N+aUKbT5m[L[n(sK5Kp?Kl+%"*9edJa'\RbEk);34Rn(L&<,npM)N*(etYZ5G\:G\u="]LqBf1R'9$[0,FHM!ss$X\B[l7b[&c1:<Y]JX3k1>:ff#cjn!_%R"1&m%2ZP2+C)=lk28N&I'2OrF)&5$%`C16SjUR)F8onH\FA_d,Ai3tJES>7^>&:R'^B>C7SH2.!kS<&E)YS]//@s*c-IAa'`H@21'c$sd%in;JhBH^tso8&djkDD51E-/l/X!Rt:`RH*=,Y<TQkP"(Ne7#/p8XtEFODCPQ!`Hn3JAnVJ5+5FQkX5r7_'&dr$rrB&Yf+9ZQmQ7,%#([@0V3u?PN4MIY1YCPg#gB9K_Z:-*(^AZR$6E@S(_uchb[LWPm)(#20EcM$(i2[`MRPa!Bt>#f'6*dIqYIW@>B1t#00&uN?3EfL%7nP+r8^`'Ni%Z?>J.6c4qea^4dmkWj=1?QABg[C=>aHSDX0O9AOD5eJDC.$Q@)Rp.GWSL&qudtR;1@9Fe3:jkZPcfEo,`gp?_@9"%M^V'iGrM*R(2UmGmaeFINR53-%`?5B>p:Q%rUnj2b>5A+bD5b2O1ce5mQ7T*Q1ksGp"kAL2c5/eG9Pt<@>qE"JQtOK9]U1V#A<U)%elDlE3`9;r\n>BA43/XoY0_HnZeuKm`(.];3MFA/\R(ODY$c4:X\RV\U%0u&Ag3#o9R(Hkk`*QN2MThJ@[\:n:%E`UqE=(:UChC/%75%QG^l"XV1pMmC)iuo;":5FkJXZE.%^?W="VY)P:.#mKWdG!fQCYl?&3L25bLr4_3t+*<#+0&d$aO=QbJ]9=_Gd(#qaY$UrJ4aG%,jmK5RqsB\U]S-qb+o6Z$(#ISb4*&`<15*:&bVYh\CmfBE:6-Wa^QV.Xl'W)Nr"0cOZIq#5,-j[-,"!4$(CUT?\<!HO[-8'DGP!R%@QTZ@RH,C[\Cj<s>Keqj3NB]-RVs\\<n>sWj(n[d7&[s&g!6a-VKYYm6Vd(R--ThMXkCR\!?*ET)M)Q>omXW^)J^:&JkP!-OBkmI%mk/%)0MS!qCNq?G"-q,t-*uQrqmcI[k:NQ=*k3B#'ePJ$3[Ii&PgMR%]0PR1=_B6=6q4W:Z\o_u3^:UCCrihrD>@+H4PQRtJ+agM%@Rkk2>Oi8V%8+tCr40_FXK6_T3M=UR@`u*E>1#>_$[0OX=g#09o)`g:1Oj(^:$26X[f#PN]K>lb*O\(7bSbkXhke^8c4PIfC7"P(%+W[bua'q*\V/_9MB0Ti;E!16qAhV>_s0cD+h.<`7p_9YlhdV'.H1Sasm+nWKDor)roV1)OO>pR-msp^"bK+D%k>/?"(*'i`IZBD#%@C#YB4*^;3UXr`DZb/QTr]V-3a3c?h;oS92&?+'R##4Hq_EoQcHcYI^ok#;coKXJ$!u=MULI&Sn/9Jp&/OL#G8*_f]\>56>jale]%e?W9BX<%X295O8-<S]cfCmh$]eAWEB[eK0VaC?6*A'^X9hIG$(\X.4%8kes5.i&eFp%LN;p3R4F%;7r@Y4H)bSEs_?!"iE<aGH#!%X2?;4aag7sCHRS>="K1sWRpV/0d!X-C[pa=fN?bo5Q;dO[g->Ff_bK=q==N3K`)t'bs>E8?$+d&I'&uI1uADHjcNnS)%"Q377-U:%f[,!n'UnJY6DluLXk3=@UA;[[e'>\99(R"`ju\^)q6$)A?fm#UAPm1sT3GXO>lENaQi>]2I.F!-Y"5M*'+<@b6:b"EWpbgulFUM'%I:8>&+r3f<Ks]kk0<4J<ip&:&>o2,(j[JiJO\gHR2H=*0UZoF?L['6%S_MIZo`^N5X6r'S:e.e]M`m>'1_2tkV?M6!+jO4h=^0iO%B7Hec?hC\TntQ+-):!E$p%Q7sGu;#4PGdO7qKpi@1>0rh<A2<7Y&mj,0W:Q>Mu*<Z.m7f*9B%t;;uN7hW4tiB,gB/8O"qI8:k+O6%%tsq/%9Y?uB1TG,l-b2$$8B\sqmeU'.m3I]M+mkl@\Nh]k@j`5qX;"56N@#R`Qqb)Om'#?SVt5Z`ah_hY-59l'ar-=j?EO51gI;1%p4RA_(3.A2`3_#.7iUeu.?)P6d<f3:N@8L7WX/QjXfgK"(:A1OU4F:?dE01i54&]6\;/)u?1P(HJrIaQ"]bG4(d^"D.o_ed$f)FE%Gt?Me#MO2sr1;$`+_IK$mYN<jdf>C2^G_m]j2L-\'3U(&Nf1g^`q4!@O2qa2NZmS!$jUh6j.*f3E"0nm+,W.GMp-&h+tmaTO*+;o%Kn!Q1\K>VZ#$R>V#KTji,VUC4+$8D6HV(2M&sK2O"1TPig9,-7_&LKsj8f74BH/=[alJj#M0D9FPPAQK#(T?@[6TR"9\8Ir]<K<%%^_>d]Y!*k=?@_t.R92u#6/ESgbZLZ\_GjbZH[7]-0'm-<_/+f]@+R<!1g,s(o[j5mcHH=BG2:nNjHVGTpX4Yu_3)@*'Z2PRoNi<o%_6K=qI^Xi84R;o?\B)<*#JqPSS?[.4[IK<uAuM@+T<G]7ZR[Q]gbI0WD"Q2:)8I6i!Ej4_AWg_=j3YZ(Q0m+^FEOSUCoj8OBQPps%*gTtq/tiWMs04,ra3>fVhI9.?SSQiBopYmRMUcLBq3"D(l*_pFZB\$9g24%1Xu:S!5JohE[1lthO2\F7R>SHDqEA!rX43RBVQ.5%%7#/tRDW,';`MTl</\DU<fR3D1:u,X=PT,B<jd$;"MN':"#.:&3cuQh!0G!g;G&m\@BhcV7VA=qT0@u[$]C^XFja&_fH'Pqs[[lXu%>5K%1IY,NaIe`P^m$0uD2hZ6`mi7fW-8nR:%2<bsp)gPRdeN=GHgI6-@at&^Iq)f@]Y@[h"']ZRj4R54\G8(R7_O8.`NuZkm],/S%l_]JN5J^gaf5J:=`j^B7^*u"Zrm%b$1]4>XfA75]^B2Z-X.Nk]=a55$itH5YFqY86%WCsQPKqb6[:X83%*]9=*^U<TX%S9;^199K%^d.$r1pNl]O9k5pbb'`RjEte,VjO)F5^CJT'>%YGh^q[gG<K1>E=O/H6=(8#'tCEDlY1JNfMTrU[)/2nS\=62lSsZS2mK@Botq+*%L5sm%j0C%*3aP<1#]F$Ja()iG`AS)heEI]Fp52;XRnIQik_W#J4I>CT[`mJrll0Gmc)L9;]FbfG&aSNmnReOR6=ZK%,I#"9YjZXh%&/&?VeL/ZL!mqaH1gA@RB-.nSJr(I&0'G<*fmEgRYEpLd:GE1FS<?!5Z@_T\B76aJ]'O>M[QVQ$PF)[]Td$o]KObLFIiCa5*,tL%%`+3=IpYpg`#LH=;=.aeW9,$*\G$X`/A\PmR*IF6irpjpGSh%89+:.de)\$U2P?/VPjU;IOf0k>a,MPOK(E3DOT#tN<Lk,6k>T6[a%*q=9^9IDU&XT][8:n;1'i23\bCWTgS%YKMYZMIB#'#nZ:Mg0S7(uDF9N/cANYLR@378^a&ETlgijge^,c)Nm?-K%a#CJ0QX6!XA+%)g[/d@3+Qp@dLX7@jc`\2ttr`7ail8I4C_BS/5sjmb%cMH0#49&HmnVB#^nu7/aM0+"?7&<sUOt,oSduH["]HZq7OQTfiCQd$'7l%LGk8M7es8_b)s:bm`\-AN/2C\.9<2DY$V8;AGLR?G6TnEjSF/qm2h`A59@LhqOlZAc2=AhcsR%cDs#LX"=((m[ZSUs"^C,8bj$4W%bj%^b*KN1N$DX)*o*WGcR1>",hdYW-@]4?e%7J?4,m#sZ;]n7,a(_<u!;1^[_LX;6?c);[LFmonce`.Td,'9N/bG%;ToaTQBec5u%Y?5BnE1&Oa-+pdC_\VK#6=2@H<\Fok3eILFfmC4Qr&G!^#>p_JLj5+A,L#\R'oq/Z7&^ccb$o'B3^2Emrpq0iTDX7p%?>t?!E6@a%Gk?-1"u\on`'Uh]`c:G4WNe*WS.I7\j@u[kfmSXEZ=QOTMH@@o=t+%)'J<p?SED)$(_aQaEasmpIW$mV"l1Ze,)]JHJjV*&"UOoZ%YrOT']8/Fjf\?i*ffO!^0n%KM/RjIbCEUl1$B'_.fWtIqm+u0om!cka_mmMap0sV*SC,no2s%uT&-2fXZ_>mb2U+Y>+[cO6GnD6r%-g,]K1pCPEX/"<cYtK'u7Fn!]P--#uKTjnP7NpNI6:>gi$G`78O=]":TM9DH"*$(2LJ@5-HQA"W96,sp$sfofQGMCfVq820N%F9s%$uGb-*(n*h#&^7>NYfo-J%/@-0#c0k:e6tt,S1,!.uVSeKiC?<qmDtXXg;g=nDG4Hrk-=2M/?/#L!aa.X=Jg@/2DqWJMOhMGoj/i%1Z\Oj'mkuj5$(;b(:f3Fr-(eK5k>?f'LE=8mV;Hq`*(AXL9V*!$m%i?7H9*/BI0@=%rp0%Tm*p0,U?0ZQQnD;#e_34@RH[I]PtV:%o['`#IB,Ki+!$V%J.R#?>K-ha]A>`fk&R$=hI0@Hjh\\>&XW5g#oCN@`tWh5>M_TAp't='q[r_F+>M3u]Zj1[#*,S5UqgrVnh,H#%Z=#aqZ[f(X9EZcR:1H-7>hA[_U(_JI%&A(IRNZ&70tFoUC<&DdR4\&0`^U21l,24?dGfsQr'9miMQiSP%S+DVS#Y['8.n#^n`9pi%_5U=i-!4%_+-"UuTG`#o+I.mq[Yjj(Pi9a[>`dCrn"lMQn"H*(@<:_sZZk%G43"W$=NI$G8[(Cpin:l(m]`N@j4QM1IbTXsHB3I_%4&cj*d_sCT@sjY8DoR<PZEO-q%()-<bbc2XjKP/F^(=G0)8BhF_*6KZ[C#MspGdI8AGk<"7^(*n%3.N\s*]rtDcZ)EB"%7ML_4Yb%?ACDPmE7-m@!6=:1^\J%Z-MK^ReX!r&A$>rPssm-.#pSqO>."C)hZLir]>H)maE4!^K*]%_G+@&r>WKun#u)q"e1CoPQrF\DZ_e>%=aVmg+qtuD8ibc\jakZ&O1/u0mcXhD9&@KQab-6MbG*E>!&F<PU#_IN+$*SrO]ill]ST<.Ddmc=?kNg[<@WDBcBps2Teu(3P[t,1%-jI-Hr^-uQm\$Q</W^Z/nE<X=A>Hf%lBp9o_*am\CEiu=RR\Y%DGKQJmsrNY0t!d5:&PQK@H;_'iA]>SoXeU)W"9<m\hZXOITW`H%fXjd/Bi/HH.P(.UUUI70Ri]UtJX:MnY1t86-J:.['3eLO]^#c*H9Rq5a2V2Q@0+-``j>A&gg_W;(;+$Q%1_l@FOW+hNcB_\fSj?Q%?mp1;DA3)1:9Za%"KtWe=pSR""9Q+hgF;Ji2:gq2'&.KHkYLB2@TUtoq1?OP"(6p2@iKP:ZV;9m%@>O9HoS[nCt+sYEgVhfKYglQ%)%0@u??DbHD294rYDsrge+'RU8ktfDTmsqbAWBX[aXJ%h;E"6]=l/o*4"UI)/`)+-;`^Ns!cj&DF^iOg3jT*VT4+uqcNrP0"<5[Y%1J$^S(0krHQ4a9d.4U0s5oE?7d`R36^*&'"4u(O8nK)CGiG3$iR=KGNdpL,=*pJaGG`OjRfD)@ge5%$=f/L'NnWT(<-+8]qe2lRo%1'm.Q'L%G]4.nI0kP.'lrs(i<)=0Xcs4GkKCe;*9ZZDWh\jY?p/\b!HMT)kdje7i$K>s*$['Mi135-1[4@=AH[ed@P4WVd04l7-A%MqrK(\#R04&"tqEiV?faV-dljL[VM<R6>H_pXj`!LSs)@)kQL)fmet+O]",Lc%RPMH]^jlbOj67<hP)9P/#Ms0rh-=*1]`8*GBf6%-T9(+^`<#a2@^O]<k*E5=;I01l'%)_Qc`k!/D-WPbb]N=XTS8/]9M4Xrq!-r]rfpLlJ&"C6?gd=l.`2=d481d+cJ6f$'#c-Vq6*;%.\\#ij]B>qH]'K%-Du]GI@gpL`Q>E=am=cs?8RtWm))#BQ2a0?_PRu4_%/^WZQEYDQmW`X,$L/0r.f-5<X&I#i-.8\phWi=NbToJ%[hNPDN'-kaH>70TqM:7<G=BU7eRJ\[2RO<gO[l^hQK0&(LjI_^;iHZ9V?l*SN=!g4M$sU&j?,Et&ejSe^L(=AfX28V.6@>]f5JT"%)!?NEJatkgh;D3'1l^bR^3uJ7kLejtld@Uo[ANa;>0[*pP@?e^&mGksEB*Ibk'W:!OeV;>p,\!DI9=%48?j@)UmP6q.D!u>%$j;B%4:dWHJJqH\*#WTs\"Rpu.Id##q1VBp^24K3"uPF]CZ.`bYTE_d8Yg$^rG<)pqW>Xn_sRn)*0[c_emXf-b%7t(K;ZW"Uk;5nOiaDd%fU.I7%QE9(YZ+$=QqWAq4A'3`>_)PA3%n>YFQA:<`R5bs2q239\l'=GoRj3P*PF"-$.^s-dU5s\"BkpVR7Vs`E;73T-H3p#jSQ/s%m]gsC0_o(V;rR*YM^&=HF7O)nM?TJ!2iGP+h3g4EIQ@f3\5N%<(Z+7Kfo$<IC[VKd,mN3Q`VC!JqDOqYa(#!rq#5UK;X#lDA+?(m%(d7&1OCQ-TcH8/H:?96B'1I""En6f?2d_)S@h0u8h&!joGIYQ2:G#?5$bJ=C9<6J'nY5bbp:0qPR@V'BT9`g>jY*!8hh;57q?u]&%OCOM^elLJp#9E=<o,O!sr\h^N%5aY=]m3uBQDFEfep#dWPB=f2_P8FFm2rU<0_%4"1iBS[g%PSkO+"Xeh.<)=2LN?\LEtt$]#CPD%$#C\e,W*cO+h-R<"KZ2LkY_J]WG-OO=P3<`9ljc2X5r#U:&!;Ojl4rhYVD4-^],@%a8Df'\PjMudoqk'6-s\,>1?[$6gt#5#@@H,%VX1Y@-kt`hCL*p'OdY2i/desRmN8Ur9558RK\At19k*f4PaNpKWlQkl[-Zm8jI%H?6VW/a_Am3oV[!l55h<14B33;!TZl?;6V30=%4akH--+4f/[B[:`JeTI).0X4UfE=*)6)G-XDa`:&%?D7C%#HCM6a@h/IbNnAA[9fY1Nh])h"bru@ib;2\[W/k;[_nkFgY\o$KeQh%TH30R@@pd@5ZKK$Z9T.*1rtPd@<=s>lRZs%,@29an.XMV<a<j+?l9=gA\Xr5+TbE*Xg:Ig*YNj%4]et"m]HZ(_t8m!Kq\q8N3>_$%>GspuUn[j;BaG-!KNWmJ=K'RTH9I1EDdN0.eb2@YHg']Bpfq)c*U+4[iYd#o!GBn#%\K2d\00@^2l,b?fZL.;^U)-&Y.gpZIQHFo%.oKmi8u/,neg5<8WVp4dFS#<\Qa[CJ)Aa0j+9Z,EV<VhX;X5d-<5n(TVAkp)NH$j`WkW&S&M6k%6YWiko4)G>^FjubJ^F!`P1?DW%=+q8f7+HB/6S)=&BM%ljd0PcR=_V]Sb&Ff<EJeVc:8RP`9X/iP\5s@J*]&jDEtU=L(fTmWNk2VH7bnQRF`$lU9ZNud'N.(kYc`Oq%NpR#%HY)pMSNXgGAYRRf\KHhTJ`m,fe8HJjj;5>rEP/kV.k']e)2J*g_PW8;j#0<5'0LJDbK2hNd9=6)G`&sPH4Eg7f+::6oS+iP%p]L`&?YZI<!'V7TEW,gCUJ@TkkUJiDmI0@V@,-?Y@nB^Se"b1E'V'qnQ2<H%Kj%\Z35j[VRn5o''cbj3#YFtu,)%:>&LU[#XXD7A%VLM-3S6W#TZ]=,j-;@pA]orA-0TGS%_p=Cf_ZdBf9MOuPm,Ol!?,Osj"6AA\G1.JkNR2gah77M8j`P4,5ur/_0o08#W924@NI'#4%(P&#;bre_P(Bnb_ni^uFe$'AD;Oq>'j0Z(Qjd']fX#6L7B=5,U^6g8m0G5o+!BZ@k(mc_F@([s>2^,QbE0>iW";sSMmY3^6AuPmh%TK(a:P9Y]cd1;Q#18M!@&rS?O=?oiZn?AZ!a?F:o.Dn4N/<_39'm%Gik,Na+)H?BNOYIg:fS[;For=r(YW7n%&^+U[07(7/T*R+&%Wr!)AFG(WAQfAaAq>0nU_#rNRXBqF*HseR?Uq%&5]<6"*+^De'A:N-R<qT*gePHjJ0ad,YC(e!**<Lo!Rh3B)X"XUm8IOn3@p2td%;RSA4J9!59jui!`Pc_R'E'H3i>k*p<_/.CFXdLV2<@3L?""OCaP5dtU$)pSUWq7..2kI[W*kjK6fdOEB=^SOMFeBc!7>l2@["dSL%kksF4lUDRrbam&=KrDi$4-XEfgD3o]jM5+/ZV+[WZe1^A/",>)0Oj"!SO%>7<<S1"%"ctY/jq_Z@"P/-PQ`h+9lTf-Cco5=:80-Y%M9U,LgQd'cfVSM;13,Bp-oN9eJmgsO3>Mce"/B4)6DH=NWVHo$r$ZK$TdVusgNK9!rAZ?u:'Von;[Uj70ih@oe]n?+)?!FGQ'+bR%?7L^U`U4EeGh6hsquLl%Jugfo&6MNO=^=p#;<//LU/XBS]HTJ3!$5Is28Z),1sclpC.GA_gAIWif.gZl&uf`Np'9elrF>+`VZa--%)o0*Z/HS8H6YD%VoI0BJ<!1,eD*\olE0;2EqVk=M101O8h=YDW::7m#L<W!G#?FejUi-X,/Cp]jVFiF5b?>t>k2GrpVFL.PDcfGW%dGAL='mjhVL3<Yp-"'E<0<@eG@H(a5^%t_e:'^(RiW+Y=(l@a&pp$cL\?Sf(F<[,p+X5]]);l&ZQ*Lth"Gs*N;@6>(:>JR+<%5e8%'j$F8aN;@.kfhiaJ2Kk@mpO"H;*&Z;&2DDF1Hb"lJ/0]j&gV*<J6N/8<G29G$>ZdO)^.ta>@Ro4j06S><Tgcm^3&R!l,q<:n.a@u%iCEAR:.q1RNV^70>tSn=s*5"+/jdbInHr)hlh??H%QGrg6pR8;R["dt[5ps0<g-CkM>QNi-lW5sJ'kkB&m++<gJ3*nlCe`1?l@4H%(FD'h9GX^!N`K$UpX8c@O<2UCTOFUa-)S(Q63="$Z)lC=+fFTX6q&bZm(12%@EL]K:E;l)X$X\NC'itL/G(3"8_R:t(RoWf9%_[T%;<s=V@3@H_<u-QB3V4r\-&qH-^d(0>2TCtFnC[,t$>Z8m)6ATgAI>VY^aU"CmH&!@$s.7($u=V#=4*>Y3n>7g&<Nj2SW9e^?io'o%`R1fi731d]s!H(4VTRRAji!i_(*eY$ZKnQjLHKI7NTVne;BQUJ'Q+btN^-?9#m41d`kID5pVBtJITFRca>LrkiAB:0EpsK%l,M/3%buL^]'iXhT$e&^!`,=+.Y#g3q^tOl0h.pnWmbh\o,u.H\YXiS]Y!C)0)WbCm7bUFb^27CFA.L'@dV@(Kq')7MT1c%gP.uNkpGTU3%8G/,r,'6]I@_4ia*U\1;-Fp+=f7f3XP<csgS5+(E0P1gN@5j?)2*mc^ZH7K]Xlh9JL'1Z%77TE)PeO[48i!::5aEC"Ck,[gL5hDF%^=KN/M9fGn##D"?L(8hs]PrWT7Z^r=^.6s*XPT7ppa8tT&[od0AS/._Mh;7XC41Zs0h&3a];P]ML6pRdJ-D40P]-W(U/W,O#/DT,%B'qc5.lTsndh`K>4G*.K!SNN9!B"(HOAW,KW*2O'%adTV/+u7-Ls,!%qYV,a.DuscR3)JSkl*HR=95/H<<R'aV:_#(IS1PX6&Ye^%`O1BbkHm!MM_:tKn,TI[Z\M9@^g+\`Bkg0[77*&MY,+\uPI$ok?0kN#@_KDueKl*H>]a[B>ilNSWd,:PS;BcAXoi`:M`mM20"&`?%Pd^mb(m)8&$?/g6Z#u1'7^o1R!)rT.F8%XOU6%i6ZF((ng$I,6OFZ"ZLO'@A%kukK0SQ!kh`ZFDocCV_PO4&e28<I?Q!mr29f+q`%@LVhqIDH5SCD2Y^X=<586]s&^2HU@X)+,;7EC,l&*n-4EP:j7EbU('h&YaC!\]DsI3(;Lf</6MeS(SlO(k7LONoi[ba=kaU;DjJH%Mui0TYbLKUS*\LEgnYJN>tW%86'#NdZq-HKRnRkrG?'m.NWdqFX;uH>:"K,TN[kmBRWoXgr?t?dN98<XYLI+B^2j"$(hZ3F8<3HY%OlG(AM4dpMg.QC?J`#9JR>g\"p/#gUi?#P=A1[<X*7[bVA;kFu2r#cJ.k"gkl`aa2MCP?@B]K]Ynlf9M!NUllhW&/"739GX=M\G@%(\:-V@JW0j$t-.@XDa6@fQL=M/Q#%Q#X8WH0\g&PPG7K/][kI.pMn!I1)[HS)EG.rA.IMBiA7/:UH#5^A7sgS[9Wfl.>HB\iX#Tr%Q%qS!oA)oeMupMsJ.rpgo-AqoM*)F5o(ogOpeB:fp^9qAIrc<u!V,YZb%J*GRVi%/G;tCL,gB4`7t=9&ck[<"(q&.l)9<E@X<N2.%A0XPMZP@S7g7kI,#fi=`F4;\&TP7.]i-)Id[='[Al6?fI8HB:q?/:.C\.6'E`Q&.&XgVS-86=&M^<D^/BDeR>"D7>");0a?QFc_#%A>t2\Tudum^#4_9)se1JfFb(r>*@b9'Lj`3G+Hfr,2"G9*LjXP0Z=f3T@rQJF$V<fF0S=LnV:PiW^HM`*da?n^bR]2YbXCD/;=XN%F)6sr_en@PPPuM<Zi]L_&!Po"g3<:l@Vu]Te:G#(]TgS>]rrYo6.b&W=E3f9Ak_hK#"<>`:Zb2d'gT(J^P!q"M*51AlZR,$F<]/r%n0/i6>8sJd<=,GZKdPGYimCj#oH&@]B:hN>kq\(-&Q:E!Hk5n<'NHT-q*.t1q8-[c`Wmr@-o'tV/P=D<ZTrJOdIs&m%5'>fM'&!l%NaX*H7X-\ZKb^6r-0+nA>o<A.\b_PDoL65,c3)"9)C\f2^sGB]V@]d^<:fsXp,F7c[bcX>3#(M,8MDMIAVZ]39=g<IA;)Tep?WJ=%-Oa!(nYk`!i=pIr$%0LN/t4J6_N`W4Rqs0KZ0>2oGpJi?Rr@ooPJU5<XggmD$Sd'S`&`A)<ke+,Vm<%-TB\J0;R!I\B&Csj7Imrk%39-<h[](YDW6g^u[<;(RA%)<7N<rCBBSBC'h5ooc'!uJP:I\p?[!Un%Y#.'o-V1Hg)q$I=Ve'3L*b.VZ#n$sE4m?-O'M#Ld-S-??%&t4d#bZ2K2d@hidi8OmT9ouIH'1jKJA,$a4RPDLU`TolgKSTT34P09uLUjIIFgR4'NU34*DM&J7b@;q%3IYrYXUX/PZ>@mn[n!oL%4/u/MON:i2`Z$t#=Ku<%_n1ZK=^h@_.@Q0U-i6UedO;KBi,QN(Iad0"f^J'\\Y+;E2WY9Y,*strMCkF*b>_oNDRruHCoT6K1qS]H%^?rX2@e$7B?7/me="?q/kA.:/Z.:2"Z<?Io&VY5YV/a5jP?k%]XBNnKNM=c29_u8pEILHG0s+!;\o!=^cH+On*?\&7('p5qPmCJh%8;5W$,k4%0pXtF+I@<urY.AbTW(7XRHZC+D86fpdE;)YT2cF]aKdbYoC4n>40tIt+;*u2hQ8rF7np;jc&C&H.?@eDme4r()K)</K%dGC=VImC4&b]I*R<t0n@-ErrP=YZ9PB"sG5S047)lZAXGhDnsd@/MI8\B^P<HHj!Z9=U_Ls+K!*>@k3YP0<`%>=$V-(<sg]F$\m3%eoWN=H-\MblLXqr!U.=8e'l[W9<`u3j..#E-1&<"SD*p!b#gI/dijo<'s)o?#i=_rVBRtSZ*p@r*r%(`*jVM;$/&nC5AaSWM7O29%XAD-,n?JF!PB?W8SK@R%RhU"8O0(USGpj=W8P[W^jlia%;k!V.`G?X91$[B3rD31[Tkb;66mAG<!)XYV\E&j=jD@gB;cqappsP6u%R1UiMU0L\$.eu.EISrWVHu@]e@3nLH29)VK30^Tdf[/eREm@^Q['S6i<ic=rFG%qG&qBM/@$I\66]WnC'&-t(4@SSuPLZp&e6hnB%->s./LgB63(kCJmb.00B@.gdr.*FaXL(5l",l6J\(/9s&$5hm08ToG@)2eLU&n1bsV2<!L-CK1[:+AtH8R6p08+,1O*g(2d'HS["%2fS>E1^j6;,S-Cih4N_.h*iV\D?+;Y.X\G*K!B:2K=QdQJN!EX4I3\6fde2!3=bkTee&C6(8J_/=$9T!n1roqIR+>0-8,p+!?caH%[>=$q+VIH88/cVYLQ?)>50S<-D==.kZlm!1<'</o3XD+"=[(Oj)7gq:%f.!#7i@E2XJiX0j-8E^B9k]rbUtB,^9VZ<eU_$#jdd5V%[@tNN<@g"9=&1WWFDA+i;bgKA_?TZuLm^/k;9IZpj4_9dA^5Y4F"(\i24Hb5@u`L:We$D%d+!4rU3f[mV>$RAfa2*=0dH]QPCO6R%&MU_9@rdT%s7Ihs5jt%H^G2_Q=!]k%nuA$1f+HcLCbb".&i%dqf:?9ukd4$,V:Jpg(.CPe$Sp;>A0e`9W$GRIGT$r7Gte>I4.("b%<lO8TrP^4RMtYVs@_',1OP8J?`_P9RIG#sulong)/Ut+Z9!)X1r2<OT>-cY.Gse=t:h^B9'6hBjA3;_]]uN5QXU60J]5GWM#05<E%"3Gf;PMY]S@)Wp%b.Ep,)Y#+SY4!qU;]>2l]>D-bb;c21(u:BN$mdohZE[&kk&OY.\.BDRYXL`a3AdG82Tm>B+TQP'",0nW@?J<[%@K+V.:n.kSI*'5To0EicEfJ"!GT4VGd%'C#M[!Ju$aEiI1_To#'K&TKYJ,7hIH=1SQst7$bo2WnFM[.F,oa",e.^g&P'R8l1@4PQ%8<g/`cSoVuYTr@Z3g1*PQ@1rf2UCL@"+&dlA]61Hd$W%JiUkA\ZiArmn1>Sq4Oh?%>\,\RV@X;rT?S(0?:$%iJM_PXbdYM#?9D$L%90d.u!s6#(,T#,lR=%Km\g3GBnbdUBqlP]c@ngni7DnaM+0OG1>@7V'i./NhS*q(R%QCau,pI"PHs4(EBSl_<ciNU?DbQfMIgECn%8@^\@qJ,_O]'+NPs5MGP#fU62Wl%Jqb@GUK2$].Yp$l=FT0'!N@1Cr,LeM::/^;`#J7U6&8b*:O9&re\3LMj#()/Ub<=7imj6ah5%5<7Ip=i1=O(9uaKDegChQR6UF*t.b%Ms3h"Pj101\(T;W`juC1a>:IJ@Z5$+WO@TAojP`#>p.N]JQ-H-m^&I#S1+0aIE@M-j+Wm^%d[W6=LMrPA'\A.g38Icn]()8&>V0]dOZVTH"j1$!Mn5I.p))o/AD,Ej^O1]_n8K]bjGV3)pi-IN;XG5aL5c<<dH.as-.WW[$%k+0%[8nU9`GAY=W/nW$US>57Z]Vq]mlp+P[Q,AaWe-NVEj@S:gL;Z!$(ME]lpNd[>;IH-7C<^tQol\]QqX(gjrU*gH3No>5Y3jp'_,rT%G8W#\@*NT5,C]3j`sqST?Put0#?8u#4;hWPrL>Yqs(@3,3h-`oLBm2qq/CR@:(#]ko'f?9d&jj4BnG8gZDj*\A_FDA<.OKY/N_Z`%8n(h2,Nn#60",KV4T4jc"l>*TEtS)l;2)^I<EnNmgs(YKV8*9'jhCd^-W&[-bgF`hOoVf`d6#,sCloU^2!@ec!h&r(NIc)d-K1K=%0E\1cne>-1nEcmTVtNCt2QE;>+aec1\"n\(kc6;$GuO5SIQ/oTfa4re6\HCC`@`[Y5`Ca47YAS;pXg@=GpXBBdlPnE5%V:;\aATu%b`OT$n4[l2Kr<3!4aH!*aR.3H@1T/LCYJ8T?$o2".%ANi>o's&,6,W]"VU&LGq\$]V\Q%/:%N_eS70`Jll3:*RZP3;R.H<!13/%F%r(3su6hqdK9U2`gD'SNgjdNe5n[umKdht,mj@g%ge4Ra]U/>UNKFrGFASVf<*#)c6++laE:+u3G<sN<SQ+>TA>s4>>"?/Cb:</OW%b&GLoO!<ZUi.ZtXeYs3dpodKp>Sa01)j]>6_e_+H#%8nieh2u.]F_\HSY5kR`5(q-7ZrNiM*K/[!1)4XH.-^Ok`X4.4YGER6G:4V%\)H+A-J7;r]Y)]\Y3pptQfto(0S-;cE63BFp*u[E!0UfZ$b4qGd@G-"d,a+L4@Y@gE2A;r5u(PlHrMO]1f)?%BP)V$ZuDqOcip:\%h;k0T]BGmM3c_N[]nJ[3(']+o(5U2$kc;d'I?=Et9uT/HdeiDh`-"!DB!4rR5dQ*g;nVG'l[Waa.>t$-7:eE4>Ad>TQu#]rX<7l*%"7QVD*94rjO(bV*[ij_;*nk"qebJHfR?9>>iY&mc""=65!l-/<*6TQcd(YE#9+rp6R.%K@_l,ql%MtS'psYC/6%]]l'(.)S"`jZt%hDa=`l$H"XmP@C)q&aobbmmbQ;O$:9(+ZFWlLI^OTWA>?/_0)YopAb+@g#h;fIhWG#uSR&e)E(5Xrt>TMMC<Y2!I#p*U+Y_0mc@,%OkNWE7dB\Zl7,dR]01#-A1+nHY?"96^g'GH$!Z2TcPito/f3pSlDKos1G7;oH\]_R:?oL:)>1Sqk&hs%!15HWL2'K64tQ\5V;d$d%:l6L[p0'bF5,PE&--GgiO$6UK-qr1JNs@I^F+/sC=2[-qg+QXO>kgV";T&aC5o0gg*O"IU?t9)l6NV0efl4H;]bkNNXU:Qtqr?uX%qPL(Ch:;dJ@\%R@#uAJQ*r=5oCP)fA@3Jup_=KTrn%$i,_u?u'cb7df@0U'\):[asZJh4W.65h;^*C`?-17T5!]ghPBXV@%-YNbl%3c<5Qa>jpc`N);EE#t(I+(WWleILg#(0H@R41VD:_*38ATe^#<'Q4(gUH4eW@0Kr,kK4jV\=ri:]KnsCQdn)J<8Hl>&B:/'`(nN?%Mt^Y^c9;PbBRT'+/7=N4RIF]I?eW5JrI'`#$f#C#F9aB'dQit2G?10^_Fp?:"O`UDh_I\^M.T3cX@Zr)6R9c&S$gEb\oPHA3h6at%mA?P6IU&)OgoOEi1S[[_,\t!@hhX]hBU'>3E+M`.G=>%_]%n%jL]\$+!0p4X>IU@rDD1M.PDoiY4Q8)/Yb>SK2"hX(cE]]E'qti+%Yc^%B!M)8odO&6G!-QHkWjF6n[iHet1tdHmUI"XEF\j:<m&F?m"(5+a,#"<,IAM<d*=(!A.2Ag8UeWW+H4t8M7g-.WUGAcZA\Di3%&Yo^+"*R(]Xc;pEkigua6`i,4j%ZOdi$sjmV!=).Y+N'r\kDmu%%^?H^atJ9]/.1V^;$98pF5-NOuN'MVb3n-,ZhUNSt[[j("kAt%jWee^$:jR(nYcIFF!It)*'gNq"pLpGbL`EQ=SAWn[@gN]eVnbCm4cCGrX35WpRlLSYSe&<V2A6j]*)WiPOf"JZDL`Jn]2U7[Ah@k%G]7hEEj5X*C++Ce/+4o\hmWJHptU/k<+HJ\+pn<+W?-kq:dG6M5\I.KN[]Y3LU3Ssg/h/Tr,nL7qSdKAkZ,)FJVHn4/!o6\,TKG#%'i7d2&246#$Y/2+CHB<s_QQ(*Wj3#.;D:p5;EqMDX4Q\t7]Y5LMqLre>@a!aHA>&!=<_F"$Wf$@Q)\/J\VQ1*K&pa.-b]Y4M%eKi%d@\Z,i07o$[sb_[(C_M@DRDnsJLs!`fCIY=*b3PjL81d6lj-8.S\ED;C3)DFBTj8'<\5h*YrRn^<A!o=@i&91)T/sFSh)2C3/H!A%<EtnLphE0]rGJ9-<1T^&0-F<9G$2/%UiqW:is9i97qiE(pAi?Y%?uoT$LuQ`0/;F<ij^&Hm!+,YR:](G81<bGW:%gm.Zl=W6T@8S%r:H_;-eCh?S^T3fe(Gk(\;?a0Rf&Of"c,Pbb4(X4,1lLNK-5qBPIKRtF5G__hcNCRQebsagihPAcb`Q&9h$bc9U&2&GIN+`0*.kq%-SQ,7fhAIO'R@p2)`pA%fNE(=Y3pBrPh^nK1q+0686-h@P_FK;S`VH4&i>'D)_*-`4Drnk;ihV^JC/"9X>hO?BqoA0MNMPj3g2[a%cmbhNkrHgO9tl5"bpYboZ#?oMRTW1h9_DR_ZqnF.+Su[$;E/]j7fPj<a^?GKc3$3pQZNZmVF(?H1fTiM#Er)3L[u,:"e3e6R;QRR%*0b._n.9LbRH0YYk:pft3O4;$:.5u/aMk\abEF]Wk;LGM2I].1s$.WQ:'L#uQ]^!g>6Jjl1&HX'>[^8M`tbhr1l(H<cQ3FTfOP1C%[N.Yo'_.U+;5>,pVN'Gh7k93k2MmO9V<p<%PL'j9j?SNkb*1J,JAn$&Dca+5:+%N2[V(^geu,I!8@bI"Z9;IbS.=^K):06[JNe+<%jO9Hlg*9SuD>,s6<(Cfd1FPW96"HU>>\cO5m#R7ETKA58mNYTo\p\/ZCfgk?gK711?L!H`:WdO`'f$<"HCt1n?oeBGM*>QR<WU2j%6[%t;Qjjc`El`g6FkP37Ahap'F7PFACs'DlBedLc0'3$AIGR9Ij<C;>#D*mi\Mju3K3cA_Oj@-^0IVrA17@M`gOcIk'Po/`!ocq#%Qo:C'm-^PnrpXu>00:Qt!9r^l7k#7<`hn\Crk*mgRq.4Z%E#8\c02&VMqN8#X>mBCk5>5L.4Ib8\KdZ)6nsFe=VE[pR!4\?loJ+1%a=dKkXL>5+@-<4a&b.$*lk(f@i&]tUNFf>OR*0al4-F*mEg`(frM/Pc8p5oL2F8n/H8-^qPbi,/jSJsIoA2h4?JC/jNgT+ofJ3<b%VQk0]iM\BYB'*4`'h8DgE$(A_RXNQ;l+'?F/u&j_>>]I(/TBZP'rrM$p7^;6CI))$l*mFKN%D+UBCCZAnf=%&P9#k3gQcE1"p`(m%<?EhN<ht&3?'PGJOm2'iU4q>Vb(1QFU32.13$n*`GrLst9HaP7`o;@$L!NuigR%s5j]DKY]ANY\o7-`)j6+2Vpqq;?rT!3n^*"8t%Nj$4poCq-*^]+*(J*^PBq"D0=J,9!,++F-K+9(ZrfDkdHo8dh)q>-_dVWFoZ^S_&%j58W%PtjP^pZK<jjkkPgb8lF+5&^7pn%ZEl%YAn?nIt%"^GQ79tTDn])?bZO9%tFBQj7+40J,]!$n*iVXpg:3(Id(3hrL:"jkC8!WdiZ=%lM#cjrq2n5ppWJ9pQ+cmqPSi>nuH-r%O73)=rP/:&h-Zf3s7GD+J,er'n%X>G_[h"4pOBgSjm-9&qYoqJs7k(;?iU,o5Q5"4f-A]@=24Ups8Loir'(oE8Qc~>%AI9_PrivateDataEndII*¸i?ÑÑÑÑðÑÑÑÑÑÑÑÑ99JK¼¼¼Ñ¾ÑÑÑÑÑÑ²*Ñ¼¼±ÑÆ¼¼k³µI0