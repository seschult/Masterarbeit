%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 8.0.1%%For: (Tom Nakat) (HAAK & NAKAT)%%Title: (MNRV_s.eps)%%CreationDate: (5/17/00) (2:44 PM)%%BoundingBox: 225 350 370 495%%HiResBoundingBox: 225.4175 350.71 369.4492 494.7388%%DocumentProcessColors: Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Black&White%AI3_IncludePlacedImages%AI7_ImageSettings: 1%%CMYKCustomColor: 1 0 0.47 0.3 (PANTONE 328)%%CMYKProcessColor: 1 1 1 1 ([Passermarken])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () %AI3_TemplateBox: 298 421 298 421%AI3_TileBox: 249 -312 787 469%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 155.9055 155.9055%AI5_RulerUnits: 1%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: 150.5 500.5 6.35 1905 1029 18 0 0 7 43 0 0%AI5_OpenViewLayers: 7%%PageOrigin:249 -312%%AI3_PaperRect:-29 812 566 -30%%AI3_Margin:29 -31 -28 30%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI7_Thumbnail: 128 128 8%%BeginData: 16204 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD35FFA87D52522727FD0BF852277D52A8A8FD64FF7D7D27FD1AF8%2752A8FD5DFF7D52FD06F82752527D7DA8FD0AFF7DA87D7D2727FD06F827%7DA8FD55FFA85227FD05F85252A8FD18FFA87D2727FD04F8277DA8FD50FF%7D52FD04F8277DA8FD20FFA87D27FD04F827A8FD4BFFA87DFD05F87DA8FD%27FF5227F8F8F82752FD48FF5227F8F8F87DA8FD2DFF5227F8F8F87DFD44%FF7DF8F8F82752FD13FFA8A87DA87D7D52A87DA87DFD13FFA87DFD04F852%FD40FF7D27F8F8F8A8FD0FFFA87D522727FD0FF852527DA8FD0FFF7D27F8%F8F8A8FD3DFF27F8F8F852FD0DFF7D7D27FD08F8FD0927FD09F82752A8FD%0DFF7DF8F8F827A8FD39FF7DF8F8F852A8FD0BFF7D52FD05F827277D7DA8%FD08FF7DFD05FFA8A85252FD05F82752A8FD0CFF52F8F8277DFD36FFA827%F8F8F8A8FD0AFFA852FD05F8527DFD04FF527DFD07FF7DF8A8FD09FFA87D%27FD05F852A8FD0AFFA827F8F827A8FD33FF7D27F8F852FD0AFFA827FD04%F8527DFD07FFF852FD07FF7DF8FD08FF7DF8FD04FFA85227F8F8F8527DFD%0AFF7DF8F8F8A8FD31FF52F8F827A8FD09FF7D27F8F8F8527DFF7DFD08FF%2727FD07FF52F8FD08FFF827FD07FF7D27FD04F87DFD09FFA827F8F852FD%2FFF27F8F852A8FD08FFA827F8F8F852FFFFFF7DF87DFD07FF52F8FD07FF%5227FD07FF7DF87DFD07FF52FFA852F8F8F8277DFD09FF52F8F852FD2CFF%A827F8F87DFD08FFA852F8F8F852A8FD05FFF827FD07FF7DF8A8FD06FF27%27FD07FF52F8FD07FF27F87DFFFFA852F8F8F87DFD09FF7DF8F827A8FD2A%FFF8F8F8FD09FF7D27F8F852FD08FF7DF8A8FD06FFA8F87DFD06FF5227FD%07FFF852FD06FF7DF852FD04FFA8F8F852FD0BFFA827F827A8FD27FFA8F8%F827A8FD07FFA8F8F8F8277DFD09FFA8F827FD07FFF87DFD06FF277DFD06%FF52F8A8FD05FF7DF827FD04FFA8F8F852FD0DFFA827F8F8A8FD25FFA8F8%F827FD08FF7DF8F8F87DFF7DF87DFD08FF52F87DFD06FFA8A8FFFFA8527D%7D7D527D7DFD04FF7D7DFD06FF27F8FD04FFA8F8F827FD0FFFA827F827A8%FD23FFA8F8F827FD07FFA852F8F827A8FFFFA827F8A8FD08FFF852FD04FF%5252FD0FF827277D7DFD04FF27F8A8FD04FFF8F827FD11FFA827F8F8A8FD%21FFA8F8F827FD08FF27F8F852FD06FF27F8A8FD07FFA8FF7D2727FD09F8%27F827F827FD09F8277DFF7DA8FD04FF27F8F8FD14FF27F827A8FD1FFFA8%F8F8F8FD07FFA8F8F8F87DFD07FFA8F827FD06FF7D27FD06F827277D7DFD%0AFFA85252FD07F8277DFFFFFF27F8F8A8FD14FFA827F8F8A8FD1EFF27F8%27FD07FFA827F827A8FD09FF7DF827FFFFFF52FD06F852FD16FF5227FD05%F85252F8F8A8FD17FF27F827FD1DFF27F8F8FD07FF7DF8F827A8FD0BFF7D%7DA852FD05F87DFD05FFA852522727FD09F827527D7DFD05FF5227FD05F8%7DFD18FFA8F8F827FD1BFF52F8F8FD07FF7DF8F827FF7DF87DFD0AFF52FD%04F8527DFFFFFFA87D27FD14F8527DFD05FF27F8F852FD1AFFA8F8F852FD%19FF7DF8F87DFD06FFA8F8F827A8FFA852F827A8FD06FFA8FD04F827FFFF%FFA87DFD06F8277D7DA8A8FD06FFA87DA85252FD05F82752A852F8F8F8FD%1CFF7DF8F87DFD17FFA827F852FD06FFA827F827A8FD04FF7DF8277DFD04%FF52F8F8F852FFFFFFA852FD04F8527DFD13FFA87D27FD04F827525227FD%1DFF52F8F8FD17FF27F827A8FD05FFA8F8F827A8FD07FF27F827FF7DFD04%F87DFFFF7D27F8F8F8277DFD19FFA87DF8F87DFFF87DFD1EFFF8F827FD15%FF7DF8F8A8FD06FF27F827FD0AFF7DA87DF8F8F852FFFFFF52F8F8F852A8%FD1CFF5227FFFF7DF8A8FD1FFFF8F87DFD13FFA8F8F852FD06FF52F8F8A8%FD0BFF27F8F8F87DFFFF7DF8F8F852A8FD1BFF5252A8F8A8FFFF52F82727%FD04F852FD19FF7DF8F8A8FD12FF27F827FD06FF7DF8F87DFD0BFF27F8F8%27FFFFA852F8F827A8FD1BFFA8F827F85252FFFFA8F8F8277DA8FFA8277D%FF5227F852FD15FF27F827FD11FF7DF8F8A8FD06FFF8F852A8277DFD08FF%F8F8F827FFFF7DF8F8F852FD1CFF7DF87D7DF8F8A8FFA8F827A8FFFFFFA8%27F87D27FD04F8A8FD14FFA8F8F87DFD10FF27F852FD06FF27F827FF7D27%F82752FD05FF27F8F852FFFF7DF8F827A8FD1CFFA8F8FFFFA8F827FFA8F8%27FD04FF7D27FD05F8527D2727FD15FF52F8F8FD0FFF7DF8F8A8FD05FF52%F8F8A8FFFFFF7D27F8F8277DFF27F8F852FFFF27F8F852A8FD1DFFF87DFF%FF522752A8F827FFFFA87DF8F87DFFF8F8F87DFFFF2727FD16FFF8F852FD%0EFFF8F87DFD05FFA827F87DFD06FFA87DF87D52F8F852FFFF52F8F87DFD%1CFF7DFF5252FFFFA8272727F8F8F827F8F8277DFFFF52F827FFFFFFA8F8%7DFD16FF7DF827A8FD0CFF52F8F8FD06FF52F827FD0AFF7DF8F827FFFF27%F8F87DFD1BFFA8F8F852F87DFFFF52F8F8F827F85227F87DFFFFFFF8F827%FD04FF27F8FD18FF27F852FD0CFF27F87DFD05FFA8F8F8A8FD0AFFF8F827%FFFF52F8F87DFD1BFF7DF87D527DF8FFFF7DF82752FD04FF2727FFFFFF27%F87DFD05FFA82752FD17FF7DF8F8FD0BFF7DF827FD06FF27F852FD0AFFF8%F8F87DFF7DF8F87DFD1BFFA8F87DFF7D2752FF7DF827A8FFFFFFA82727FF%FFFF27F87DFD07FF7DF852FD17FFF8F852FD0AFFF8F87DFD05FF7DF8F8FD%0AFF52F8F87DFF7DF8F852FD1CFFF87DFFFF2727527DF852FD04FF7D2727%FFFFA8F827A8FD09FF52F8A8FD16FF7DF827FD09FF7DF8F8FD06FF27F852%FD0AFFF8F8F8FFA8F8F852FD1CFF7D27FFFFFFF8F827F827FFA87D52F827%7DFFFFA8F8F8A8FD0BFF2727A8FD15FFA8F8F87DFD08FF52F852FD05FFA8%F8F8FF522752527DA8A8FFFFF8F8F8FFFF52F827FD1AFFA827A8277DFFFF%7DF852FD05F82752FD05FFF827A8FD0DFF2727FD16FF52F827FD07FFA8F8%F8A8FD05FF27F852FF525227FD04F87D52F8F87DFF7DF8F8A8FD19FF7DF8%F87DF8FFFFFFF852F827527D7D7DF8FD04FFA8F8F8A8FD0FFFF8A8FD16FF%F8F8A8FD06FF7DF827FD05FFA8F8F8FD07FFA8A8FFF8F852FFFFF8F852FD%19FF7D27A87DF827FFFF272727A8FD04FF277DFFFFFFA8F827A8FD0FFFA8%27A8FD16FF27F87DFD06FF27F87DFD05FF52F852FD09FF52F8F87DFF27F8%F8FD19FFA8F87DFF7D2727FF27F8F8FD05FF2727FFFFFFA8F8F8A8FD0CFF%A87D5227F8F8FD17FF52F827FD06FFF8F8A8FD05FFF8F87DFD09FFF8F827%FFA8F8F8A8FD19FF5252FFFF7D275227F827FD04FFA8F852FD04FF2727A8%FD0AFFA85227FD06F87DFD17FFF8F8A8FD04FF52F827FD05FF7DF8F8FD09%FF27F8F8FFFF27F852FD19FFA8F8FFFFFF2752F8F827FFA8A85227F87DFD%04FF27F8A8FD08FFA852FD06F827F8F8F87DFD17FF27F87DFD04FF52F87D%FD05FF52F852FD09FFF8F852FFA8F8F8A8FD17FF52A85252FFFFA8F87D52%F827F8F8F8527DFD05FF52F87DFD07FF7D27FD05F852A8FFFF27F8277DFD%17FF7DF827FD04FFF8F8A8FD05FFF8F87DFD08FF7DF8F87DFF27F827FD17%FFF8F8F8277DFFFF52277D27F8F82727F87DFD05FF52F87DFD06FF7DF8F8%F8527DA8F8F87DFF7D27F8F8F8FD18FFA8F8F8FFFFFFA8F8F8FD05FFA8F8%F8FD09FF27F8F8FFA8F8F8A8FD16FF2727FFF827A8FFA8F82727A8FFFFFF%7DF8FD05FF7DF852FD05FF7D27F8F87DFFFFFFA8FD06F8FF2727FD19FF27%F8A8FFFF7DF852FD05FF7DF852A8A8527D272727F8FFF8F852FF7DF827FD%16FF52F8A8FF27277DFFF8F87DFD04FFA8F87DFD04FF7DF852FD04FFA827%FD04F8FD04FF27F85227527DFFFF7DF8A8FD18FF27F852FFFF27F87DFD05%FF27F87D7DF8F8F82727527D7DF8F8FFFFF8F87DFD15FFA8277DFFFF5227%A8F827A8FD04FFA8F87DFD04FFA82727FD04FF7DFD05F827FFFFFF52F827%FD07FF2752FD18FF7DF852FFFFF8F8A8FD05FFF8F8FFA8FD07FFF8F8F8FF%A8F8F8FD16FF7DF8FFFFFFF827F8F8A8FFFFFFA852F87DFD04FFA8F827FD%04FF52F8F8F87D7DF8F85227F8F827A8FD07FF52F8A8FD17FF7DF8F8FFFF%F8F8FD05FFA8F827FD09FF27F87DFF7DF852FD14FFA8FF277DFFFFA8F87D%2752A87D52F82752FD06FF27F8FD04FF52F8F852FFFF7DFD05F87DFD0AFF%F87DFD18FFF8F8A87DF8F8FD05FF52F827FD09FFF8F87DFF27F852FD13FF%7DF87D277DFFFF7D27A82727F827277DFD07FF52F8A8FFFFFF52F827A8FF%FFFFF8F8527D7DFD0CFF5227FD18FF27F8A87DF852FD05FF7DF87DFD08FF%52F8F8FFFFF8F8FD13FFA8F82727F8A8FFFFF87D27F8FD0427F8FD06FF7D%F87DFFFFFF52F827FD04FF7DF827FD09FFA8FD05FF7DF8A8FD17FF27F852%52F852FD05FF27F87DFD08FF27F827FFA8F8F8FD12FFA82752FFF8F8A8FF%27F8F87DA8FFFFFFF87DFD05FFA8F852FFFFFF7DF827A8FFFFFF7DF8F8A8%FD06FFA852F8F8F8A8FD04FFF8A8FD17FF7DF85252F87DFD05FF27F8A8FD%08FFF8F827FF7DF827FD12FF7D27FFFF5227A8522752FD05FF5227FD06FF%F827FFFFFFA8F827FFFFA8A852F8F8A8FD06FF7D2752A8FFA852FD04FF52%FD18FF7DF82727F87DFD05FFF8F8FD06FFA87DFFF8F87DFF52F87DFD12FF%F8A8FFFF2727F8F8F8FD05FF52F8A8FD05FF27F8A8FFFFA8F8F8A8FFFF27%F8F827A8FD06FF2727A8FFFFFFA8FD05FF27FD18FFA8F82727F8A8FD04FF%A8F8F8FD04FFA827F8F8FFF8F87DFF27F87DFD11FF7D27FFFFFF2752F827%FD04FF7DF827A8FD05FF7DF8A8FFFFFFF8F8F8A8A852F87DA8FD06FFA827%7DFD04FFA852FD05FF277DFD17FF7DFD04F8FD05FFA8F827FFA827F8F8F8%52A8FFF8F8FFFF27F8A8FD11FF5252FFFFFFF852F8A87D7D27F8F87DFD06%FFA8F852FFFFFF27FD07F8A8FD06FF7D27A8FFFFA87D27F8F8FD05FF5227%FD18FFFD04F8FD05FFA8F827FFF82752A8FD04FFF8F8FFFFF8F8A8FD0FFF%277D277DFFFFA8275252272727527DFD08FF2727FFFFFF7DFD07F827FD0B%FF7D27F827F87DFD05FFA8F8A8FD17FFFD04F8FD05FFA8F827A8A8FD06FF%52F8F8FFFFF8F8FD0FFF2727F8277DFFFF522752F8F82727F8F8A8FD06FF%7DF8A8FFFFA8F8F8F87DF8F852F8F8A8FD09FF52F827A8FF2752FD06FF27%27FD17FFFD04F8FD05FF7DF827FD08FF7DF827FFFFF8F8FD0EFF7D27FF52%277DFFA8F82752A8FFFFFF7D27FD06FFA8F87DFFFFFF27F827A8FF52F8A8%7DF852FD07FFA8F8277DFFFFFF277DFD06FF7DF8A8FD16FFFD04F8FD05FF%A8F827FD08FF52F8F8FFFFF8F8FD0DFFA8F87DFF7D27F8FFF8F8A8FD04FF%A8F8A8FD06FF2752FFFFFF52F8F87DFFFF7DF8A8FF27F8FD05FF52F8F8F8%527D525252F87DFD07FFF852FD16FFFD04F8FD05FFA8F827FD08FF7DF827%FFFFF8F8FD0DFF7D27FFFFFFF8F8F827FD06FFF87DFD06FF5227A8FFFFA8%F8F87DFFFFFF27F8A8FF27F8FD06FFA87D52522752F82727A8FD07FF7DF8%FD16FFFD04F8FD05FFA8F827FD08FF52F8F8FFFFF8F8FD0DFF277DFFFFFF%F8F8F87DFFFFFFA87DF87DFD06FFA8F852FFFFFF27F852FFFFFF27F8F8FF%FF52F8FD17FFA8F852FD15FFFD04F8FD05FFA8F827FD06FFA8527DF8F8FF%FFF8F8FD0DFFF8A8FFFFFFF8277DFFA8A8522727A8FD07FF2727FFFFFF7D%F8F8FFFFFF52F827A8FFFFF827FD18FF5227A8FD14FFFD04F8FD05FFA8F8%27FD04FFA852F8527DF8F8FFFFF8F8FD0BFF7DFFF8FFFFFF7D27FD05F852%52FD07FFA852F8A8FFFFA8F8F87DFFFF27F827FFFFFF52F827FD19FFF87D%FD14FFFD04F8FD05FFA8F8F8FFFFFFA827F852FFFFF8F8FFFF27F8A8FD09%FF7DF852F8FFFFFF5252A85227F82727F8F8FFFFFF7D27F8F8F827FFFFFF%52F8F87DFF7DF852FFFFFFA8F8F8FD1AFF52F8FD14FFFD04F87DFD05FFF8%F8FFFF52F8F8A8FFFFFFF8F8A8FF27F87DFD08FFA8F852F8F8A8FFFFF827%F8527DFFFFFF2752FFFF52F852FFFFA82752A87DF8F8F87DFF52F8FFFFFF%A8F8F852FD1AFF7DF87DFD12FFA8F8F852F8A8FD05FFF8F8FF27F852FD05%FFF8F87DFF52F852FD08FF5252FF522752FF52F827FD05FFA8F8A8FFA8F8%7DA8522752FF2727F8F87DF852FF52FD04FF27F827FD1CFF2727FD12FFA8%F82727F87DFD05FFF8F87D527DFD06FFF8F852FF52F852FD08FFF8A8FFFF%F8F852F8F8FD05FFA8F852FFFF2727A8F8FFA8277DA8F8F827FFF852FD05%FF7DF827A8FD13FF27A8FD07FFA8F8FD12FF7DF8277DF87DFD05FF52F87D%FD08FF27F827FFA8F827FD07FF7D52FFFFFF2727F827FD05FF7D2752FFFF%FFF8A852A8FFFF527DFF27F8FF7DF87DFD05FF52F827FD14FF27FD09FFF8%A8FD11FF52F85252F827FD05FF52F852FD08FF52F8F8FFFFF8F8A8FD06FF%277DFFFFFF277DF8A8FFFFA87D27F852FFFFFF52F8FF27FFFFFF7D7DFF52%F8A827F8FD06FF7DF87DFD14FFF8FD05FF7DFFFFFFF8A8FD11FF52F87DA8%F827FD05FF7DF852FD08FF7DF8F8FFFF27F8A8FD06FFF8A8FFFFFF5252F8%2752F8F8277DFD05FF7DF8FF27FFFFFF27A8FFA8F8F8F827277DFD04FF52%F87DFD13FFA827FFFFA827F87DFFFF7D27FD12FF27F8A8A8F8F8FD05FFA8%F8F8FD07FFF8FFF8F852FF52F827FD05FFA8F8A8FFFFFFF8A87D27FD05F8%52FD04FF52F8FF27FFFFFFF8FFFFFF27FD05F87DFFFFFF27F8FD15FFF852%272752FFFF7D2752A8FD12FFF8F8FFFFF8F8A8FD05FFF8F8A8FD05FF2727%A827F852FFA8F827FD04FFF82727A8FFFFA82727F852A8A8FFFF5252FD04%FF7DF8FF27FFFFFF277DFFFFA8A8A8FF52F8F8525252F852FD15FF7D27A8%FFA852527DFD14FFA8F827FFFF27F87DFD05FF52F87DFD04FF27F87DFF52%F8F8FFFFF8F8A8FFFF5227272752FFFF52F852A8FD04FFA8F8FD05FF7DF8%7D7D52FFFFA87DFD07FF7DFD04F827A8FD18FF7D27A8FD16FF52F827FFFF%52F852FD05FF7DF827FFFFFF52F87DFFFFFFF8F87DFF52F827FFA8F8A8FF%F8F8A8FFF852FD06FF277DFD06FFF852A827A8FD0CFFA852A8FD1AFFF87D%FD17FF52F87DFFFFA8F827FD06FFF8F8A8FF27F852FD04FF27F827FFA8F8%F8A87D27FFFF52F852F827FD05FFA8F827FD07FF27F8A8A82727FD28FF27%7DFD17FFF8F87DFFFFFFF8F8FD06FF27F8A87DF852FD05FF52F8F8FFFF52%F87D27A8FFFFA827F8F8A8FD04FF7DF852FD07FFA8F8F827FFFF7D52FD27%FF527DFD16FFA8F8F8FD04FF27F852FD05FF52F827A852FD07FFF8F827FF%7DF8F8F8A8FFFFFFF852F87D527D27F827A8FD08FFF8F852F827FFFF2752%7DFD25FF7DF8FD16FF7DF852FD04FF7DF827FD06FFF8F8A8FD08FF52F8F8%FFFFF8F8F8FD04FFF87D7D27525252277D52A8FD06FF27277D27F8F87DFF%7D52A8FD23FFA827F8F87DFD15FF27F87DFD04FFA8F8F8A8FD05FF27F87D%FD07FF7D7DF8F852FFA8F8F8FD04FFF8FF7D27F8272752522752FD05FF52%527DF8F827F8F8A8FD25FFA827A8A8F8A8FD14FFA8F8F8A8FD05FF27F87D%FD05FF7DF8F8FD07FFF8A827F8F8FFFF27F8FFFFFFA8F827277DFD05FFF8%A8FD06FF7D27F852FFA8F87DFFFFFFA8A8FD1FFFA852FFFFF827FD15FF7D%F827FD06FF7DF827FD06FFF8F87DFD05FF52F8A8FFF8F827FFA8F852FFFF%7DF827A8FD05FF2727FD06FF52F8F87DFFFFFF27F8A8FF7DF8FD1EFF7D27%7DFFFFFF27F8A8FD14FFF8F852FD06FFA8F8F8A8FD05FF52F827FD04FFA8%2752FFFF52F8F87DFF27F8FFFF2727A8FD05FF7D27A8FD04FFA827F827A8%FD04FF27F8F827F8F8A8FD1FFFA8527DFF7D27FD14FFA8F8F8FD08FF27F8%27FD05FFA8F8F8A8FFFFFF52F8FD04FFF8F827FFFFF85227F852FD05FF52%F8A8FFFFFFA852F8277DFD06FFF82727F8F8F852FD20FFA87DF8F8A8FD14%FF52F852FD08FFA8F827FD06FF52F827FFFFFFF852FD04FF7DF8F87DFFA8%F827F8FFFFFFA87DF827A8FD04FF52277DFD08FFF87DFF7DF827F87DFD21%FF2752FD15FFF8F87DFD09FF27F87DFD06FFF8F87DFF52F8A8FD05FF27F8%F87DFF52F8F8F827F8F8277DFD11FFF852FF7DF8527DF87DFD1FFFA8F8FD%15FF52F8F8FD0AFF7DF8F8FD06FF52F827FF2752FD05FFA8FFF8F8F8FF27%F8F852A8A8FD14FF2752FFFFF852FF7DF87DFD1EFF5252FD15FF27F87DFD%0BFFF8F87DFD05FFA8F8F87D7DFD06FF5227FFFD07F87DFD15FF52F8FFFF%52F8FFFF7DF852FD1DFF52F8FD14FF7DF8F8A8FD0BFF7DF827FD06FF52F8%F8FD07FF2752FF7DF8F8F87D7DF8F87DFD14FF52F8A8FF7DF8A8FFFFA8F8%52FD1CFF52F8FD14FF27F852FD0CFFA8F8F87DFD06FFF8F827FD05FFA8F8%52FFFF27F8F8FFFF7DF8F87DFD13FFA8F8A8FFFFF852FFFFFF7DF827A8FD%1AFFA8F8FD13FF52F8F8FD0EFF52F8F8FD06FFA8F8F87DFD04FFA8F8A8FF%FFF8F852FFFFFFA827F87DFD13FFF852FFFF2727FD04FFA8F8277DFD19FF%7DF8A8FD12FF27F87DFD0FFFF8F852FD06FF52F8F8A8FFFFFF52F8FFFFA8%F8F8FD05FFA827F852FD12FFF827FFFF52F8A8FD04FFA827F827FD18FF52%F8FD12FF52F827FD10FFA8F8F8A8FD06FF27F852FFFFFF5227FFFFA8F852%FD07FF27F87DFD11FF5227FFFFA8F8A8FD06FF27F827A8FD16FF2752FD12%FFF8F87DFD11FF27F827FD06FFA8F8F852FFFFF87DFFFF52F852FD07FFA8%F8F8FD11FF52F8FFFFFFF852FD07FF52F8F852A8FD13FF27F8A8FD11FFF8%F827FD12FFA827F87DFD06FF7DF8F87DA8F87DFFFF7DF87DFD08FF7DF852%FD10FF7DF8FFFFFF2727FD08FFA852F82752FD10FFA827F87DFD11FF52F8%F8FD14FF52F8F8A8FD06FF27F8F8A87DFFFFFF52F852FD09FFF827FD10FF%52F8A8FFFF27F8FD0AFFA827F8F852A8FD0BFFA852F8277DFD11FFA8F8F8%7DFD15FF27F827FD07FF27F8F8A8FFFFFF7DF87DFD09FFF8F8FD0FFFA827%F8FFFFFF52F8FD0CFFA852F8F8F85252FD05A87D5227F8F8A8FD13FF27F8%52FD17FFF8F827FD07FFF8F8F8FFFFFF7DF827FD09FFF8F87DFD05FF7D7D%FD0727F8F827FFFFFF7DF8FD0FFF5227FD09F8527DFD14FF52F8F8A8FD17%FFA8F8F87DFD06FFA8F8F827FFFFA8F827FD08FFA8F8F8FFFFA82727FD0B%F852A8FFFFFF27F8FD10FF5252FD04A87DA8FD17FF7DF8F87DFD19FF52F8%F8A8FD06FFA8F8F827A8FFF8F8A8FD07FF52F827FFFF5227527DA8FD0EFF%27F8FD10FF5252FD1CFFA8F8F852FD1BFF52F827A8FD07FFF8F8F8FF52F8%52FD06FF52F8F87DFD14FFA8F852FD10FFF8A8FD1BFFA8F8F827FD1CFFA8%27F827A8FD06FFA8F8F8F87DF8F8A8FD04FF52F8F8F87D7D7D52FD08277D%527D52A87DA87D52F8F852FD0FFF7DF8FD1CFF27F8F8FD1EFFA827F827FD%08FF27FD04F852FFFFFF52FD1BF827FD0FFF7DF8FD1BFF27F8F8FD20FFA8%F8F827A8FD07FF27FD04F87DFFFFF8F82727F8F8F852F8F87DA87DF8F87D%FFFFA852F8F8F827272752F8F8A8FD0EFF2727FD1AFF27F8F8A8FD21FFA8%27F827FD08FF52FD04F8FFA8F827FF27F8A8FFFFF8F8FFFFA8F8F8FD04FF%A8F8F8FD05FF27F852FD0EFF5227FD19FF27F8F8FD24FFA8F8F827A8FD07%FF7DFD04F8FFF827A8F8F8FFFFFFF827FFFF7DF8F8FD05FF27F87DFD04FF%27F87DFD0EFF27F8FD18FFF8F8F8A8FD25FFA827F827A8FD07FFA827F8F8%277DFD04F8FFFF7DF827FFFF7DF827FD05FF7DF827A8FFFFFFF8F87DFD0E%FF52F8FD16FFA827F8F8A8FD27FFA8F8F8F8A8FD08FF7DF8F87DFF52F8F8%FFFFA8F827FFFF52F827FD05FFA827F8F8527D27F8F8FD0FFF27F87DFD14%FFA8F8F8F8A8FD29FFA827F8F87DFD09FF52FFFFFFF8F87DFFA8F8F8FFFF%A8F827FD07FF52FD04F827FD10FF7DF87DFD13FF7DF8F827A8FD2BFFA827%F8F852FD0CFFA8F8F8A8FFF8F8A8FFA8F8F8A8FD07FF7DF852A8FD11FF7D%F827FD11FFA852F8F827FD2FFF52F8F827A8FD0BFFA827FD04F8A8FFFFF8%F852FD07FF7DF87DFD13FFF8F8A8FD0FFFA827F8F852FD31FF7DF8F8F852%FD0CFF7D52F8F8F8FFFF52F8F8A8FD05FFA8F8F8FD14FF52F852FD0EFF52%F8F8F87DFD34FF27F8F827A8FD0DFF52F8277D27F8F8277DA8A8A85227F8%F8A87D527D525227522752FD05F82727527DA8A8F8F8A8FD0BFFA827F8F8%52A8FD36FF52F8F8F852FD0DFFA852FD0527FD04F8FD1027FD0BF852FD09%FFA852F8F8F87DFD39FFA827F8F8F87DFD13FFA87DFD15FFA8A87D7D5227%277DFD08FF7D27F8F827FD3DFF7DF8F8F8277DFD36FF7DF8F8F8277DFD40%FF5227F8F8277DFD32FF7D27F8F8F87DFD43FFA87DFD04F827A8FD2CFFA8%52FD04F852FD48FF7D27F8F8F8277DFD27FFA87D27FD04F87DFD4CFFA827%FD04F82752A8FD20FFA87DFD05F8527DFD50FFA87D27FD04F827527DA8FD%18FFA87D5227FD04F8277DFD56FFA87D27FD06F827277D7DA87DFD0AFFA8%7D7D5252FD07F85252FD5DFFA85227FD19F827277D7DFD64FFA8A8525227%27FD0CF82727527D7DA8FD33FFFF%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 0%%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 26 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			(AI8_CMYK_CustomColor)			6 packedarray		} bind def		/findrgbcustomcolor		{			(AI8_RGB_CustomColor)			5 packedarray		} bind def		/setcustomcolor		{			exch 			aload pop dup			(AI8_CMYK_CustomColor) eq			{				pop pop				4				{					4 index mul					4 1 roll				} repeat				5 -1 roll pop				setcmykcolor			}			{				dup (AI8_RGB_CustomColor) eq				{					pop pop					3					{						1 exch sub						3 index mul 						1 exch sub						3 1 roll					} repeat					4 -1 roll pop					setrgbcolor				}				{					pop					4					{						4 index mul 4 1 roll					} repeat					5 -1 roll pop					setcmykcolor				} ifelse			} ifelse		}		def	} if	/setAIseparationgray	{		false setoverprint		0 setgray		/setseparationgray where{			pop setseparationgray		}{			/setcolorspace where{				pop				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace				1 exch sub setcolor			}{				setgray			}ifelse		}ifelse	} def		/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq{ begin		60		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	1 0 0 0 testCMYKColorThrough	0 1 0 0 testCMYKColorThrough	0 0 1 0 testCMYKColorThrough	0 0 0 1 testCMYKColorThrough	and and and	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0userdict /Adobe_ColorImage_AI6 known not{	userdict /Adobe_ColorImage_AI6 53 dict put } ifuserdict /Adobe_ColorImage_AI6 get begin/initialize { 	Adobe_ColorImage_AI6 begin	Adobe_ColorImage_AI6 {		dup type /arraytype eq {			dup xcheck {				bind			} if		} if		pop pop	} forall} def/terminate { end } defcurrentdict /Adobe_ColorImage_AI6_Vars known not {	/Adobe_ColorImage_AI6_Vars 41 dict def} ifAdobe_ColorImage_AI6_Vars begin	/plateindex -1 def	/_newproc null def	/_proc1 null def	/_proc2 null def	/sourcearray 4 array def	/_ptispace null def	/_ptiname null def	/_pti0 0 def	/_pti1 0 def	/_ptiproc null def	/_ptiscale 0 def	/_pticomps 0 def	/_ptibuf 0 string def	/_gtigray 0 def	/_cticmyk null def	/_rtirgb null def	/XIEnable true def	/XIType 0 def	/XIEncoding 0 def	/XICompression 0 def	/XIChannelCount 0 def	/XIBitsPerPixel 0 def	/XIImageHeight 0 def	/XIImageWidth 0 def	/XIImageMatrix null def	/XIRowBytes 0 def	/XIFile null def	/XIBuffer1 null def	/XIBuffer2 null def	/XIBuffer3 null def	/XIDataProc null def	/XIColorSpace /DeviceGray def	/XIColorValues 0 def	/XIPlateList false defend/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def/ci6image systemdict /image get def/ci6curtransfer systemdict /currenttransfer get def/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def/ci6foureq {	4 index ne {		pop pop pop false	}{		4 index ne {			pop pop false		}{			4 index ne {				pop false			}{				4 index eq			} ifelse		} ifelse	} ifelse} def/ci6testplate {	Adobe_ColorImage_AI6_Vars begin		/plateindex -1 def		/setcmykcolor where {			pop			gsave			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub			grestore			1 0 0 0 ci6foureq { 				/plateindex 0 def			}{				0 1 0 0 ci6foureq { 					/plateindex 1 def				}{					0 0 1 0 ci6foureq {						/plateindex 2 def					}{						0 0 0 1 ci6foureq { 							/plateindex 3 def						}{							0 0 0 0 ci6foureq {								/plateindex 5 def							} if						} ifelse					} ifelse				} ifelse			} ifelse			pop pop pop pop		} if		plateindex end} def/ci6concatprocs {	/packedarray where {		pop dup type /packedarraytype eq 2 index type		/packedarraytype eq or	}{		false	} ifelse	{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		_proc1 aload pop		_proc2 aload pop		_proc1 length		_proc2 length add		packedarray cvx	}{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		/_newproc _proc1 length _proc2 length add array def		_newproc 0 _proc1 putinterval		_newproc _proc1 length _proc2 putinterval		_newproc cvx	} ifelse} def/ci6istint {	type /arraytype eq } def/ci6isspot {	dup type /arraytype eq {		dup length 1 sub get /Separation eq	}{		pop false	} ifelse} def/ci6spotname {	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse} def/ci6altspace {	aload pop pop pop ci6colormake} def/ci6numcomps {	dup /DeviceGray eq {		pop 1	}{		dup /DeviceRGB eq {			pop 3		}{			/DeviceCMYK eq {				4			}{				1			} ifelse		} ifelse	} ifelse} def/ci6marksplate {	dup /DeviceGray eq {		pop plateindex 3 eq	}{		dup /DeviceRGB eq {			pop plateindex 5 ne		}{			dup /DeviceCMYK eq {				pop plateindex 5 ne			}{				dup ci6isspot {					/findcmykcustomcolor where {						pop						dup length 2 sub get						0.1 0.1 0.1 0.1 5 -1 roll						findcmykcustomcolor 1 setcustomcolor						systemdict /currentgray get exec						1 ne					}{						pop plateindex 5 ne					} ifelse				}{					pop plateindex 5 ne				} ifelse			} ifelse		} ifelse	} ifelse} def/ci6colormake {	dup ci6numcomps	exch 1 index 2 add 1 roll	dup 1 eq {pop}{array astore} ifelse	exch} def/ci6colorexpand {	dup ci6spotname exch	dup ci6istint {		ci6altspace		exch 4 1 roll	}{		1 3 1 roll	} ifelse} def/ci6colortint {	dup /DeviceGray eq {		3 1 roll 1 exch sub mul 1 exch sub exch	}{		dup /DeviceRGB eq {			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch		}{			dup /DeviceCMYK eq {				3 1 roll {1 index mul exch} forall pop 4 array astore exch			}{				3 1 roll mul exch			} ifelse		} ifelse	} ifelse} def/ci6colortocmyk {	dup /DeviceGray eq {		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore	}{		dup /DeviceRGB eq {			pop aload pop _rgbtocmyk 4 array astore		}{			dup /DeviceCMYK eq {				pop			}{				ci6altspace ci6colortint ci6colortocmyk			} ifelse		} ifelse	} ifelse} def/ci6makeimagedict {	7 dict begin		/ImageType 1 def		/Decode exch def		/DataSource exch def		/ImageMatrix exch def		/BitsPerComponent exch def		/Height exch def		/Width exch def	currentdict end} def/ci6stringinvert {	0 1 2 index length 1 sub {		dup 2 index exch get 255 exch sub 2 index 3 1 roll put	} for} def/ci6stringknockout {	0 1 2 index length 1 sub {		255 2 index 3 1 roll put	} for} def/ci6stringapply {	0 1 4 index length 1 sub {		dup		4 index exch get		3 index 3 1 roll		3 index exec	} for	pop exch pop} def/ci6walkrgbstring {	0 3 index	dup length 1 sub 0 3 3 -1 roll {		3 getinterval {} forall		5 index exec		3 index	} for		 5 {pop} repeat} def/ci6walkcmykstring{	0 3 index	dup length 1 sub 0 4 3 -1 roll {		4 getinterval {} forall				6 index exec				3 index			} for		5 { pop } repeat	} def/ci6putrgbtograystr{	.11 mul exch		.59 mul add exch		.3 mul add		cvi 3 copy put		pop 1 add} def/ci6putcmyktograystr{	exch .11 mul add		exch .59 mul add		exch .3 mul add		dup 255 gt { pop 255 } if		255 exch sub cvi 3 copy put		pop 1 add} def/ci6rgbtograyproc {		Adobe_ColorImage_AI6_Vars begin 		sourcearray 0 get exec		XIBuffer3		dup 3 1 roll 				/ci6putrgbtograystr load exch		ci6walkrgbstring end} def/ci6cmyktograyproc {		Adobe_ColorImage_AI6_Vars begin		sourcearray 0 get exec		XIBuffer3		dup 3 1 roll 				/ci6putcmyktograystr load exch		ci6walkcmykstring end} def/ci6separatecmykproc {		Adobe_ColorImage_AI6_Vars begin		sourcearray 0 get exec				XIBuffer3				0 2 index				plateindex 4 2 index length 1 sub {			get 255 exch sub						3 copy put pop 1 add						2 index		} for		pop pop exch pop end} def	/ci6compositeimage {	dup 1 eq {		pop pop image	}{		/ci6colorimage load null ne {			ci6colorimage		}{			3 1 roll pop			sourcearray 0 3 -1 roll put			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load			image		} ifelse	} ifelse} def/ci6knockoutimage {	gsave	0 ci6curtransfer exec 1 ci6curtransfer exec	eq {		0 ci6curtransfer exec 0.5 lt	}{		0 ci6curtransfer exec 1 ci6curtransfer exec gt	} ifelse	{{pop 0}}{{pop 1}} ifelse	systemdict /settransfer get exec	ci6compositeimage	grestore} def/ci6drawimage {	ci6testplate -1 eq {		pop ci6compositeimage	}{		dup type /arraytype eq {			dup length plateindex gt {plateindex get}{pop false} ifelse		}{			{				true			}{				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse			} ifelse		} ifelse		{			dup 1 eq {				pop pop ci6image			}{				dup 3 eq {					ci6compositeimage				}{					pop pop					sourcearray 0 3 -1 roll put					/ci6separatecmykproc load					ci6image				} ifelse			} ifelse		}{			ci6curoverprint {				7 {pop} repeat			}{				ci6knockoutimage			} ifelse		} ifelse	} ifelse} def/ci6proctintimage {	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store	/_pticomps _ptispace ci6numcomps store	/_ptiscale _pti1 _pti0 sub store	level2? {		_ptiname length 0 gt version cvr 2012 ge and {			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace			[_pti0 _pti1] ci6makeimagedict ci6image		}{			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace			[0 255] ci6makeimagedict ci6image		} ifelse	}{		_pticomps 1 eq {			{				dup				{					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put				} ci6stringapply			} ci6concatprocs ci6image		}{			{				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse				_ptibuf {					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc					_pticomps 2 add -2 roll					_pticomps 1 sub -1 0 {						1 index add 2 index exch						5 -1 roll						255 mul cvi put					} for					pop pop				} ci6stringapply			} ci6concatprocs false _pticomps			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse		} ifelse	} ifelse} def/ci6graytintimage {	/_gtigray 5 -1 roll store	{1 _gtigray sub mul 1 exch sub} 4 1 roll	/DeviceGray ci6proctintimage} def/ci6cmyktintimage {	/_cticmyk 5 -1 roll store	{_cticmyk {1 index mul exch} forall pop} 4 1 roll	/DeviceCMYK ci6proctintimage} def/ci6rgbtintimage {	/_rtirgb 5 -1 roll store	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll	/DeviceRGB ci6proctintimage} def/ci6tintimage {	ci6testplate -1 eq {		ci6colorexpand		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll		dup /DeviceGray eq {			pop ci6graytintimage		}{			dup /DeviceRGB eq {				pop ci6rgbtintimage			}{				pop ci6cmyktintimage			} ifelse		} ifelse	}{		dup ci6marksplate {			plateindex 5 lt {				ci6colortocmyk plateindex get				dup 0 eq ci6curoverprint and {					7 {pop} repeat				}{					1 exch sub					exch {1 0}{0 1} ifelse () ci6graytintimage				} ifelse			}{				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage			} ifelse		}{			ci6curoverprint {				8 {pop} repeat			}{				pop pop pop				{pop 1} 0 1 () /DeviceGray ci6proctintimage			} ifelse		} ifelse	} ifelse} def/XINullImage {} def/XIImageMask {	XIImageWidth XIImageHeight false	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	imagemask} def/XIImageTint {	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	XIType 3 eq XIColorValues XIColorSpace ci6tintimage} def/XIImage {	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	false XIChannelCount XIPlateList ci6drawimage} def/XG {	pop pop} def/XF {	13 {pop} repeat} def/Xh {	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		/XIImageHeight exch def		/XIImageWidth exch def		/XIImageMatrix exch def		0 0 moveto		XIImageMatrix concat		XIImageWidth XIImageHeight scale				/_lp /null ddef		_fc		/_lp /imagemask ddef end} def/XH {	Adobe_ColorImage_AI6_Vars begin		grestore end} def/XIEnable {	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put} def/XC {	Adobe_ColorImage_AI6_Vars begin		ci6colormake		/XIColorSpace exch def		/XIColorValues exch def end} def/XIPlates {	Adobe_ColorImage_AI6_Vars begin		/XIPlateList exch def end} def/XI{	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		cvi dup		256 idiv /XICompression exch store		256 mod /XIEncoding exch store		pop pop		/XIChannelCount exch def		/XIBitsPerPixel exch def		/XIImageHeight exch def		/XIImageWidth exch def		pop pop pop pop		/XIImageMatrix exch def		XIBitsPerPixel 1 eq {			XIImageWidth 8 div ceiling cvi		}{			XIImageWidth XIChannelCount mul		} ifelse		/XIRowBytes exch def		XIEnable {			/XIBuffer3 XIImageWidth string def			XICompression 0 eq {				/XIBuffer1 XIRowBytes string def				XIEncoding 0 eq {					{currentfile XIBuffer1 readhexstring pop}				}{					{currentfile XIBuffer1 readstring pop}				} ifelse			}{				/XIBuffer1 256 string def				/XIBuffer2 XIRowBytes string def				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}				/ASCII85Decode filter /DCTDecode filter				/XIFile exch def				{XIFile XIBuffer2 readstring pop}			} ifelse			/XIDataProc exch def						XIType 1 ne {				0 setgray			} if			XIType 1 eq {				XIImageMask			}{				XIType 2 eq XIType 3 eq or {					XIImageTint				}{					XIImage				} ifelse			} ifelse		}{			XINullImage		} ifelse		/XIPlateList false def		grestore end} defend%%EndProcSet%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)%%Version: 1.3 0%%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5_vars 112 dict dup beginput/_?cmyk false def/_eo false def/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_lineorientation 0 def/_charorientation 0 def/_yokoorientation 0 def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_shift [0 0] def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fontSize 0 def/_fontAscent 0 def/_fontDescent 0 def/_fontHeight 0 def/_fontRotateAdjust 0 def/Ss 256 string defSs 0 (fonts/) putinterval/_cnt 0 def/_scale [1 1] def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_hfname 100 string def/_hffound false def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_rgbf 3 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_rgbs 3 array def/_is null def/_os false def/_sc{} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def/_lobyte 0 def/_hibyte 0 def/_cproc null def/_cscript 0 def/_hvax 0 def/_hvay 0 def/_hvwb 0 def/_hvcx 0 def/_hvcy 0 def/_bitfont null def/_bitlobyte 0 def/_bithibyte 0 def/_bitkey null def/_bitdata null def/_bitindex 0 def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 100 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/initialize{	Adobe_Illustrator_AI5 dup begin	Adobe_Illustrator_AI5_vars begin	/_aicmykps where {pop /_?cmyk _aicmykps def}if	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/hswj{	dup stringwidth 3 2 roll	{		_hvwb eq { exch _hvcx add exch _hvcy add } if		exch _hvax add exch _hvay add	} cforall} def/vswj{	0 0 3 -1 roll	{		dup 255 le		_charorientation 1 eq		and		{			dup cstring stringwidth 5 2 roll			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			4 -1 roll sub exch			3 -1 roll sub exch		}		{			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			_fontHeight sub		} ifelse	} cforall} def/swj{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hswj } { vswj } ifelse} def/sw{	0 0 0 6 3 roll swj} def/vjss{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			gsave			false charpath currentpoint			5 index setmatrix stroke			grestore			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				gsave			2 index false charpath			6 index setmatrix stroke			grestore				moveto pop pop		} ifelse	} cforall	6 npop} def/hjss{	4 1 roll	{		dup cstring		gsave		false charpath currentpoint		5 index setmatrix stroke		grestore		moveto		_sp eq		{			5 index 5 index rmoveto		} if		2 copy rmoveto	} cforall	6 npop} def/jss{	_lineorientation 0 eq { hjss } { vjss } ifelse} def/ss{	0 0 0 7 3 roll jss} def/vjsp{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			false charpath            currentpoint			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				2 index false charpath				moveto pop pop		} ifelse	} cforall	6 npop} def/hjsp{    4 1 roll    {        dup cstring        false charpath        _sp eq        {            5 index 5 index rmoveto        } if        2 copy rmoveto    } cforall    6 npop} def/jsp{	matrix currentmatrix    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/sp{    matrix currentmatrix    0 0 0 7 3 roll    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/XR{	0 ne	/_eo exch ddef} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/_rgbtocmyk{	3	{		1 exch sub 3 1 roll	} repeat	3 copy 1 4 1 roll	3	{		3 index 2 copy gt		{			exch		} if		pop 4 1 roll	} repeat	pop pop pop	4 1 roll	3	{		3 index sub		3 1 roll	} repeat	4 -1 roll} def/setrgbfill{	_rgbf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_rgbf aload pop setrgbcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/setrgbstroke{	_rgbs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_rgbs aload pop setrgbcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/Xa{	_?cmyk {		3 npop k	}{		setrgbfill 4 npop	} ifelse} def/XA{	_?cmyk {		3 npop K	}{		setrgbstroke 4 npop	} ifelse} def/Xs{	/_gf exch ddef	5 npop	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setAIseparationgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XS{	/_gs exch ddef	5 npop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setAIseparationgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/Xx{	exch	/_gf exch ddef	0 eq {		findcmykcustomcolor	}{		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse		{			4 1 roll 3 npop			findcmykcustomcolor		}{			8 -4 roll 4 npop			findrgbcustomcolor		} ifelse	} ifelse	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XX{	exch	/_gs exch ddef	0 eq {		findcmykcustomcolor	}{		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse		{			4 1 roll 3 npop			findcmykcustomcolor		}{			8 -4 roll 4 npop			findrgbcustomcolor		} ifelse	} ifelse	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/XK{	3 -1 roll pop	0 eq	{		1 exch sub		3 {dup 3 1 roll mul 5 1 roll} repeat		mul 4 1 roll		K	}	{		1 exch sub 4 1 roll		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat		4 -1 roll pop		XA	} ifelse} def/Xk{	3 -1 roll pop	0 eq	{		1 exch sub		3 {dup 3 1 roll mul 5 1 roll} repeat		mul 4 1 roll		k	}	{		1 exch sub 4 1 roll		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat		4 -1 roll pop		Xa	} ifelse} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/XT {	pop pop} def/Xt {	pop} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def2{	mark	{		currentfile buffer {readline} stopped {			% assume error was due to overfilling the buffer		}{			not			{				stop			} if			endString eq {				cleartomark stop			} if		}ifelse	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer {readline} stopped {			% assume error was due to overfilling the buffer		}{			not			{				stop			} if			dup beginString eq			{				pop /layerCnt dup load 1 add store			}			{				endString eq				{					layerCnt 1 eq					{						cleartomark stop					}					{						/layerCnt dup load 1 sub store					} ifelse				} if			} ifelse		}ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	6 npop	7 2 roll	5 npop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{						/clipForward? true def						/Tx /pop load def			/Tj /pop load def						currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin								/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 4 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setrgbcolor{	3 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popend/XP{	4 npop} bind def/XD{	pop} bind defendsetpacking%%EndResource%%BeginResource: procset Adobe_cshow 2.0 8%%Title: (Writing System Operators)%%Version: 2.0 8%%CreationDate: (1/23/89) ()%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_cshow 14 dict dup begin put/initialize{	Adobe_cshow begin	Adobe_cshow	{		dup xcheck		{			bind		} if		pop pop	} forall end	Adobe_cshow begin} def/terminate{currentdict Adobe_cshow eq	{ end	} if} def/cforall{	/_lobyte 0 ddef	/_hibyte 0 ddef	/_cproc exch ddef	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef	{		/_lobyte exch ddef		_hibyte 0 eq		_cscript 1 eq		_lobyte 129 ge _lobyte 159 le and		_lobyte 224 ge _lobyte 252 le and or and		_cscript 2 eq		_lobyte 161 ge _lobyte 254 le and and		_cscript 3 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript 25 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript -1 eq		or or or or and		{			/_hibyte _lobyte ddef		}		{			_hibyte 256 mul _lobyte add			_cproc			/_hibyte 0 ddef		} ifelse	} forall} def/cstring{	dup 256 lt	{		(s) dup 0 4 3 roll put	}	{		dup 256 idiv exch 256 mod		(hl) dup dup 0 6 5 roll put 1 4 3 roll put	} ifelse} def/clength{	0 exch	{ 256 lt { 1 } { 2 } ifelse add } cforall} def/hawidthshow{	{		dup cstring		show		_hvax _hvay rmoveto		_hvwb eq { _hvcx _hvcy rmoveto } if	} cforall} def/vawidthshow{	{		dup 255 le		_charorientation 1 eq		and		{			-90 rotate			0 _fontRotateAdjust rmoveto			cstring			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow			0 _fontRotateAdjust neg rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			exch _hvay sub exch _hvax sub			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if			3 2 roll			cstring			dup stringwidth pop 2 div neg _fontAscent neg rmoveto			show			moveto		} ifelse	} cforall} def/hvawidthshow{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse} def/hvwidthshow{	0 0 3 -1 roll hvawidthshow} def/hvashow{	0 0 0 6 -3 roll hvawidthshow} def/hvshow{	0 0 0 0 0 6 -1 roll hvawidthshow} defcurrentdict readonly pop endsetpacking%%EndResource%%BeginResource: procset Adobe_shading_AI8 1.0 0%%Title: (Adobe Illustrator 8 Shading Procset)%%Version: 1.0 0%%CreationDate: (12/17/97) ()%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /Adobe_shading_AI8 10 dict dup begin put/initialize {	Adobe_shading_AI8 begin	Adobe_shading_AI8 bdprocs	Mesh /initialize get exec} def/terminate {	currentdict Adobe_shading_AI8 eq {	 end	} if} def/bdprocs {	{		dup xcheck 1 index type /arraytype eq and {			bind		} if		pop pop	} forall} def/X! {pop} def/X# {pop pop} def/Mesh 40 dict defMesh begin/initialize {	Mesh bdprocs	Mesh begin		/emulate? /AI8MeshEmulation where {			pop AI8MeshEmulation		}{			systemdict /shfill known not		} ifelse def end} def/bd {	shadingdict begin} def/paint {	emulate? {	 end	}{		/_lp /none ddef _fc /_lp /none ddef				/AIColorSpace AIColorSpace tocolorspace store		/ColorSpace AIColorSpace topsspace store				version_ge_3010.106 not systemdict /setsmoothness known and {			0.0001 setsmoothness		} if				composite? {			/DataSource getdatasrc def			Matrix concat			currentdict end			shfill		}{			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {			 end			}{				/ColorSpace /DeviceGray store				/Decode [0 1 0 1 0 1] store				/DataSource getplatesrc def				Matrix concat				currentdict end				shfill			} ifelse		} ifelse	} ifelse} def/shadingdict 12 dict defshadingdict begin	/ShadingType 6 def	/BitsPerCoordinate 16 def	/BitsPerComponent 8 def	/BitsPerFlag 8 defend/datafile null def/databuf 256 string def/dataptr 0 def/srcspace null def/srcchannels 0 def/dstchannels 0 def/dstplate 0 def/srctodstcolor null def/getplatesrc {	/srcspace AIColorSpace store	/srcchannels AIColorSpace getnchannels store	/dstchannels 1 store	/dstplate getplateindex store	/srctodstcolor srcspace makesmarks {		dstplate 4 eq {			{1 exch sub}		}{			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}		} ifelse	}{		{srcchannels {pop} repeat 1}	} ifelse store	/datafile getdatasrc store	/rdpatch168 load DataLength () /SubFileDecode filter} def/getdatasrc {	/rdcmntline load /ASCII85Decode filter} def/rdpatch168 {	/dataptr 0 store	49 rdcount	4 {		dup {pop srcchannels getint8} if		dup {pop srctodstcolor dstchannels putint8 true} if	} repeat	{databuf 0 dataptr getinterval}{()} ifelse} def/rdpatch3216 {	/dataptr 0 store	97 rdcount	4 {		dup {pop srcchannels getint16} if		dup {pop srctodstcolor dstchannels putint16 true} if	} repeat	{databuf 0 dataptr getinterval}{()} ifelse} def/rdcount {	dup 0 gt {		datafile databuf dataptr 4 -1 roll getinterval readstring		exch length dataptr add /dataptr exch store	}{		true	} ifelse} def/getint8 {	mark true 3 -1 roll	{		dup {pop datafile read} if		dup {pop 255 div true} if	} repeat	{		counttomark 1 add -1 roll pop true	}{		cleartomark false	} ifelse} def/putint8 {	dup dataptr add /dataptr exch store	dataptr exch	{		1 sub exch		255 mul cvi		databuf 2 index		3 -1 roll put	} repeat	pop} def /getint16 {	mark true 3 -1 roll	{		dup {pop datafile read} if		dup {pop 256 mul datafile read} if		dup {pop add 65535 div true} if	} repeat	{		counttomark 1 add -1 roll pop true	}{		cleartomark false	} ifelse} def/putint16 {	dup 2 mul dataptr add /dataptr exch store	dataptr exch	{		2 sub exch		65535 mul cvi dup		256 idiv databuf 3 index 3 -1 roll put		256 mod databuf 2 index 1 add 3 -1 roll put	} repeat	pop} def /srcbuf 256 string def/rdcmntline {	currentfile srcbuf readline pop	(%) anchorsearch {pop} if} def/getplateindex {	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall} def/aicsarray 4 array def/aicsaltvals 4 array def/aicsaltcolr aicsaltvals def/tocolorspace {	dup type /arraytype eq {		mark exch aload pop		aicsarray 0 3 -1 roll put		aicsarray 1 3 -1 roll put		dup aicsarray 2 3 -1 roll put		gettintxform aicsarray 3 3 -1 roll put		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store		aicsaltcolr astore pop pop		aicsarray	} if} def/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def/gettintxform {	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load} def/getnchannels {	dup type /arraytype eq {0 get} if	colorspacedict exch get begin Channels end} def/makesmarks {	composite? {		pop true	}{		dup dup type /arraytype eq {0 get} if		colorspacedict exch get begin MarksPlate end	} ifelse} def/markingplate {	composite? {		pop true	}{		dup type /arraytype eq {			dup length getplateindex gt {getplateindex get}{pop false} ifelse		} if	} ifelse} def/tocmyk {	dup dup type /arraytype eq {0 get} if	colorspacedict exch get begin ToCMYK end} def/topsspace {	dup dup type /arraytype eq {0 get} if	colorspacedict exch get begin ToPSSpace end} def/colorspacedict 5 dict dup begin	/DeviceGray 4 dict dup begin		/Channels 1 def		/MarksPlate {pop black?} def		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def		/ToPSSpace {} def end def	/DeviceRGB 4 dict dup begin		/Channels 3 def		/MarksPlate {pop isCMYKSep?} def		/ToCMYK {pop _rgbtocmyk} def		/ToPSSpace {} def end def	/DeviceCMYK 4 dict dup begin		/Channels 4 def		/MarksPlate {pop isCMYKSep?} def		/ToCMYK {pop} def		/ToPSSpace {} def end def	/Separation 4 dict dup begin		/Channels 1 def		/MarksPlate {			/findcmykcustomcolor where {				pop dup 1 exch ToCMYK 5 -1 roll 1 get				findcmykcustomcolor 1 setcustomcolor				systemdict /currentgray get exec				1 ne			}{				pop false			} ifelse		} def		/ToCMYK {			dup 2 get mark exch 4 2 roll			3 get exec			counttomark -1 roll tocmyk			5 -1 roll pop		} def		/ToPSSpace {} def end def	/Process 4 dict dup begin		/Channels 1 def		/MarksPlate {			isCMYKSep? {				1 exch ToCMYK 4 array astore getplateindex get 0 ne 			}{				pop false			} ifelse		} def		/ToCMYK {			dup 2 get mark exch 4 2 roll			3 get exec			counttomark -1 roll tocmyk			5 -1 roll pop		} def		/ToPSSpace {			4 array copy dup 0 /Separation put		} def end defend def/isoverprint {	/currentoverprint where {pop currentoverprint}{_of} ifelse} def/version_ge_3010.106 {   version {cvr} stopped {      pop      false   }{      3010.106 ge   } ifelse} defendenddefaultpacking setpacking%%EndResource%%EndProlog%%BeginSetupuserdict /_useSmoothShade false putuserdict /_aicmykps false putuserdict /_forceToCMYK false putAdobe_level2_AI5 /initialize get execAdobe_cshow /initialize get execAdobe_ColorImage_AI6 /initialize get execAdobe_shading_AI8 /initialize get execAdobe_Illustrator_AI5 /initialize get exec%AI5_BeginPalette0 0 Pb1 1 1 1 ([Passermarken]) 0 Xs([Passermarken]) Pc1 1 1 1 k([Passermarken]) Pc([Passermarken]) Pc1 0 0.47 0.3 (PANTONE 328) 0 x(PANTONE 328) PcPB%AI5_EndPalette%AI5_Begin_NonPrintingNp%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Angleichungen-Zusatzmodul) (Angleichungen)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Musterpinsel-Zusatzmodul) (Bildpinsel-Werkzeug)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Bildpinsel-Zusatzmodul) (Bildpinsel-Werkzeug)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (R\237ckg\212ngig: Neuer Kalligraphiepinsel) (Kalligraphiepinsel-Werkzeug)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Spezialpinsel-Zusatzmodul) (Spezialpinsel-Werkzeug)%AI5_End_NonPrinting--%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 0 79 128 255 0 100 Lb(Ebene 1) Ln0 Au*u0 O0 0 0 1 k800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR227.4336 422.7266 m227.4336 461.3242 258.8335 492.7266 297.4341 492.7266 c336.0313 492.7266 367.4346 461.3242 367.4346 422.7266 c367.4346 384.125 336.0313 352.7227 297.4341 352.7227 c258.8335 352.7227 227.4336 384.125 227.4336 422.7266 cf1 D225.4175 422.7266 m225.4175 383.0146 257.7222 350.71 297.4341 350.71 c337.1436 350.71 369.4492 383.0146 369.4492 422.7266 c369.4492 462.4326 337.1436 494.7388 297.4341 494.7388 c257.7222 494.7388 225.4175 462.4326 225.4175 422.7266 cf*Uu*u0 D344.748 411.0117 m342.7891 409.1875 340.0107 409.1582 337.7617 407.6787 C336.7305 406.6475 336.9912 405.4746 337.4121 404.1768 C338.2441 402.5313 337.9297 402.7012 336.7676 402.3135 c334.0518 401.4092 334.083 398.4395 330.8184 398.9375 C330.6328 398.8818 329.8691 399.2637 330.3193 398.7168 c330.6709 398.2988 330.8184 398.5498 331.5098 398.4668 C332.6729 398.4111 333.1055 398.8906 333.9229 399.4453 C335.0879 400.4268 334.9482 400.7939 336.3799 401.4834 C336.7236 401.5645 337.5693 401.8154 338.04 401.6494 C338.3584 401.3564 338.3672 401.3486 338.4189 401.0869 C338.2334 400.291 337.0723 399.6299 336.6289 399.3525 C337.2393 398.9053 338.3818 398.1504 338.1973 397.5176 C337.9346 397.1016 337.9482 397.0313 337.4863 396.8066 c336.8398 396.4941 335.5488 396.541 334.332 397.4434 C334.1475 397.3867 333.9443 397.8027 333.4229 397.3086 C334.6094 396.0879 336.2686 396.3643 336.5186 396.1152 c336.7676 395.8662 335.6309 394.3926 335.5801 394.0762 C334.7842 391.96 335.7607 390.0107 335.335 387.8125 C335.0732 386.0938 334.5586 385.2754 333.0527 384.1914 C330.291 382.2793 328.3555 381.7266 325.2559 381.2275 C317.1299 380.6729 312.0029 383.4609 306.1523 387.8311 c300.2998 392.2021 298.0625 394.5264 296.2354 396.9863 C296.209 397.9932 296.9487 398.7568 296.3159 399.8457 C295.7876 399.6602 295.8398 398.9727 295.521 398.5732 C295.0703 397.9365 293.9863 397.4639 293.2168 397.541 C290.8096 398.3613 290.6758 401.1924 289.1704 402.8086 C285.9414 405.9854 285.0391 410.5645 286.7622 414.4004 C287.3687 415.5918 288.4526 416.7305 289.6733 417.1523 C291.1787 417.3926 292.9546 417.3926 293.9351 415.9355 C295.0962 414.8262 295.814 413.0244 296.1021 411.4375 C296.5796 410.668 295.9985 409.7949 296.79 409.1582 C298.1655 409.0293 299.3564 408.6855 300.6807 409.5283 C301.6611 409.4004 301.7939 408.3125 302.5352 407.8389 C303.8594 407.0439 L305.2598 406.4629 307.0615 406.4629 308.2529 407.4951 C310.4756 409.7695 309.9902 412.1104 310.7559 414.6221 C312.877 416.501 314.2852 419.1895 314.2598 421.813 C314.127 423.4258 313.5459 425.0938 312.5908 426.7061 C312.75 427.6602 313.2793 428.374 313.5977 429.2222 C313.8633 429.3809 314.207 429.3809 314.4971 429.4326 c316.8525 429.9355 318.998 432.0806 319.9229 434.3296 C320.1328 434.54 L322.833 434.7251 326.1953 435.6797 327.7568 438.5132 C328.0742 439.73 329.4512 438.8311 330.2979 439.1196 C331.7246 439.2007 333.1563 439.9922 334.2402 440.9204 C334.5586 441.0278 334.7949 440.6802 334.9844 440.5249 C335.6172 438.4053 336.7822 436.3677 337.4434 434.2222 C338.2646 432.6094 338.5576 431.0747 338.2646 429.4326 C338.6094 426.9204 340.0371 424.5649 341.043 422.0234 c342.0488 419.3486 343.6094 416.6484 344.748 413.8975 C344.96 412.7871 345.4365 411.9102 344.748 411.0117 Cf1 D345.2998 415.6318 m343.3945 420.0264 341.2529 423.8096 339.6885 428.2305 C338.5781 429.8174 339.2148 431.5107 339.082 433.2056 C338.3682 435.8535 337.2539 437.8916 336.1973 440.458 c335.9043 441.1978 336.7266 441.4121 337.0186 441.9375 C337.4951 443.2363 337.1514 444.6938 336.5664 445.9365 C336.3301 446.6499 337.1777 447.1533 337.0186 447.8931 C336.9893 449.0317 335.9863 449.8013 335.1904 450.4087 C334 452.1284 333.4453 453.0308 331.9619 454.5913 C331.9619 454.8838 L332.7021 455.5425 333.3125 456.6812 333.2861 457.6611 C332.9941 458.771 332.7568 459.8032 331.6943 460.5728 C330.0049 461.5264 328.2852 460.0435 326.9355 459.2744 C326.5625 459.0122 326.377 458.7451 325.8477 458.7974 C325.5059 458.9194 325.1514 459.0464 324.79 459.1758 C324.4443 458.7817 324.0156 458.3643 323.4893 457.9473 C325.1328 457.2808 L325.1934 457.2358 325.2148 457.2031 325.2148 457.1475 c325.2148 457.1177 325.2051 457.0659 325.1973 457.0215 C325.082 456.9224 321.3906 453.6855 Y321.3799 453.6782 314.7363 447.1133 Y314.7363 447.1089 312.8311 445.1777 Y312.8203 445.167 306.918 438.3647 Y303.8291 434.7837 299.2686 428.9067 296.5234 424.606 C295.0962 422.6372 293.6714 420.4512 292.3438 418.3838 c292.2002 418.1543 291.9292 418.1729 291.501 418.2246 c291.2085 418.2578 290.9087 418.2881 290.6382 418.1953 C290.646 418.1953 290.6499 418.1953 Y290.5903 418.1807 L290.6055 418.1846 290.624 418.1885 290.6382 418.1953 C289.1372 418.0293 288.0464 417.5293 286.8774 416.4717 C285.3608 414.6855 284.5986 412.5215 284.5986 410.1875 c284.5986 408.582 284.9648 406.8906 285.7007 405.1934 C285.3906 404.2832 284.6763 403.4814 284.0366 402.7715 C283.6812 402.3711 L283.2266 401.9238 L282.9307 401.6426 282.5938 401.3252 282.3496 401.0146 C282.3276 400.9854 L282.3125 400.9473 L282.2827 400.8477 282.2686 400.6592 282.561 400.5186 C282.6304 400.4814 L282.7085 400.5 L284.1074 400.833 284.9878 401.8828 285.8413 402.9004 C286.3784 403.5186 286.4556 403.6104 V286.5811 403.6328 286.6851 403.5625 286.8701 403.4063 c286.9658 403.3262 287.0767 403.248 287.2026 403.1895 C287.2026 403.1602 287.2026 403.1191 Y287.1836 402.667 287.1802 402.5645 V283.8696 399.2939 281.1733 397.4482 277.6489 395.377 C277.0605 395.0332 L277.7407 394.9629 L279.1167 394.8262 280.4224 395.5986 281.6841 396.3467 C283.2007 397.1816 L284.6021 397.9004 285.9009 398.9941 287.1616 400.0527 C288.3013 400.999 288.4233 401.0986 V288.5415 401.0811 288.6748 400.9287 288.7783 400.8066 C288.853 400.7266 288.9009 400.6738 V288.9233 400.6338 289.958 398.584 290.021 398.4619 C289.7842 397.4893 289.6807 396.5166 289.6807 395.5439 c289.6807 393.4238 290.1396 391.3164 290.5903 389.252 c291.0342 387.2178 291.4932 385.1162 291.4932 383.0527 c291.4932 382.915 291.4897 382.7832 291.4858 382.6455 c291.4858 382.0098 290.7866 381.1631 290.2061 380.8965 C288.8818 380.6699 287.2842 380.6563 285.5898 380.6406 c283.5151 380.623 281.3662 380.6035 279.7163 380.1563 C279.1836 380.0938 278.5698 379.9199 277.9741 379.7529 c277.3896 379.5908 276.7866 379.4199 276.2246 379.3428 C276.1689 379.335 L276.1055 379.2871 L275.9028 379.1475 L275.7144 379.0293 275.4814 378.8848 275.4253 378.6064 c275.4219 378.585 275.4185 378.5586 275.4185 378.5332 c275.4185 378.373 275.4922 378.2002 275.6104 378.0781 c275.7251 377.959 275.8691 377.9043 276.0176 377.9189 C276.5166 377.9189 277.0747 378.1221 277.6191 378.3184 c277.9966 378.4551 278.3921 378.5996 278.7544 378.6621 c282.2021 379.25 285.9814 379.1318 288.5415 378.9248 C289.8066 378.9473 291.8813 378.9883 292.6284 380.7813 C292.8989 381.5107 292.9912 382.1875 292.9912 382.8389 c292.9912 383.5557 292.8804 384.248 292.7656 384.957 C292.54 386.7031 L292.3882 387.7686 292.1626 388.8301 291.9443 389.8594 c291.5566 391.6865 291.1567 393.5645 291.1567 395.4668 c291.1567 395.8506 291.1787 396.2393 291.2119 396.627 C291.249 396.6758 291.2891 396.7344 291.3384 396.7422 c291.4497 396.7568 291.645 396.6016 291.8008 396.4785 c291.978 396.3389 292.1587 396.2051 292.3589 396.1543 C292.5879 395.9805 292.8472 395.9316 293.0835 395.9023 c293.4131 395.8574 293.5903 395.8174 293.6943 395.5625 C293.8423 393.8896 294.4194 392.1621 294.978 390.4912 c295.3623 389.3398 295.7622 388.1504 296.0176 386.9883 c296.4722 384.9541 296.9307 382.8896 296.9307 380.8555 c296.9307 379.6465 296.7681 378.4443 296.3428 377.2646 C295.458 375.6543 293.5239 375.6475 291.6558 375.6396 C291.0977 375.6396 L286.5186 375.918 L282.5898 376.2031 278.5288 376.4941 274.3647 375.8213 c274.3936 375.8252 273.4321 375.7217 Y272.9175 375.6436 272.4331 375.5811 271.9121 375.7031 C271.7192 375.8594 271.5635 376.1279 271.5635 376.4092 c271.5635 376.498 271.5786 376.5908 271.6157 376.6797 c272.3594 378.3223 272.7334 379.8057 272.7334 381.1182 c272.7334 382.1836 272.4883 383.1348 272 383.9707 C270.9238 386.0342 269.7407 387.4648 268.2798 388.4648 C266.4912 390.2539 264.9624 391.8398 263.604 393.3848 C262.8096 393.4844 262.3208 393.6416 262.2681 393.6582 C262.0913 393.7188 L261.2964 392.7393 L262.3281 391.7598 263.2817 390.7793 264.4468 389.7227 C266.2192 388.7676 267.6509 387.0479 268.9199 385.8818 C270.4546 384.085 270.8242 382.1797 270.5059 380.0605 C270.2954 377.5488 267.9946 376.4609 266.4302 374.7939 C265.7979 373.6016 265.3984 372.1738 266.271 371.0615 C266.8301 369.5811 269.208 369.8486 269.5005 368.627 c270.1548 365.9385 274.8193 364.3848 275.729 364.3223 c276.6348 364.2588 277.5747 363.2568 Y279.4277 361.9063 281.8618 362.2314 283.1411 362.4277 c284.417 362.6211 286.7036 361.5889 288.1343 361.7988 C290.2764 362.6465 292.0259 362.25 294.2485 362.4355 C301.2354 362.3281 309.1738 362.4873 316.3193 361.5889 C317.6436 361.748 319.2314 360.7148 320.4775 361.3477 C320.7949 361.8809 320.5557 362.3281 320.4775 362.7793 C317.0625 368.1504 316.5518 374.1797 318.4883 380.0313 C319.7773 379.9561 L324.4121 379.4521 328.627 380.0527 333.3359 382.7773 c335.6914 384.0762 336.9297 387.1104 336.8232 389.3086 c336.7441 390.7354 336.25 392.4219 336.4893 393.9316 C336.5723 394.6055 337.0186 395.627 337.5977 395.9492 c337.8457 396.0879 338.7148 396.6768 338.9854 397.4297 c339.4336 398.6543 338.4736 399.2324 338.1973 399.3984 C338.9443 399.7031 339.6689 401.2324 338.9805 402.4238 C338.5371 402.8945 338.0234 404.7529 337.9688 405.3633 C337.8105 406.2363 337.7832 407.1357 338.6055 407.6943 C340.459 408.6699 342.2041 408.9111 344.1348 409.7578 c345.459 410.3125 346.1465 411.6885 346.0957 412.9316 C345.2998 415.6318 Lf0 D269.6372 371.9932 m269.3999 371.5684 269.4336 371.2832 269.3262 370.7725 C269.1973 370.54 268.5347 370.8535 268.3242 370.9844 C267.5024 371.4277 267.5581 371.2021 267.3213 371.9639 C267.1885 372.4736 267.2036 373.0732 268.0503 373.5176 c268.5791 373.8164 269.6372 374.1758 269.9805 373.5176 C270.0884 373.0732 269.5596 372.5 269.6372 371.9932 Cf274.1533 366.2744 m273.0688 366.249 272.3076 366.8408 271.8047 368.1201 C271.2974 369.748 271.1274 371.1865 271.4785 372.8613 C271.5903 373.0732 271.8301 373.21 271.9858 373.1406 C273.4985 373.6543 L274.0059 373.8613 274.4194 373.9316 274.9043 373.8164 C275.2114 373.5137 L275.1885 372.6289 274.9707 371.9785 274.9487 371.1611 c274.8599 369.1113 274.686 368.501 275.2778 366.5488 C275.0591 366.0352 274.623 366.2822 274.1533 366.2744 cf336.3486 442.4038 m336.2012 442.249 336.0156 442.0562 335.7686 442.1226 C335.2061 442.5146 335.4199 443.0146 335.4541 443.4878 C335.5684 443.6021 335.5859 443.6689 335.7686 443.6689 C336.0352 443.7139 336.1826 443.5171 336.2813 443.3765 C336.4482 443.0698 336.4668 442.7222 336.3486 442.4038 Cf293.4023 417.6182 m297.1084 424.2612 301.6104 430.0313 306.4258 435.9604 C313.1748 443.6318 L317.9912 448.7695 323.3105 454.0366 329.2139 458.1089 C329.9531 458.5347 330.2793 459.4038 331.0439 458.793 C331.7393 458.1533 L332.2061 457.6245 331.7988 456.123 331.3223 455.7012 C330.9414 455.3906 330.5713 455.0835 330.2051 454.7803 C331.3564 453.6411 333.0156 451.4736 334.3809 450.0713 c334.9805 449.4536 334.7949 448.814 335.8691 448.3145 c336.4043 448.0625 336.5566 447.4785 336.2383 446.9761 C335.2861 445.7588 333.7002 445.9438 332.4531 445.6255 c327.8232 444.5938 324.0801 443.2695 318.957 440.7837 C314.8555 438.6128 311.5742 436.2051 308.6064 432.4727 c307.4727 431.0708 306.1992 430.0098 305.25 428.3188 C302.5488 424.8491 300.4043 421.5947 298.2583 418.0225 C297.4927 416.8975 297.2412 416.3389 296.1685 415.3203 c295.6475 414.8262 295.1816 415.8604 294.8555 416.2207 c294.8184 416.2607 294.7964 416.3057 294.7705 416.3457 C294.6592 416.3311 294.5449 416.3525 294.4341 416.4268 C294.1455 416.7979 293.2432 416.9561 293.4023 417.6182 Cf334.2266 443.2808 m334.1553 441.9971 332.4434 440.936 331.0107 440.5396 C330.4014 440.4438 329.8389 440.48 329.2988 440.48 C329.1582 440.5806 328.9961 440.6992 329.0176 440.8364 c329.1104 441.4463 329.2061 441.8013 329.251 442.3521 C329.6055 442.6113 L330.8711 442.8657 332.417 443.1396 333.6855 443.4771 C333.875 443.436 334.1074 443.4546 334.2266 443.2808 Cf320.9248 439.9404 m321.1543 440.2329 L322.1895 440.7246 323.1553 441.1055 324.3057 441.4385 C325.6855 441.7974 L326.0508 442.1299 326.6943 442.3999 327.0645 441.9302 C327.0879 440.144 325.752 437.9985 323.7773 437.1743 c323.1553 436.9038 322.3271 436.8149 321.5908 436.6343 C321.4063 436.7925 320.8066 436.4561 320.625 436.9038 C320.7393 437.7993 321.085 439.1377 320.9248 439.9404 Cf306.7949 408.2715 m306.4258 408.0566 303.2266 409.2773 303.5996 408.9375 C302.8418 409.7578 304.0811 410.0352 301.2578 411.0938 C300.5732 411.0234 L300.4854 410.9414 300.2363 410.8154 299.9814 411.168 C299.9561 411.5928 300.5146 411.5303 300.6914 412.0596 C301.7021 414.334 301.1475 416.0947 301.0469 418.4502 C301.7939 420.3809 L303.2109 422.0898 303.207 422.3345 304.1689 423.2627 C305.1309 424.6128 305.3311 424.7158 306.6182 425.8257 c306.8281 426.0068 307.2168 426.1514 307.4688 425.937 C308.0762 425.4639 308.1084 425.1528 308.2861 424.5459 C308.5898 422.2935 307.2275 420.751 305.5859 419.5342 C304.4199 418.5283 303.3105 416.9668 303.5625 415.4316 C303.6621 415.3281 L304.1943 415.7764 304.8643 416.0391 305.0898 416.5938 C305.9775 418.5762 308.3672 419.4785 309.7061 421.1978 C310.2861 422.23 309.9316 424.021 309.7061 425.2119 C309.6992 425.1782 311.46 426.0444 310.9814 425.7334 C311.8184 425.3892 311.7148 424.7896 312.1182 424.0254 C312.9023 422.0381 312.835 420.2441 311.623 418.5244 C308.2861 414.3643 L308.2344 412.2432 308.8184 409.5146 306.7949 408.2715 cf311.1973 428.4067 m310.3945 428.0381 309.5693 427.9565 308.6816 428.3667 C308.4561 428.6738 307.7227 428.9224 308.0127 429.373 c308.6563 430.416 309.7471 431.2778 310.416 432.3027 C310.7275 432.4688 L312.085 434.1074 314.2227 435.48 316.25 436.7119 C317.4736 437.2446 L317.7402 437.5103 318.3652 438.0649 318.6094 437.4922 C318.6543 435.3574 317.751 433.0757 315.7168 431.5664 c314.4814 430.6533 313.9521 430.8306 312.8506 430.7637 C312.2842 429.7388 L312.1514 429.2285 311.707 428.7144 311.1973 428.4067 Cf299.9668 416.2275 m299.9111 414.7188 L299.7754 413.3418 299.1387 411.7559 297.8442 410.9863 C297.0708 411.1709 297.3481 412.0996 297.1563 412.7314 C297.6519 414.1074 298.6182 415.2471 299.416 416.4639 C299.5234 416.5449 299.6348 416.5977 299.7451 416.5449 C299.9668 416.2275 Lf281.5396 363.752 m281 363.1982 280.6968 363.4561 280.1489 363.4043 C278.5918 363.8271 277.6709 364.5029 277.2305 366.2676 c276.6606 368.7275 276.6792 371.4316 277.2305 373.9424 C277.4819 374.1387 L278.5767 374.2646 280.2344 374.4863 280.6851 374.2393 c281.1333 373.9902 280.2002 369.5664 Y280.1714 368.6895 280.6011 366.4443 281 365.2793 C281.0845 365.1064 281.98 364.207 281.5396 363.752 cf292.8394 366.4854 m292.6729 364.9063 290.6909 363.5146 289.7212 363.2344 c288.7485 362.957 285.8457 363.0938 285.0093 363.3828 c284.1772 363.6699 282.1392 367.6514 282.376 369.7188 C282.376 371.4238 282.835 374.1309 283.5186 374.3496 c284.2031 374.5645 286.0151 374.4531 Y286.7739 374.5039 287.3462 374.3232 288.0127 374.2461 C288.4863 374.0645 288.1533 373.4688 288.3193 373.1318 C288.5342 372.252 288.5825 371.2979 289.1294 370.418 C289.8911 368.9414 291.2935 368.0605 292.6729 367.5439 C292.9844 367.2598 292.8135 366.874 292.8394 366.4854 Cf290.6128 373.165 m290.6128 373.4844 290.6313 373.6133 290.8726 373.7168 C292.1812 373.7168 L293.3428 373.6768 294.8374 373.2949 295.9248 374.4199 C296.5498 374.3975 296.605 373.6543 296.771 373.0811 C296.9194 372.2773 296.8828 371.7676 296.8828 371.0469 C296.6235 370.4775 296.3315 369.6074 295.7397 369.2441 C294.8003 368.8008 293.8564 368.8857 292.9546 369.2441 C291.5898 370.0518 290.5952 371.3418 290.6128 373.165 cf317.4102 379.4131 m315.6611 373.3516 314.8291 370.2246 317.5596 363.9775 C317.585 363.7402 317.8477 362.9688 317.5596 362.8643 C314.54 363.4707 313.7383 363.7305 310.9053 363.9404 C308.2861 364.3926 303.9355 363.6641 301.0254 363.6895 C298.751 363.6123 296.4463 363.5342 294.0635 363.2422 C293.3501 363.6123 293.9043 364.4072 293.9604 364.9355 C294.2231 365.7568 294.2485 366.1787 294.3306 367.1318 C294.7002 367.5283 295.1519 367.3184 295.5996 367.5029 C297.1338 367.7393 298.4326 369.0898 298.8018 370.5215 C299.2793 372.0264 298.751 373.6943 298.0625 375.126 C297.9287 375.5479 297.3481 375.8652 297.585 376.2871 c299.4648 379.8096 298.1401 383.3818 297.5078 386.8223 C296.8452 389.2598 295.8398 391.9561 295.4404 394.5264 C295.521 394.7891 295.1772 395.3994 295.7578 395.4512 C295.9727 395.3994 L297.9805 392.9619 303.7402 387.8076 305.8975 386.1328 c308.0537 384.46 313.623 381.2109 317.248 380.3379 C317.5918 380.0498 317.54 379.8096 317.4102 379.4131 Cf*UU332.7061 432.1069 m333.0752 431.6299 333.3145 431.2075 333.0234 430.7563 c332.335 430.7046 332.2285 431.5776 331.6475 431.8701 c330.6934 432.3428 329.8467 431.8403 328.8955 431.603 c326.4883 430.5713 324.4756 428.5073 322.1445 427.4238 c321.8564 427.4238 321.5908 427.4497 321.4063 427.6602 c321.8018 428.0562 322.4375 428.1377 322.9404 428.4561 c325.3486 430.0425 327.6787 432.5278 330.6934 432.98 c331.4893 433.0308 332.2031 432.7432 332.7061 432.1069 cf*u1 D332.5195 428.0303 m332.335 428.6143 332.3613 429.5659 331.6475 429.6982 C331.4893 429.3286 331.6475 428.9287 331.4893 428.5854 C331.2773 428.3228 330.9072 428.0049 330.4824 428.1118 C327.5703 427.9268 325.4004 425.356 322.915 424.0356 c322.0674 423.5591 321.1133 423.2925 320.2148 423.0552 C320.1328 422.9224 320.1621 422.7373 320.291 422.6597 C323.0479 422.3672 325.7695 422.1016 328.5 421.813 C331.54 422.1567 L331.6221 422.5527 331.1445 422.8965 331.2227 423.3477 C331.5693 424.5903 331.6738 425.9404 331.3301 427.1055 C331.5693 427.7383 332.4688 427.2642 332.5195 428.0303 Cf0 D330.3936 423.3296 m330.0195 422.7778 329.4287 423.2593 328.9063 423.1929 C327.7168 423.3296 325.7031 423.0518 324.3896 423.2144 C324.1914 423.3296 324.0439 423.5366 324.165 423.7217 C324.3643 424.0464 324.9121 424.0688 325.2598 424.3237 C326.6982 425.2227 328.2109 426.0776 329.8496 426.4692 C330.1465 426.5137 330.3936 426.2622 330.4443 426.0547 c330.6416 425.2935 330.5195 424.0688 330.3936 423.3296 Cf*U*u334.0596 414.3867 m334.1563 414.5254 334.2676 414.6816 334.3975 414.6953 C334.5703 414.6309 334.6611 414.5488 334.6855 414.2305 C334.6641 413.7197 334.5342 413.1836 334.3965 412.6143 c334.2393 411.9668 334.0771 411.3047 334.0771 410.6563 c334.0771 410.3682 334.1104 410.084 334.1865 409.8027 C334.5703 409.3271 335.1602 409.2188 335.8691 409.4609 C335.8818 409.4678 337.0752 410.1514 Y338.1113 410.7725 339.0918 411.3564 340.9063 411.8193 c340.9512 411.8311 340.9609 411.8164 340.9688 411.8086 c340.9961 411.7764 341.0098 411.708 341.0098 411.623 c341.0098 411.4668 340.9639 411.2539 340.8887 411.0811 C340.8193 411.0508 339.1416 410.3018 Y337.8203 409.7246 336.4541 409.127 335.1738 408.3936 C334.7949 408.3164 334.4443 408.5195 334.1074 408.7188 C334.0254 408.7676 L333.5381 409.4336 333.3809 410.0791 333.3809 410.7246 c333.3809 411.3047 333.5068 411.8828 333.6367 412.4775 c333.7578 413.0313 333.8809 413.6045 333.9092 414.2051 C333.9521 414.2559 334.0596 414.3867 Yf*U292.8218 414.9287 m293.7754 412.9727 292.769 411.1191 292.8218 409.0811 c292.98 408.5 294.1196 408.4189 293.7754 407.7314 c293.5088 407.5469 293.1387 407.4951 292.8472 407.7061 c292.3184 408.0498 292.1333 408.3125 292 408.9229 c291.8667 410.7207 293.2983 412.8145 292.0259 414.5068 c291.6558 414.877 291.1274 415.2471 290.5981 415.2725 c289.459 415.0625 288.8784 413.8457 288.4829 412.9473 c287.8726 410.5645 287.7129 408.0498 289.8027 406.1445 c291.0234 405.4307 292.5029 404.6611 292.584 403.126 c292.769 402.8604 293.1387 402.5977 293.4312 402.7559 c293.8013 402.7813 293.853 403.8398 294.3823 403.3379 c294.541 402.9668 l294.4077 402.5449 294.2778 401.8018 293.5903 401.7764 c293.2461 401.6982 292.873 401.8828 292.584 402.0938 c291.8408 402.8604 292.4253 404.0254 291.1787 404.5273 c289.1152 405.165 287.7651 407.335 287.5537 409.374 c287.4209 411.3301 287.502 413.4746 289.1958 415.1953 c289.8584 415.6992 290.7319 416.0166 291.5781 415.75 c292.0557 415.6729 292.6099 415.3281 292.8218 414.9287 cfuu*u1 D1 XR266.9468 400.6152 m263.1782 398.8672 262.0278 394.3789 261.9795 394.1875 C261.8794 393.791 L262.2681 393.6582 L262.416 393.6104 265.9155 392.4639 270.1836 394.5605 c274.4893 396.6729 275.373 400.9346 275.4097 401.1152 C275.4985 401.5664 L275.043 401.6396 L274.8657 401.6699 270.646 402.332 266.9468 400.6152 cf0 D267.3203 399.8066 m270.0728 401.082 273.2168 400.9346 274.4004 400.8193 C274.063 399.7275 272.9209 396.8955 269.791 395.3594 c266.6509 393.8213 263.9614 394.1875 262.978 394.4023 C263.3408 395.4893 264.5571 398.5225 267.3203 399.8066 Cf*U*u1 D270.7031 409.0762 m266.9272 407.3721 265.5327 402.9248 265.4771 402.7363 C265.3477 402.3115 L265.7695 402.1816 L265.917 402.1338 269.4053 401.0938 273.689 403.1436 c278.0122 405.2109 278.9297 409.3281 278.9663 409.502 C279.0586 409.9531 L278.6079 410.0342 L278.438 410.0645 274.417 410.752 270.7031 409.0762 cf0 D271.0698 408.2627 m273.811 409.502 276.8022 409.3418 277.9502 409.2207 C277.5977 408.1563 276.4292 405.4404 273.3037 403.9463 c270.1895 402.46 267.5181 402.7402 266.4976 402.9316 C266.9312 404.042 268.3105 407.0156 271.0698 408.2627 Cf*U*u1 D275.6069 417.2227 m271.8276 415.5625 270.1885 411.1602 270.1216 410.9727 C269.9556 410.5205 L270.418 410.3916 L270.5659 410.3506 274.0464 409.415 278.3374 411.416 c282.6797 413.4355 283.6299 417.4082 283.6704 417.5781 C283.7705 418.0264 L283.3198 418.1143 L283.1602 418.1475 279.3394 418.8652 275.6069 417.2227 cf0 D275.9663 416.4063 m278.6958 417.6074 281.5361 417.4375 282.6499 417.3086 C282.2798 416.2686 281.0854 413.6758 277.9634 412.2227 c274.8823 410.791 272.2339 410.9863 271.1689 411.1523 C271.6797 412.2813 273.2109 415.1953 275.9663 416.4063 Cf*U*u1 D280.478 425.271 m276.6943 423.6509 274.8154 419.29 274.7378 419.1094 C274.5347 418.6279 L275.041 418.502 L275.1851 418.4648 278.6543 417.6328 282.9595 419.585 c287.3174 421.561 288.3013 425.3892 288.3428 425.5518 C288.4526 425.9995 L288.0015 426.0962 L287.8501 426.1289 284.2329 426.8726 280.478 425.271 cf0 D280.8291 424.4497 m283.5518 425.6113 286.2412 425.4336 287.3135 425.3008 C286.9287 424.2871 285.7085 421.8091 282.5898 420.3965 c279.5425 419.0156 276.9121 419.1348 275.8101 419.2764 C276.3984 420.4258 278.085 423.2769 280.8291 424.4497 Cf*U*u1 D287.2212 433.3232 m283.4263 431.748 281.3105 427.4268 281.2217 427.2461 C280.9741 426.7354 L281.5244 426.6177 L281.6729 426.584 285.1313 425.8594 289.4478 427.7607 c293.8237 429.6909 294.8408 433.3755 294.8809 433.5308 C295 433.9746 L294.5522 434.0815 L294.4116 434.1152 290.9907 434.8877 287.2212 433.3232 cf0 D287.5615 432.4985 m290.2686 433.6226 292.8135 433.438 293.8491 433.2935 C293.4458 432.3101 292.2002 429.9502 289.0894 428.5781 c286.0518 427.2388 283.4517 427.2939 282.3242 427.4053 C283.001 428.5742 284.8281 431.3628 287.5615 432.4985 Cf*U*u1 D294.6523 441.0913 m290.8535 439.5601 288.4937 435.2803 288.394 435.0991 C288.105 434.5625 L288.7046 434.4478 L288.8486 434.4219 292.2998 433.7969 296.6235 435.6538 c301.0215 437.5405 302.0723 441.0796 302.1123 441.2271 C302.2393 441.6685 L301.7979 441.7822 L301.6611 441.8159 298.4399 442.6191 294.6523 441.0913 cf0 D294.9849 440.2661 m297.6743 441.3496 300.0732 441.1611 301.0732 441.0093 C300.6514 440.0518 299.3789 437.8027 296.2725 436.4751 c293.2646 435.1836 290.6909 435.1724 289.5332 435.2544 C290.291 436.4419 292.2632 439.1675 294.9849 440.2661 Cf*U*u1 D302.5859 448.4365 m298.7803 446.9458 296.1836 442.707 296.0757 442.5254 C295.7319 441.96 L296.3872 441.8569 L296.5317 441.8345 299.9707 441.3125 304.3057 443.1216 c308.7188 444.9604 309.8018 448.3516 309.8467 448.4956 C309.9805 448.9326 L309.5439 449.0542 L309.417 449.0913 306.3965 449.9272 302.5859 448.4365 cf0 D302.9111 447.605 m305.5781 448.6475 307.8418 448.4546 308.8008 448.3003 C308.3604 447.3716 307.0615 445.2339 303.9619 443.9429 c300.999 442.707 298.4438 442.6255 297.249 442.6772 C298.0991 443.8838 300.2109 446.5464 302.9111 447.605 Cf*U*u1 D310.8418 455.2129 m307.0244 453.7627 304.1914 449.5649 304.0732 449.3867 C303.6729 448.7886 L304.3877 448.6953 L304.5313 448.6777 307.9609 448.2627 312.3066 450.0234 c316.7383 451.8179 317.8555 455.061 317.9004 455.2012 C318.0391 455.6274 L317.6104 455.7642 L317.4922 455.8008 314.6699 456.667 310.8418 455.2129 cf0 D311.1602 454.3809 m313.8018 455.3828 315.9277 455.1875 316.8457 455.0244 C316.3857 454.1255 315.0586 452.0986 311.9736 450.8486 c309.0332 449.6606 306.5107 449.5205 305.29 449.542 C306.2295 450.7593 308.4668 453.3594 311.1602 454.3809 Cf*U*u1 D319.2275 461.2866 m315.4023 459.877 312.332 455.7163 312.2021 455.5386 C311.7441 454.9102 L312.5176 454.8315 L312.6611 454.8174 316.083 454.5063 320.4404 456.2188 c324.8867 457.9644 326.0361 461.0645 326.085 461.1978 C326.2324 461.6191 L325.8115 461.7676 L325.7031 461.8076 323.0771 462.7036 319.2275 461.2866 cf0 D319.5332 460.4507 m322.1484 461.4121 324.1475 461.2158 325.0225 461.0459 C324.541 460.1802 323.1924 458.2568 320.1113 457.0479 c317.2109 455.9082 314.7207 455.7119 313.4707 455.7012 C314.5 456.9297 316.8604 459.4629 319.5332 460.4507 Cf*UUu*u1 D260.9194 409.1357 m260.8076 408.9932 258.1895 405.5938 257.9189 401.502 c257.6489 397.3369 261.0557 394.1563 261.2036 394.0234 C261.5024 393.7461 L261.8066 394.0234 L261.9214 394.127 264.6177 396.6563 264.8252 401.4355 c265.0356 406.248 261.6958 409.085 261.5547 409.2031 C261.2007 409.5 L260.9194 409.1357 Lf0 D258.7993 401.0361 m258.7993 401.1729 258.8032 401.3066 258.811 401.4434 c259.0103 404.5059 260.6675 407.2061 261.333 408.1787 C262.1064 407.3838 263.9448 405.1494 263.9448 401.8574 c263.9448 401.7314 263.9409 401.6025 263.9331 401.4727 c263.7817 397.9629 262.1616 395.7617 261.4956 395 C260.7412 395.8066 258.7993 398.1582 258.7993 401.0361 Cf*U*u1 D266.2339 418.3027 m266.1455 418.2021 264.0151 415.8535 263.105 412.4766 c262.9829 412.0186 262.8862 411.5264 262.8271 411.0195 c262.3359 406.9805 265.2534 403.6699 265.3799 403.5293 C265.668 403.208 L266.001 403.4893 L266.1157 403.5889 268.8706 405.9775 269.4302 410.6162 c269.9922 415.3066 266.9966 418.2021 266.8701 418.3242 C266.541 418.6357 L266.2339 418.3027 Lf0 D263.6636 410.1094 m263.6636 410.373 263.6782 410.6426 263.7114 410.9121 c263.7666 411.3789 263.8525 411.8262 263.9663 412.2432 c264.6177 414.6641 265.9678 416.5527 266.5747 417.3184 C267.2139 416.5566 268.6084 414.5771 268.6084 411.7559 c268.6084 411.4229 268.5859 411.0791 268.5454 410.7236 c268.1387 407.3428 266.4556 405.2461 265.75 404.4941 C265.1206 405.3271 263.6636 407.5205 263.6636 410.1094 Cf*U*u1 D272.1929 426.8984 m272.0972 426.8101 269.8623 424.7271 268.7266 421.3726 c268.583 420.9473 268.4648 420.4854 268.3721 419.9639 c267.6616 416.0566 270.0913 412.6211 270.1958 412.4727 C270.4653 412.0957 L270.832 412.3848 L270.9497 412.4766 273.7651 414.7246 274.6714 419.2266 c275.5884 423.7881 272.936 426.7466 272.8218 426.8687 C272.522 427.2012 L272.1929 426.8984 Lf0 D269.1377 418.5244 m269.1377 418.9414 269.1704 419.375 269.2524 419.8086 c269.3364 420.2852 269.4409 420.7031 269.5708 421.0879 c270.3765 423.4697 271.8086 425.1934 272.4556 425.8926 C272.9658 425.1714 273.9683 423.4546 273.9683 421.0947 c273.9683 420.562 273.916 419.9971 273.7944 419.4014 c273.1436 416.1572 271.4009 414.1641 270.647 413.4238 C270.1509 414.2646 269.1377 416.2461 269.1377 418.5244 Cf*U*u1 D278.7437 434.9326 m278.6436 434.855 276.3062 433.0381 274.937 429.71 c274.7744 429.3179 274.6377 428.8735 274.5083 428.3516 c273.5908 424.5752 275.5181 421.0171 275.5996 420.8652 C275.8433 420.4258 L276.251 420.7217 L276.3726 420.8066 279.2432 422.915 280.4966 427.2759 c281.769 431.7036 279.4644 434.7251 279.3647 434.8506 C279.0942 435.1992 L278.7437 434.9326 Lf0 D275.1597 426.251 m275.1597 426.8652 275.2222 427.5054 275.3774 428.1411 c275.4922 428.6187 275.6187 429.022 275.7622 429.373 c276.7241 431.7104 278.229 433.271 278.9175 433.9038 C279.2983 433.2534 279.979 431.8252 279.979 429.895 c279.979 429.1704 279.8833 428.3706 279.6382 427.5234 c278.7466 424.4209 276.9536 422.5264 276.147 421.7939 C275.792 422.6006 275.1597 424.3018 275.1597 426.251 Cf*U*u1 D285.8379 442.4116 m285.7339 442.3486 283.3042 440.7988 281.6919 437.4956 c281.5107 437.1226 281.3472 436.708 281.1885 436.1899 c280.0566 432.543 281.4883 428.8657 281.5513 428.7109 C281.7544 428.2041 L282.2134 428.5039 L282.3345 428.5884 285.2607 430.5562 286.8584 434.7729 c288.4863 439.0674 286.5332 442.1489 286.4482 442.2778 C286.207 442.6445 L285.8379 442.4116 Lf0 D281.6504 433.2056 m281.6504 434.0747 281.7544 435.0063 282.0396 435.9233 c282.1875 436.397 282.3306 436.7749 282.4902 437.1035 c283.6187 439.4077 285.1982 440.8135 285.9189 441.376 C286.1934 440.8101 286.6108 439.6968 286.6108 438.1914 c286.6108 437.2808 286.459 436.2344 286.022 435.0918 c284.9058 432.1357 283.0562 430.335 282.1909 429.6138 C281.9766 430.335 281.6504 431.6626 281.6504 433.2056 Cf*U*u1 D293.4312 449.3467 m293.3237 449.2944 290.8057 448.0112 288.9409 444.7344 c288.7417 444.3828 288.5566 443.9839 288.3638 443.4839 c287.0176 439.9697 287.9648 436.1792 288.0054 436.02 C288.1533 435.4395 L288.668 435.7495 L288.7935 435.8232 291.7739 437.6548 293.7124 441.731 c295.6919 445.8887 294.0933 449.0254 294.0229 449.1538 C293.8203 449.542 L293.4312 449.3467 Lf0 D288.5415 439.2822 m288.5415 440.4624 288.6934 441.8491 289.1958 443.1655 c289.3735 443.6211 289.5366 443.9795 289.7183 444.2944 c291.0049 446.5571 292.6509 447.8081 293.4131 448.3003 C293.5796 447.834 293.8091 447.0273 293.8091 445.9175 c293.8091 444.8599 293.5977 443.5576 292.9097 442.1157 c291.563 439.2861 289.6553 437.5952 288.7417 436.8931 C288.6489 437.4399 288.5415 438.2842 288.5415 439.2822 Cf*U*u1 D301.4922 455.7456 m301.3809 455.7012 298.7832 454.6807 296.6567 451.4438 c296.4351 451.104 296.2236 450.7114 296.0059 450.2456 c294.4492 446.8647 294.9077 442.959 294.9287 442.7959 C295.0073 442.145 L295.584 442.4595 L295.7144 442.5298 298.7471 444.2207 301.0332 448.1558 c303.3594 452.1724 302.1172 455.3608 302.0645 455.4946 C301.8975 455.9004 L301.4922 455.7456 Lf0 D295.7471 444.3306 m295.7471 445.7261 295.917 447.9224 296.8159 449.8716 c297.0156 450.3008 297.208 450.6519 297.4038 450.9517 c298.8613 453.1753 300.5732 454.2778 301.3652 454.6987 C301.4502 454.3433 301.54 453.8154 301.54 453.1162 c301.54 451.9434 301.2764 450.356 300.2598 448.603 c298.6943 445.9028 296.7344 444.3164 295.7622 443.6362 C295.7544 443.8389 295.7471 444.0645 295.7471 444.3306 Cf*U*u1 D309.9805 461.6152 m309.8691 461.5825 307.1943 460.8203 304.8047 457.6211 c304.5547 457.2876 304.3174 456.9106 304.0811 456.4824 c302.3057 453.2344 302.2861 449.2134 302.2861 449.043 C302.29 448.3296 L302.9307 448.6436 L303.0645 448.7104 306.1523 450.2637 308.7744 454.0586 c311.4521 457.9312 310.5674 461.1719 310.5273 461.3052 C310.4053 461.7305 L309.9805 461.6152 Lf0 D304.8643 456.0522 m305.0781 456.4482 305.2939 456.7852 305.5186 457.0884 c307.1475 459.2671 308.9297 460.2251 309.751 460.5757 C309.7764 460.3687 309.7988 460.1182 309.7988 459.7959 c309.7988 458.6011 309.5059 456.6851 308.041 454.5659 c306.2617 451.9946 304.2471 450.5044 303.2188 449.8491 C303.3145 451.1553 303.6475 453.833 304.8643 456.0522 Cf*U*u1 D318.8232 466.9609 m318.709 466.9419 315.9688 466.4316 313.3057 463.2842 c310.6563 460.1582 310.0352 454.9907 310.0098 454.7729 C309.9209 453.9995 L310.6309 454.3145 L310.7646 454.3735 313.9111 455.79 316.875 459.4482 c319.8926 463.1763 319.3643 466.4614 319.3418 466.5977 C319.2637 467.0381 L318.8232 466.9609 Lf0 D313.9854 462.707 m315.79 464.8408 317.6396 465.6577 318.4902 465.9438 C318.4941 465.9214 318.4941 465.9097 318.4941 465.8843 c318.4941 464.8564 318.2285 462.5371 316.1787 460.0068 c314.1973 457.5581 312.1143 456.1636 311.0332 455.5386 C311.3232 457.125 312.1318 460.5205 313.9854 462.707 Cf*UUU*u1 D234.1392 422.7266 m234.1392 401.1582 245.813 380.4082 264.606 368.5684 C265.3833 368.0801 L265.9419 368.8096 L266.1011 369.0156 266.1646 369.2119 266.1646 369.3926 c266.1646 369.8564 265.7681 370.2188 265.5459 370.4238 C264.4585 371.4688 L260.5859 375.8652 259.5469 380.0381 259.5469 383.2451 c259.5469 386.792 260.8149 389.1602 260.9194 389.3398 C261.2661 389.9658 L260.7896 390.502 L252.8477 399.3613 248.6538 410.502 248.6538 422.7266 c248.6538 449.624 270.5356 471.5063 297.4341 471.5063 c304.9121 471.5063 312.0879 469.8604 318.7607 466.6128 C319.4521 466.2764 L329.2578 477.4614 L328.1699 478.0684 L318.8232 483.2725 308.1934 486.0205 297.4341 486.0205 c262.5317 486.0205 234.1392 457.6245 234.1392 422.7266 cf0 D236.1514 422.7266 m236.1514 456.5151 263.6411 484.0083 297.4341 484.0083 c307.4316 484.0083 317.3008 481.5303 326.0732 476.8843 C324.79 475.4199 319.7148 469.6309 318.9355 468.7437 C312.1875 471.9019 304.9609 473.519 297.4341 473.519 c269.4258 473.519 246.6377 450.7339 246.6377 422.7266 c246.6377 410.2314 250.8765 398.832 258.8628 389.6816 C258.4038 388.6191 257.5864 386.293 257.5864 383.2119 c257.5864 380.6631 258.1782 377.6045 259.9722 374.3535 C245.1431 386.168 236.1514 404.1279 236.1514 422.7266 Cf*U319.6367 468.4219 m312.6875 471.8062 305.2188 473.519 297.4341 473.519 c269.4258 473.519 246.6377 450.7339 246.6377 422.7266 c246.6377 409.998 251.0137 398.3916 259.291 389.1602 C260.1606 388.1904 L264.0225 394.0273 L263.8169 394.2676 L263.4707 394.3057 263.1851 394.3564 262.978 394.4023 C263.0317 394.5625 263.1064 394.7695 263.1992 395.0029 C262.896 395.3643 262.5913 395.7266 262.3022 396.0957 C261.9902 395.5996 261.6987 395.2314 261.4956 395 C260.7412 395.8066 258.7993 398.1582 258.7993 401.0361 c258.7993 401.1289 258.8032 401.2207 258.8076 401.3125 C255.1943 407.6729 253.3618 414.8418 253.3618 422.7266 c253.3618 447.0273 273.1323 466.7979 297.4341 466.7979 c303.4004 466.7979 309.1523 465.6367 314.5645 463.3423 C315.1436 463.9419 315.7158 464.415 316.248 464.7842 C310.3223 467.4419 304.0059 468.8096 297.4341 468.8096 c272.0225 468.8096 251.3467 448.1372 251.3467 422.7266 c251.3467 411.707 254.7856 402.0195 261.5215 393.8975 C261.1294 393.3018 260.582 392.4727 259.9536 391.5273 C252.5781 400.2158 248.6538 410.9561 248.6538 422.7266 c248.6538 449.624 270.5356 471.5063 297.4341 471.5063 c304.5801 471.5063 311.4404 469.9863 317.8584 467.0195 C317.5898 466.438 317.3271 465.8682 317.0645 465.2974 C317.6523 465.6299 318.1523 465.8296 318.4902 465.9438 C318.4941 465.9214 318.4941 465.9097 318.4941 465.8843 c318.4941 465.1343 318.3486 463.6973 317.4775 461.9927 C317.7061 461.8813 L320.5254 467.9922 L319.6367 468.4219 Lfu0 XR319.1855 478.3779 m314.3301 472.2368 L314.7754 472.084 315.2188 471.9253 315.6592 471.7607 C320.4785 477.8574 L320.0508 478.0366 319.6191 478.209 319.1855 478.3779 Cf309.6807 481.207 m306.8506 474.1953 L307.2969 474.1133 307.7422 474.0264 308.1855 473.9331 C311.0059 480.9165 L310.5654 481.02 310.123 481.1138 309.6807 481.207 Cf298.3765 482.4707 m297.6802 475.0386 L298.1284 475.0366 298.5762 475.0298 299.0215 475.0161 C299.7168 482.4351 L299.2695 482.4517 298.8232 482.4639 298.3765 482.4707 Cf287.3608 481.6309 m288.7725 474.3213 L289.2124 474.3945 289.6528 474.4629 290.0957 474.5249 C288.6821 481.8413 L288.2397 481.7764 287.7993 481.7056 287.3608 481.6309 Cf276.6714 478.7627 m280.0132 472.0562 L280.437 472.2061 280.8638 472.3516 281.2925 472.4902 C277.9409 479.2168 L277.5151 479.0698 277.0923 478.9185 276.6714 478.7627 Cf266.5322 473.8579 m271.521 468.1611 L271.9165 468.3877 272.3154 468.6079 272.7173 468.8247 C267.7021 474.5508 L267.3091 474.3237 266.9199 474.0933 266.5322 473.8579 Cf257.3198 466.9839 m263.6167 462.6094 L263.9702 462.9092 264.3281 463.2046 264.6885 463.4951 C258.3501 467.8975 L258.0034 467.5972 257.6602 467.2925 257.3198 466.9839 Cf249.4824 458.3516 m256.7173 455.5361 L257.0127 455.9023 257.313 456.2637 257.6172 456.6211 C250.3271 459.4585 L250.042 459.0923 249.7603 458.7241 249.4824 458.3516 Cf243.4302 448.3013 m251.2153 447.2163 L251.4399 447.6372 251.6694 448.0557 251.9038 448.4702 C244.0498 449.5649 L243.8379 449.1465 243.6313 448.7256 243.4302 448.3013 Cf239.4663 437.2744 m247.4038 438.0337 L247.5469 438.4985 247.6943 438.9614 247.8491 439.4204 C239.8311 438.6538 L239.7041 438.1958 239.5825 437.7363 239.4663 437.2744 Cf237.7471 425.7251 m245.4253 428.3936 L245.479 428.8892 245.54 429.3823 245.6074 429.874 C237.8369 427.1724 L237.8018 426.6909 237.771 426.2085 237.7471 425.7251 Cf238.3418 414.0605 m245.2783 418.6152 L245.2397 419.126 245.2046 419.6367 245.1812 420.1514 C238.1353 415.5234 L238.1982 415.0352 238.2666 414.5479 238.3418 414.0605 Cf241.2993 402.6475 m246.9307 408.8486 L246.7905 409.3652 246.6655 409.8867 246.5415 410.4092 C240.793 404.0781 L240.9556 403.5986 241.124 403.123 241.2993 402.6475 Cf246.5962 391.7402 m250.5796 399.3184 L250.3306 399.8105 250.082 400.3037 249.8496 400.8047 C245.7935 393.0869 L246.0552 392.6348 246.3228 392.1855 246.5962 391.7402 Cf253.3823 382.6514 m255.5112 391.4316 L255.1592 391.8945 254.813 392.3633 254.4771 392.8369 C252.3057 383.8789 L252.6592 383.4668 253.0186 383.0566 253.3823 382.6514 CfU318.1904 461.4404 m318.375 461.3184 318.5566 461.1978 318.7354 461.0767 C318.8984 461.1489 319.0605 461.2256 319.2275 461.2866 c319.4229 461.3594 319.6152 461.4209 319.8057 461.4824 C319.3936 461.7534 319.0078 462.0576 318.6396 462.3799 C318.5137 462.0757 318.3613 461.7627 318.1904 461.4404 CfULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_shading_AI8 /terminate get execAdobe_ColorImage_AI6 /terminate get execAdobe_cshow /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF